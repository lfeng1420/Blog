<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[ZooKeeper服务框架介绍]]></title>
      <url>/2019/ZooKeeper-Intro.html</url>
      <content type="html"><![CDATA[<h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p><code>ZooKeeper</code>（简称ZK）是一个开源的分布式协调服务，其设计目标是将那些复杂且容易出错的分布式一致性服务封装起来，构成一个高效可靠的<strong>原语集</strong>，并以一系列简单易用的接口提供给用户使用。<br><strong>原语： 操作系统或计算机网络用语范畴，由若干条指令组成，用于完成一定功能的一个过程，具有不可分割性，即原语的执行必须是连续的，在执行过程中不允许被中断。</strong><br><a id="more"></a></p>
<h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><ul>
<li><strong>顺序一致性</strong>：客户端发起的更新会按发送顺序被应用到ZK上；</li>
<li><strong>原子性</strong>：更新操作要么成功要么失败，不会出现中间状态；</li>
<li><strong>单一视图</strong>：无论客户端连接的是哪个服务器，其看到的服务视图（树型结构）都是一致的；</li>
<li><strong>可靠性</strong>：一个更新操作一旦被接受即不会意外丢失，除非被其它更新操作覆盖；</li>
<li><strong>实时性</strong>：在一定时间（不能保证立即）内，客户端能获取到最新的数据。</li>
</ul>
<h2 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h2><p>ZK提供一个多层级的节点（<code>ZNode</code>）命名空间，类似于文件系统。命名就是一系列用<code>/</code>分割的路径元素，每一个ZK节点的命名空间都是用路径进行标识的。与文件系统不同的是，这些节点都可以设置关联数据，而文件系统中只有文件节点可以存放数据而目录节点不能。<br>ZK为了保证高吞吐和低延迟，在内存中维护了这个树状的目录结构，这种特性使得ZK不能用于存放大量的数据，每个节点的存放数据上限为1M。<br>ZK保证读写都是原子操作，且每次读写操作都是对数据的完整读取或完整写入，并不提供对数据进行部分读取或者写入的操作。</p>
<p><img src="../images/2019/ZooKeeper-Intro/zknamespace.jpg" alt=""></p>
<h3 id="节点类型"><a href="#节点类型" class="headerlink" title="节点类型"></a>节点类型</h3><p>节点类型有以下三大类：<br>持久节点（<code>PERSISTENT</code>）：持久节点是指在节点创建后，就一直存在，不会因为创建该节点的客户端会话失效而消失，直到有删除操作来主动清除这个节点。<br>临时节点（<code>EPHEMERAL</code>）：在客户端会话结束后自动删除，利用临时节点的这一特性，我们可以使用临时节点来进行集群管理，包括发现服务的上下线等。<br>顺序节点（<code>SEQUENTIAL</code>）：创建时自动在指定路径之后添加<code>%10d</code>格式的序号，这个序号可以保证在同一个父节点下是唯一的。<br>通过组合可以生成如下四种类型节点：<br>持久节点（<code>PERSISTENT</code>）、持久顺序节点（<code>PERSISTENT_SEQUENTIAL</code>）、临时节点（<code>EPEMERAL</code>）和临时顺序节点（<code>EPEMERAL_SEQUENTIAL</code>）。<br>需要注意临时节点不能创建子节点。</p>
<h3 id="节点属性"><a href="#节点属性" class="headerlink" title="节点属性"></a>节点属性</h3><ul>
<li><code>dataVersion</code>：数据版本号，每次对节点进行set操作，<code>dataVersion</code>的值都会增加1（即使设置的是相同的数据）。</li>
<li><code>cversion</code>：子节点的版本号。当节点下的子节点有变化时，<code>cversion</code>的值就会增加1。</li>
<li><code>aclVersion</code>：<code>ACL</code>（<code>Access Control List</code>，访问控制）的版本号。</li>
<li><code>cZxid</code>：创建的事务id。</li>
<li><code>mZxid</code>：被修改的事务id，即每次对节点的修改都会更新<code>mZxid</code>。</li>
<li><code>ctime</code>：创建的时间戳。</li>
<li><code>mtime</code>：修改的时间戳。</li>
<li><code>dataLength</code>：数据长度。</li>
<li><code>numChildren</code>：子节点数量。</li>
<li><code>ephemeralOwner</code>：如果节点是临时节点，则这是节点所有者的<code>session ID</code>；如果不是临时节点，则该字段为零。</li>
</ul>
<p>ZK状态的每一次改变，都对应着一个递增的<code>Transaction id</code>，该id称为<code>zxid</code>。实现中<code>zxid</code>是一个64位数值，高32位是集群选举周期<code>epoch</code>，每次选出新的<code>Leader</code>，<code>epoch</code>加1。低32位为该周期内的序号，每次周期值变化，都将低32位的序号重置。创建任意节点，或者更新任意节点的数据，或者删除任意节点，都会导致ZK状态发生改变，从而导致<code>zxid</code>的值增加。</p>
<p>示例：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[zk: localhost:2181(CONNECTED) 4] get -s /key1</span><br><span class="line">werw2342</span><br><span class="line">cZxid = 0x10000000d</span><br><span class="line">ctime = Wed Jul 03 15:39:20 CST 2019</span><br><span class="line">mZxid = 0x10000000d</span><br><span class="line">mtime = Wed Jul 03 15:39:20 CST 2019</span><br><span class="line">pZxid = 0x10000000d</span><br><span class="line">cversion = 0</span><br><span class="line">dataVersion = 0</span><br><span class="line">aclVersion = 0</span><br><span class="line">ephemeralOwner = 0x300157916070000</span><br><span class="line">dataLength = 8</span><br><span class="line">numChildren = 0</span><br></pre></td></tr></table></figure></p>
<h3 id="事件监听器（Watch）"><a href="#事件监听器（Watch）" class="headerlink" title="事件监听器（Watch）"></a>事件监听器（<code>Watch</code>）</h3><p>事件监听器是ZK中的一个很重要的特性。ZK允许用户在指定节点上注册一些监听器，并且在一些特定事件触发的时候，ZK服务器会将事件通知给感兴趣的客户端，该机制是ZK实现分布式协调服务的重要特性。<br>事件监听器具有如下特点：</p>
<ul>
<li><strong>主动推送</strong>：`事件监听器被触发时，由ZK服务器主动将更新推送给客户端，而不需要客户端轮询。</li>
<li><strong>一次性</strong>：数据变化时，监听器只会被触发一次。如果客户端想得到后续更新的通知，必须要在监听器被触发后重新注册一个事件监听器。</li>
<li><strong>可见性</strong>：如果一个客户端在读请求中附带事件监听器，事件监听器被触发的同时再次读取数据，客户端在得到监听器消息之前肯定不可能看到更新后的数据。换句话说，更新通知先于更新结果。</li>
<li><strong>顺序性</strong>：如果多个更新触发了多个事件监听器，那事件监听器被触发的顺序与更新顺序一致。</li>
</ul>
<h3 id="访问控制（ACL）"><a href="#访问控制（ACL）" class="headerlink" title="访问控制（ACL）"></a>访问控制（<code>ACL</code>）</h3><p><code>ACL</code>的实现方式非常类似于<code>UNIX</code>文件的访问权限：它采用访问权限位允许或禁止对节点的各种操作以及能进行操作的范围。不同于<code>UNIX</code>权限的是，ZK的节点不局限于用户（文件的拥有者），组和其他人（其它）这三个标准范围。ZK不具有节点的拥有者的概念，相反，ACL指定id集以及与之对应的权限。需要注意<code>ACL</code>仅针对于一个特定的节点，没有递归机制。<br><code>ACL</code>使用<code>schema:id:permission</code>标识，各个部分意义如下：</p>
<ul>
<li><code>schema</code>：方案，可使用<code>world</code>/<code>ip</code>/<code>auth</code>/<code>digest</code>；</li>
<li><code>id</code>：授权对象ID，即权限赋予的对象或实体，例如：IP地址或用户名密码；</li>
<li><code>permission</code>：权限，包含<code>CREATE</code>/<code>DELETE</code>/<code>READ</code>/<code>WRITE</code>/<code>ADMIN</code>，简写为<code>c/d/r/w/a</code>，其中<code>ADMIN</code>表示可设置节点<code>ACL</code>权限。</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># world</span></span><br><span class="line"><span class="comment"># 格式：setAcl &lt;path&gt; world:anyone:&lt;acl&gt;</span></span><br><span class="line"><span class="comment"># 设置所有人拥有全部权限，默认情况，注意world下只有anyone</span></span><br><span class="line">setAcl /key1 world:anyone:cdrwa</span><br><span class="line"></span><br><span class="line"><span class="comment"># ip</span></span><br><span class="line"><span class="comment"># 格式：setAcl &lt;path&gt; ip:&lt;ip&gt;:&lt;acl&gt;</span></span><br><span class="line"><span class="comment"># &lt;ip&gt;可以是具体IP也可以是IP/bit格式，即IP转换为二进制，匹配前bit位</span></span><br><span class="line"><span class="comment"># 设置前缀为192.168的IP拥有除了设置ACL权限之外的其他权限</span></span><br><span class="line">setAcl /key1 ip:192.168.0.0/16:cdrw</span><br><span class="line"></span><br><span class="line"><span class="comment"># auth</span></span><br><span class="line"><span class="comment"># 添加认证用户：addauth digest &lt;user&gt;:&lt;password&gt;</span></span><br><span class="line"><span class="comment"># 格式：setAcl &lt;path&gt; auth:&lt;user&gt;:&lt;acl&gt;</span></span><br><span class="line">addauth digest testuser:testuser</span><br><span class="line">setAcl /key1 auth:testuser:cdrwa</span><br><span class="line"></span><br><span class="line"><span class="comment"># digest</span></span><br><span class="line"><span class="comment"># 格式：setAcl &lt;path&gt; digest:&lt;user&gt;:&lt;password&gt;:&lt;acl&gt;</span></span><br><span class="line"><span class="comment"># &lt;password&gt;为经过SHA1及BASE64处理的密文（BASE64(SHA1(password))）</span></span><br></pre></td></tr></table></figure>
<h2 id="服务器集群"><a href="#服务器集群" class="headerlink" title="服务器集群"></a>服务器集群</h2><p><img src="../images/2019/ZooKeeper-Intro/zkservice.jpg" alt=""></p>
<h3 id="角色"><a href="#角色" class="headerlink" title="角色"></a>角色</h3><ul>
<li><code>Leader</code>：负责发起并维护与各<code>Follwer</code>及<code>Observer</code>间的心跳以及主导所有写操作的执行流程。所有的写操作必须要通过<code>Leader</code>完成再由<code>Leader</code>将写操作广播给其它服务器（包括自己在内）。</li>
<li><code>Follower</code>：可直接处理并返回客户端的读请求，同时将写请求转发给<code>Leader</code>处理，并且负责在<code>Leader</code>处理写请求时对请求进行投票。</li>
<li><code>Observer</code>：角色与<code>Follower</code>类似，但是无投票权。目的是扩展系统，提高读取速度。</li>
<li><code>Learner</code>：<code>Follower</code>/<code>Observer</code>。</li>
<li><code>Client</code>：请求发起方。</li>
</ul>
<h3 id="原子消息广播协议（Zookeeper-Atomic-Broadcast）"><a href="#原子消息广播协议（Zookeeper-Atomic-Broadcast）" class="headerlink" title="原子消息广播协议（Zookeeper Atomic Broadcast）"></a>原子消息广播协议（<code>Zookeeper Atomic Broadcast</code>）</h3><p>为了保证写操作的一致性与可用性，ZK设计了一种名为原子广播的支持崩溃恢复的一致性协议。基于该协议，ZK实现了一种主从模式的系统架构来保持集群中各个副本之间的数据一致性。<br>根据ZAB协议，所有的写操作都必须通过<code>Leader</code>完成，<code>Leader</code>写入日志后再复制到所有的<code>Follower</code>节点。一旦<code>Leader</code>节点无法工作，ZAB协议能够自动从<code>Follower</code>中重新选出一个合适的替代者，即新的<code>Leader</code>，该过程被称为领导选举。</p>
<h3 id="服务器状态"><a href="#服务器状态" class="headerlink" title="服务器状态"></a>服务器状态</h3><ul>
<li><code>LOOKING</code>：不确定<code>Leader</code>状态。该状态下的服务器认为当前集群中没有<code>Leader</code>，会发起<code>Leader</code>选举；</li>
<li><code>FOLLOWING</code>：跟随者状态。表明当前服务器角色是<code>Follower</code>，并且它知道<code>Leader</code>是谁；</li>
<li><code>LEADING</code>：领导者状态。表明当前服务器角色是<code>Leader</code>，它会维护与<code>Follower</code>间的心跳；</li>
<li><code>OBSERVING</code>：观察者状态。表明当前服务器角色是<code>Observer</code>，与<code>Folower</code>唯一的不同在于不参与选举，也不参与集群写操作时的投票。</li>
</ul>
<h3 id="会话"><a href="#会话" class="headerlink" title="会话"></a>会话</h3><p>会话指的是ZK服务器与客户端会话。在ZK中，一个客户端连接是指客户端和服务器之间的一个<code>TCP</code>长连接。客户端启动的时候，首先会与服务器建立一个<code>TCP</code>连接，从第一次连接建立开始，客户端会话的生命周期也开始了。通过这个连接，客户端能够通过心跳检测与服务器保持有效的会话，也能够向ZK服务器发送请求并接受响应，同时还能够通过该连接接收来自服务器的<code>Watch</code>事件通知。<br>在为客户端创建会话之前，服务端首先会为每个客户端都分配一个<code>SessionID</code>。<code>SessionID</code>是ZK会话的一个重要标识，许多与会话相关的运行机制都是基于这个<code>SessionID</code>的，因此，无论是哪台服务器为客户端分配的<code>SessionID</code>，都务必保证全局唯一。</p>
<h3 id="读写操作"><a href="#读写操作" class="headerlink" title="读写操作"></a>读写操作</h3><h4 id="读操作"><a href="#读操作" class="headerlink" title="读操作"></a>读操作</h4><p><code>Leader</code>/<code>Follower</code>/<code>Observer</code>都可直接处理读数据请求（从内存中读取数据）。</p>
<h4 id="写操作"><a href="#写操作" class="headerlink" title="写操作"></a>写操作</h4><ul>
<li>客户端连接非<code>Leader</code>服务器进行写操作时，服务器转发消息交给<code>Leader</code>服务器处理；</li>
<li><code>Leader</code>服务器收到写操作请求时，将其转换为一个提议（<code>Proposal</code>），分发给集群内所有<code>Follwer</code>，之后等待各个<code>Follwer</code>的回复（<code>ACK</code>）；</li>
<li><code>Follower</code>收到提议时，记录事务日志，待日志记录完成后给<code>Leader</code>发送<code>ACK</code>；</li>
<li><code>Leader</code>收到超过半数（n/2+1，<code>Leader</code>自己有一个）的回复后，向所有<code>Follower</code>和<code>Observer</code>发送提交（<code>Commit</code>）消息；</li>
<li><code>Leader</code>回复操作结果。</li>
</ul>
<h3 id="领导选举"><a href="#领导选举" class="headerlink" title="领导选举"></a>领导选举</h3><h4 id="投票数据结构"><a href="#投票数据结构" class="headerlink" title="投票数据结构"></a>投票数据结构</h4><p>每个服务器在进行<code>Leader</code>选举时，会发送如下关键信息<br><code>leader</code>：被推举的服务器的<code>sid</code>；<br><code>zxid</code>：被推举的服务器上所保存的数据的最大<code>zxid</code>；<br><code>electionEpoch</code>：当前服务器的<code>epoch</code>（逻辑时钟），用来判断多个投票是否在同一轮选举周期中，每进行新一轮的投票后，都会对该值加1；<br><code>peerEpoch</code>：被推举的服务器的<code>epoch</code>；<br><code>state</code>：投票所属服务器的状态；<br><code>sid</code>：当前服务器的<code>sid</code>。</p>
<h4 id="投票流程"><a href="#投票流程" class="headerlink" title="投票流程"></a>投票流程</h4><p><strong>1、自增选举轮次</strong><br>ZK规定所有有效的投票都必须在同一轮次中。每个服务器在开始新一轮投票时，会先对自己维护的<code>electionEpoch</code>进行自增操作。</p>
<p><strong>2、初始化投票</strong><br>每个服务器在广播自己的投票前，会将自己的投票记录表清空。该记录表记录了收到的投票。例：服务器2投票给服务器3，服务器3投票给服务器1，则服务器1的投票记录表为<code>(2, 3), (3, 1)</code>。记录表中只会记录每一投票者的最后一票，如投票者更新自己的投票，则其它服务器收到该新投票后会在自己的投票记录表中更新该服务器的投票。</p>
<p><strong>3、发送初始化投票</strong><br>每个服务器最开始都是把票投给自己并广播投票消息给其他服务器。</p>
<p><strong>4、接收并处理外部投票</strong><br>收到外部投票后，首先会根据投票信息中所包含的<code>epoch</code>来进行不同处理：</p>
<ul>
<li>外部投票的<code>epoch</code>大于自己的<code>epoch</code>，说明服务器的选举轮次落后于其它服务器的选举轮次，此时立即清空自己的投票记录表并将自己的<code>epoch</code>更新为收到的<code>epoch</code>，之后再对比自己之前的投票与收到的投票确定是否需要变更自己的投票（投票PK），最终再次将自己的投票广播出去；</li>
<li>外部投票的<code>epoch</code>小于自己的<code>epoch</code>，当前服务器直接忽略该投票；</li>
<li>外部投票的<code>epoch</code>与自己的相等，此时进行投票PK。</li>
</ul>
<p><strong>5、投票PK</strong><br>投票PK是基于<code>(zxid,leader)</code>的对比：</p>
<ul>
<li>外部<code>zxid</code>大于自己的<code>zxid</code>，变更自己的投票信息为<code>(zxid,leader)</code>并广播，另外将收到的票及自己更新后的票放入自己的投票记录表；</li>
<li><code>zxid</code>相等，外部<code>leader</code>大于自己的<code>leader</code>，变更自己的投票信息为<code>(zxid,leader)</code>并广播，另外将收到的票及自己更新后的票放入自己的投票记录表；</li>
<li>其他情况，不做任何变更。</li>
</ul>
<p><strong>6、统计投票</strong><br>如果已经确定有过半服务器认可了自己的投票（可能是更新后的投票），则终止投票。否则继续接收其它服务器的投票。如果超过了指定时间没有收到足够的投票，则</p>
<p><strong>7、更新服务器状态</strong><br>投票终止后，服务器开始更新自身状态。若过半的票投给了自己，则将自己的服务器状态更新为<code>LEADING</code>，否则将自己的状态更新为<code>FOLLOWING</code>。</p>
<h3 id="领导选举场景"><a href="#领导选举场景" class="headerlink" title="领导选举场景"></a>领导选举场景</h3><h4 id="启动时"><a href="#启动时" class="headerlink" title="启动时"></a>启动时</h4><p>以三台服务器为例，流程如下图所示（由于初始情况下<code>epoch</code>都为1，<code>zxid</code>都为0，因此省略）：<br><img src="../images/2019/ZooKeeper-Intro/start-route.png" alt=""></p>
<p>1、初始时，每台服务器都处于<code>LOOKING</code>状态，都投票给自己并广播给其他服务器；<br>2、服务器1收到2和3发来的投票，由于ID的大小关系，最终会清空投票列表并更新自己的投票为服务器3并广播给其他服务器；服务器2收到1和3发来的投票，同理，最终只保留服务器3的投票，以及更新自己的投票为服务器3并广播给其他服务器；服务器3收到1和2发来的投票，由于都比自己的ID小，因此不会做任何处理；<br>3、服务器2收到1发来的投票，放入自己的投票列表；服务器3收到1和2发来的投票，放入自己的投票列表。此时三个服务器的投票列表相同，因此最终服务器3成为<code>Leader</code>，服务器1和2成为<code>Follower</code>。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># server 1（`round`对应自己的`epoch`）</span></span><br><span class="line">2019-07-08 11:13:37,882 [myid:1] - INFO  [QuorumPeer[myid=1](plain=/0:0:0:0:0:0:0:0:2181)(secure=disabled):QuorumPeer@1193] - LOOKING</span><br><span class="line">2019-07-08 11:13:37,883 [myid:1] - INFO  [QuorumPeer[myid=1](plain=/0:0:0:0:0:0:0:0:2181)(secure=disabled):FastLeaderElection@885] - New election. My id =  1, proposed zxid=0x0</span><br><span class="line">2019-07-08 11:13:39,397 [myid:1] - INFO  [WorkerReceiver[myid=1]:FastLeaderElection@679] - Notification: 2 (message format version), 1 (n.leader), 0x0 (n.zxid), 0x1 (n.round), LOOKING (n.state), 1 (n.sid), 0x0 (n.peerEPoch), LOOKING (my state)0 (n.config version)</span><br><span class="line">2019-07-08 11:13:39,398 [myid:1] - WARN  [RecvWorker:3:QuorumCnxManager<span class="variable">$RecvWorker</span>@1176] - Connection broken <span class="keyword">for</span> id 3, my id = 1, error = </span><br><span class="line">java.io.EOFException</span><br><span class="line">	at java.io.DataInputStream.readInt(DataInputStream.java:392)</span><br><span class="line">2019-07-08 11:13:39,398 [myid:1] - WARN  [RecvWorker:3:QuorumCnxManager<span class="variable">$RecvWorker</span>@1179] - Interrupting SendWorker</span><br><span class="line">2019-07-08 11:13:39,398 [myid:1] - WARN  [SendWorker:3:QuorumCnxManager<span class="variable">$SendWorker</span>@1092] - Interrupted <span class="keyword">while</span> waiting <span class="keyword">for</span> message on queue</span><br><span class="line">java.lang.InterruptedException</span><br><span class="line">	at java.util.concurrent.locks.AbstractQueuedSynchronizer<span class="variable">$ConditionObject</span>.reportInterruptAfterWait(AbstractQueuedSynchronizer.java:2014)</span><br><span class="line">2019-07-08 11:13:40,401 [myid:1] - INFO  [WorkerReceiver[myid=1]:FastLeaderElection@679] - Notification: 2 (message format version), 2 (n.leader), 0x0 (n.zxid), 0x1 (n.round), LOOKING (n.state), 2 (n.sid), 0x0 (n.peerEPoch), LOOKING (my state)0 (n.config version)</span><br><span class="line">2019-07-08 11:13:40,402 [myid:1] - INFO  [WorkerReceiver[myid=1]:FastLeaderElection@679] - Notification: 2 (message format version), 3 (n.leader), 0x0 (n.zxid), 0x1 (n.round), LOOKING (n.state), 3 (n.sid), 0x0 (n.peerEPoch), LOOKING (my state)0 (n.config version)</span><br><span class="line">2019-07-08 11:13:40,402 [myid:1] - INFO  [WorkerReceiver[myid=1]:FastLeaderElection@679] - Notification: 2 (message format version), 2 (n.leader), 0x0 (n.zxid), 0x1 (n.round), LOOKING (n.state), 2 (n.sid), 0x0 (n.peerEPoch), LOOKING (my state)0 (n.config version)</span><br><span class="line">2019-07-08 11:13:40,403 [myid:1] - INFO  [WorkerReceiver[myid=1]:FastLeaderElection@679] - Notification: 2 (message format version), 3 (n.leader), 0x0 (n.zxid), 0x1 (n.round), LOOKING (n.state), 3 (n.sid), 0x0 (n.peerEPoch), LOOKING (my state)0 (n.config version)</span><br><span class="line">2019-07-08 11:13:41,412 [myid:1] - INFO  [WorkerReceiver[myid=1]:FastLeaderElection@679] - Notification: 2 (message format version), 2 (n.leader), 0x0 (n.zxid), 0x1 (n.round), LOOKING (n.state), 1 (n.sid), 0x0 (n.peerEPoch), LOOKING (my state)0 (n.config version)</span><br><span class="line">2019-07-08 11:13:42,424 [myid:1] - INFO  [WorkerReceiver[myid=1]:FastLeaderElection@679] - Notification: 2 (message format version), 2 (n.leader), 0x0 (n.zxid), 0x1 (n.round), LOOKING (n.state), 2 (n.sid), 0x0 (n.peerEPoch), LOOKING (my state)0 (n.config version)</span><br><span class="line">2019-07-08 11:13:42,425 [myid:1] - INFO  [WorkerReceiver[myid=1]:FastLeaderElection@679] - Notification: 2 (message format version), 3 (n.leader), 0x0 (n.zxid), 0x1 (n.round), LOOKING (n.state), 1 (n.sid), 0x0 (n.peerEPoch), LOOKING (my state)0 (n.config version)</span><br><span class="line">2019-07-08 11:13:42,425 [myid:1] - INFO  [WorkerReceiver[myid=1]:FastLeaderElection@679] - Notification: 2 (message format version), 3 (n.leader), 0x0 (n.zxid), 0x1 (n.round), LOOKING (n.state), 2 (n.sid), 0x0 (n.peerEPoch), LOOKING (my state)0 (n.config version)</span><br><span class="line">2019-07-08 11:13:42,626 [myid:1] - INFO  [QuorumPeer[myid=1](plain=/0:0:0:0:0:0:0:0:2181)(secure=disabled):QuorumPeer@1269] - FOLLOWING</span><br><span class="line"></span><br><span class="line"><span class="comment"># server 2</span></span><br><span class="line">2019-07-08 11:13:38,469 [myid:2] - INFO  [QuorumPeer[myid=2](plain=/0:0:0:0:0:0:0:0:2182)(secure=disabled):QuorumPeer@1193] - LOOKING</span><br><span class="line">2019-07-08 11:13:38,470 [myid:2] - INFO  [QuorumPeer[myid=2](plain=/0:0:0:0:0:0:0:0:2182)(secure=disabled):FastLeaderElection@885] - New election. My id =  2, proposed zxid=0x0</span><br><span class="line">2019-07-08 11:13:39,518 [myid:2] - INFO  [WorkerReceiver[myid=2]:FastLeaderElection@679] - Notification: 2 (message format version), 2 (n.leader), 0x0 (n.zxid), 0x1 (n.round), LOOKING (n.state), 2 (n.sid), 0x0 (n.peerEPoch), LOOKING (my state)0 (n.config version)</span><br><span class="line">2019-07-08 11:13:39,518 [myid:2] - INFO  [QuorumPeer[myid=2](plain=/0:0:0:0:0:0:0:0:2182)(secure=disabled):FastLeaderElection@919] - Notification time out: 400</span><br><span class="line">2019-07-08 11:13:39,518 [myid:2] - INFO  [WorkerReceiver[myid=2]:FastLeaderElection@679] - Notification: 2 (message format version), 1 (n.leader), 0x0 (n.zxid), 0x1 (n.round), LOOKING (n.state), 1 (n.sid), 0x0 (n.peerEPoch), LOOKING (my state)0 (n.config version)</span><br><span class="line">2019-07-08 11:13:39,519 [myid:2] - INFO  [localhost/127.0.0.1:2382:QuorumCnxManager<span class="variable">$Listener</span>@888] - Received connection request /127.0.0.1:53745</span><br><span class="line">2019-07-08 11:13:40,142 [myid:2] - WARN  [RecvWorker:3:QuorumCnxManager<span class="variable">$RecvWorker</span>@1176] - Connection broken <span class="keyword">for</span> id 3, my id = 2, error = </span><br><span class="line">java.io.EOFException</span><br><span class="line">	at java.io.DataInputStream.readInt(DataInputStream.java:392)</span><br><span class="line">2019-07-08 11:13:40,521 [myid:2] - INFO  [WorkerReceiver[myid=2]:FastLeaderElection@679] - Notification: 2 (message format version), 1 (n.leader), 0x0 (n.zxid), 0x1 (n.round), LOOKING (n.state), 1 (n.sid), 0x0 (n.peerEPoch), LOOKING (my state)0 (n.config version)</span><br><span class="line">2019-07-08 11:13:40,522 [myid:2] - INFO  [WorkerSender[myid=2]:QuorumCnxManager@430] - Have smaller server identifier, so dropping the connection: (3, 2)</span><br><span class="line">2019-07-08 11:13:41,142 [myid:2] - INFO  [localhost/127.0.0.1:2382:QuorumCnxManager<span class="variable">$Listener</span>@888] - Received connection request /127.0.0.1:53755</span><br><span class="line">2019-07-08 11:13:41,143 [myid:2] - WARN  [RecvWorker:3:QuorumCnxManager<span class="variable">$RecvWorker</span>@1176] - Connection broken <span class="keyword">for</span> id 3, my id = 2, error = </span><br><span class="line">java.io.EOFException</span><br><span class="line">	at java.io.DataInputStream.readInt(DataInputStream.java:392)</span><br><span class="line">2019-07-08 11:13:41,523 [myid:2] - INFO  [WorkerReceiver[myid=2]:FastLeaderElection@679] - Notification: 2 (message format version), 3 (n.leader), 0x0 (n.zxid), 0x1 (n.round), LOOKING (n.state), 3 (n.sid), 0x0 (n.peerEPoch), LOOKING (my state)0 (n.config version)</span><br><span class="line">2019-07-08 11:13:41,524 [myid:2] - INFO  [WorkerReceiver[myid=2]:FastLeaderElection@679] - Notification: 2 (message format version), 3 (n.leader), 0x0 (n.zxid), 0x1 (n.round), LOOKING (n.state), 3 (n.sid), 0x0 (n.peerEPoch), LOOKING (my state)0 (n.config version)</span><br><span class="line">2019-07-08 11:13:42,524 [myid:2] - INFO  [WorkerReceiver[myid=2]:FastLeaderElection@679] - Notification: 2 (message format version), 2 (n.leader), 0x0 (n.zxid), 0x1 (n.round), LOOKING (n.state), 1 (n.sid), 0x0 (n.peerEPoch), LOOKING (my state)0 (n.config version)</span><br><span class="line">2019-07-08 11:13:42,525 [myid:2] - INFO  [WorkerReceiver[myid=2]:FastLeaderElection@679] - Notification: 2 (message format version), 2 (n.leader), 0x0 (n.zxid), 0x1 (n.round), LOOKING (n.state), 2 (n.sid), 0x0 (n.peerEPoch), LOOKING (my state)0 (n.config version)</span><br><span class="line">2019-07-08 11:13:42,525 [myid:2] - INFO  [WorkerReceiver[myid=2]:FastLeaderElection@679] - Notification: 2 (message format version), 3 (n.leader), 0x0 (n.zxid), 0x1 (n.round), LOOKING (n.state), 3 (n.sid), 0x0 (n.peerEPoch), LOOKING (my state)0 (n.config version)</span><br><span class="line">2019-07-08 11:13:42,525 [myid:2] - INFO  [WorkerReceiver[myid=2]:FastLeaderElection@679] - Notification: 2 (message format version), 3 (n.leader), 0x0 (n.zxid), 0x1 (n.round), LOOKING (n.state), 3 (n.sid), 0x0 (n.peerEPoch), LOOKING (my state)0 (n.config version)</span><br><span class="line">2019-07-08 11:13:42,526 [myid:2] - INFO  [WorkerReceiver[myid=2]:FastLeaderElection@679] - Notification: 2 (message format version), 3 (n.leader), 0x0 (n.zxid), 0x1 (n.round), LOOKING (n.state), 1 (n.sid), 0x0 (n.peerEPoch), LOOKING (my state)0 (n.config version)</span><br><span class="line">2019-07-08 11:13:42,526 [myid:2] - INFO  [WorkerReceiver[myid=2]:FastLeaderElection@679] - Notification: 2 (message format version), 3 (n.leader), 0x0 (n.zxid), 0x1 (n.round), LOOKING (n.state), 2 (n.sid), 0x0 (n.peerEPoch), LOOKING (my state)0 (n.config version)</span><br><span class="line">2019-07-08 11:13:42,727 [myid:2] - INFO  [QuorumPeer[myid=2](plain=/0:0:0:0:0:0:0:0:2182)(secure=disabled):QuorumPeer@1269] - FOLLOWING</span><br><span class="line"></span><br><span class="line"><span class="comment"># server 3</span></span><br><span class="line">2019-07-08 11:13:39,122 [myid:3] - INFO  [QuorumPeer[myid=3](plain=/0:0:0:0:0:0:0:0:2183)(secure=disabled):QuorumPeer@1193] - LOOKING</span><br><span class="line">2019-07-08 11:13:39,123 [myid:3] - INFO  [QuorumPeer[myid=3](plain=/0:0:0:0:0:0:0:0:2183)(secure=disabled):FastLeaderElection@885] - New election. My id =  3, proposed zxid=0x0</span><br><span class="line">2019-07-08 11:13:40,140 [myid:3] - INFO  [WorkerReceiver[myid=3]:FastLeaderElection@679] - Notification: 2 (message format version), 1 (n.leader), 0x0 (n.zxid), 0x1 (n.round), LOOKING (n.state), 1 (n.sid), 0x0 (n.peerEPoch), LOOKING (my state)0 (n.config version)</span><br><span class="line">2019-07-08 11:13:40,141 [myid:3] - INFO  [WorkerReceiver[myid=3]:FastLeaderElection@679] - Notification: 2 (message format version), 3 (n.leader), 0x0 (n.zxid), 0x1 (n.round), LOOKING (n.state), 3 (n.sid), 0x0 (n.peerEPoch), LOOKING (my state)0 (n.config version)</span><br><span class="line">2019-07-08 11:13:41,142 [myid:3] - INFO  [WorkerReceiver[myid=3]:FastLeaderElection@679] - Notification: 2 (message format version), 2 (n.leader), 0x0 (n.zxid), 0x1 (n.round), LOOKING (n.state), 2 (n.sid), 0x0 (n.peerEPoch), LOOKING (my state)0 (n.config version)</span><br><span class="line">2019-07-08 11:13:41,142 [myid:3] - INFO  [WorkerReceiver[myid=3]:FastLeaderElection@679] - Notification: 2 (message format version), 3 (n.leader), 0x0 (n.zxid), 0x1 (n.round), LOOKING (n.state), 3 (n.sid), 0x0 (n.peerEPoch), LOOKING (my state)0 (n.config version)</span><br><span class="line">2019-07-08 11:13:41,142 [myid:3] - INFO  [WorkerReceiver[myid=3]:FastLeaderElection@679] - Notification: 2 (message format version), 1 (n.leader), 0x0 (n.zxid), 0x1 (n.round), LOOKING (n.state), 1 (n.sid), 0x0 (n.peerEPoch), LOOKING (my state)0 (n.config version)</span><br><span class="line">2019-07-08 11:13:41,143 [myid:3] - INFO  [WorkerReceiver[myid=3]:FastLeaderElection@679] - Notification: 2 (message format version), 2 (n.leader), 0x0 (n.zxid), 0x1 (n.round), LOOKING (n.state), 1 (n.sid), 0x0 (n.peerEPoch), LOOKING (my state)0 (n.config version)</span><br><span class="line">2019-07-08 11:13:41,143 [myid:3] - INFO  [localhost/127.0.0.1:2383:QuorumCnxManager<span class="variable">$Listener</span>@888] - Received connection request /127.0.0.1:53753</span><br><span class="line">2019-07-08 11:13:41,143 [myid:3] - WARN  [RecvWorker:2:QuorumCnxManager<span class="variable">$RecvWorker</span>@1176] - Connection broken <span class="keyword">for</span> id 2, my id = 3, error = </span><br><span class="line">java.net.SocketException: socket closed</span><br><span class="line">2019-07-08 11:13:41,145 [myid:3] - INFO  [WorkerReceiver[myid=3]:FastLeaderElection@679] - Notification: 2 (message format version), 2 (n.leader), 0x0 (n.zxid), 0x1 (n.round), LOOKING (n.state), 2 (n.sid), 0x0 (n.peerEPoch), LOOKING (my state)0 (n.config version)</span><br><span class="line">2019-07-08 11:13:41,413 [myid:3] - INFO  [WorkerReceiver[myid=3]:FastLeaderElection@679] - Notification: 2 (message format version), 3 (n.leader), 0x0 (n.zxid), 0x1 (n.round), LOOKING (n.state), 1 (n.sid), 0x0 (n.peerEPoch), LOOKING (my state)0 (n.config version)</span><br><span class="line">2019-07-08 11:13:41,525 [myid:3] - INFO  [WorkerReceiver[myid=3]:FastLeaderElection@679] - Notification: 2 (message format version), 3 (n.leader), 0x0 (n.zxid), 0x1 (n.round), LOOKING (n.state), 2 (n.sid), 0x0 (n.peerEPoch), LOOKING (my state)0 (n.config version)</span><br><span class="line">2019-07-08 11:13:41,726 [myid:3] - INFO  [QuorumPeer[myid=3](plain=/0:0:0:0:0:0:0:0:2183)(secure=disabled):QuorumPeer@1281] - LEADING</span><br></pre></td></tr></table></figure>
<h4 id="新服务器加入"><a href="#新服务器加入" class="headerlink" title="新服务器加入"></a>新服务器加入</h4><p><img src="../images/2019/ZooKeeper-Intro/server-join.png" alt=""></p>
<p>1、当服务器4启动时，初始处于<code>LOOKING</code>状态，<code>epoch</code>为1，<code>zxid</code>为0，向其他服务器发送投票给自己的通知；<br>2、其他服务器收到4发来的投票通知时，回复自己当前的状态以及投票的<code>Leader</code>；<br>3、服务器4收到其他服务器发来的状态和<code>Leader</code>，根据过半规则，服务器3有超过半数服务器的投票，因此服务器3仍然为<code>Leader</code>，服务器4切换<code>FOLLOWING</code>状态。<br>这里说明<code>epoch</code>（<code>zxid</code>）的目的是服务器4启动时，原有的ZK服务器<code>epoch</code>（<code>zxid</code>）很有可能已经<code>&gt;=1</code>，因此服务器4的<code>epoch</code>（<code>zxid</code>）必定小于等于其他服务器的<code>epoch</code>（<code>zxid</code>），因此服务器4不会成为<code>Leader</code>。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># server 4</span></span><br><span class="line">2019-07-08 11:20:26,423 [myid:4] - INFO  [QuorumPeer[myid=4](plain=/0:0:0:0:0:0:0:0:2184)(secure=disabled):QuorumPeer@1193] - LOOKING</span><br><span class="line">2019-07-08 11:20:26,423 [myid:4] - INFO  [QuorumPeer[myid=4](plain=/0:0:0:0:0:0:0:0:2184)(secure=disabled):FastLeaderElection@885] - New election. My id =  4, proposed zxid=0x0</span><br><span class="line">2019-07-08 11:20:26,432 [myid:4] - INFO  [WorkerReceiver[myid=4]:FastLeaderElection@679] - Notification: 2 (message format version), 3 (n.leader), 0x0 (n.zxid), 0x1 (n.round), LOOKING (n.state), 1 (n.sid), 0x0 (n.peerEPoch), LOOKING (my state)0 (n.config version)</span><br><span class="line">2019-07-08 11:20:26,432 [myid:4] - INFO  [WorkerReceiver[myid=4]:FastLeaderElection@679] - Notification: 2 (message format version), 4 (n.leader), 0x0 (n.zxid), 0x1 (n.round), LOOKING (n.state), 4 (n.sid), 0x0 (n.peerEPoch), LOOKING (my state)0 (n.config version)</span><br><span class="line">2019-07-08 11:20:26,432 [myid:4] - INFO  [WorkerReceiver[myid=4]:FastLeaderElection@679] - Notification: 2 (message format version), 3 (n.leader), 0x0 (n.zxid), 0x1 (n.round), FOLLOWING (n.state), 1 (n.sid), 0x1 (n.peerEPoch), LOOKING (my state)0 (n.config version)</span><br><span class="line">2019-07-08 11:20:26,433 [myid:4] - INFO  [WorkerReceiver[myid=4]:FastLeaderElection@679] - Notification: 2 (message format version), 3 (n.leader), 0x0 (n.zxid), 0x1 (n.round), LOOKING (n.state), 2 (n.sid), 0x0 (n.peerEPoch), LOOKING (my state)0 (n.config version)</span><br><span class="line">2019-07-08 11:20:26,433 [myid:4] - INFO  [WorkerReceiver[myid=4]:FastLeaderElection@679] - Notification: 2 (message format version), 3 (n.leader), 0x0 (n.zxid), 0x1 (n.round), LOOKING (n.state), 3 (n.sid), 0x0 (n.peerEPoch), LOOKING (my state)0 (n.config version)</span><br><span class="line">2019-07-08 11:20:26,433 [myid:4] - INFO  [WorkerReceiver[myid=4]:FastLeaderElection@679] - Notification: 2 (message format version), 3 (n.leader), 0x0 (n.zxid), 0x1 (n.round), FOLLOWING (n.state), 2 (n.sid), 0x1 (n.peerEPoch), LOOKING (my state)0 (n.config version)</span><br><span class="line">2019-07-08 11:20:26,434 [myid:4] - INFO  [WorkerReceiver[myid=4]:FastLeaderElection@679] - Notification: 2 (message format version), 3 (n.leader), 0x0 (n.zxid), 0x1 (n.round), LEADING (n.state), 3 (n.sid), 0x1 (n.peerEPoch), LOOKING (my state)0 (n.config version)</span><br><span class="line">2019-07-08 11:20:26,434 [myid:4] - INFO  [QuorumPeer[myid=4](plain=/0:0:0:0:0:0:0:0:2184)(secure=disabled):QuorumPeer@1269] - FOLLOWING</span><br></pre></td></tr></table></figure>
<h4 id="Leader宕机"><a href="#Leader宕机" class="headerlink" title="Leader宕机"></a>Leader宕机</h4><p>当<code>Leader</code>发生宕机时，剩下的服务器仍然按照选举规则选出<code>Leader</code>，需要注意此时各服务器记录的<code>zxid</code>有可能不一致，选举的<code>Leader</code>将是<code>zxid</code>最大的那一台服务器。</p>
<h4 id="一致性保证"><a href="#一致性保证" class="headerlink" title="一致性保证"></a>一致性保证</h4><p><code>ZAB</code>协议保证了在领导选举的过程中，已经被<code>Commit</code>的数据不会丢失，未被<code>Commit</code>的数据对客户端不可见。<br>假设如下示例：服务器3发生宕机，同步的消息列表为<code>T1,C1,T2,C2,T3</code>（T表示客户端发起的操作事务消息，C表示<code>Leader</code>发出的提交消息），其中服务器1收到的消息与服务器3完全同步，服务器2收到的消息为<code>C1,T2,C2</code>，服务器4收到的消息为<code>T1,C1,T2</code>，服务器5收到的消息为<code>T1,C1,C2,T3</code>。需要注意：<br>由于<code>T3</code>没有对应的提交消息，意味着收到<code>T3</code>的服务器不会超过一半，当前只有服务器1和服务器2收到T3，因而<code>T3</code>不会被广播给其他服务器；<br>由于<code>T1</code>和<code>T2</code>都有对应的提交消息，因此整个集群中应当有超过一半的服务器收到过<code>T1</code>和<code>T2</code>。<br><img src="../images/2019/ZooKeeper-Intro/consistency.png" alt=""></p>
<h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><h3 id="集群管理"><a href="#集群管理" class="headerlink" title="集群管理"></a>集群管理</h3><p>在多台服务器组成的集群中，需要监控每台服务器的状态，一旦某台服务器宕机或有新的机器加入集群，集群需要感知到，从而执行相应的处理。通常的做法是有台主机器定时获取其他机器的心跳，或其他机器定时主动汇报自己的状态，这种方式存在一定的延时，并且主机器成为单点，一旦宕机便影响整个集群。<br>使用ZK可以方便的实现集群管理的功能：每个服务器启动时都向ZK提出创建临时节点的请求，并且添加父节点的事件监听器，当该服务器宕机时，它创建的临时节点也被ZK删除，删除时触发事件监听器，其他服务器便能得到通知。<br><img src="../images/2019/ZooKeeper-Intro/cluster-tree.png" alt=""></p>
<h3 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h3><p>多个客户端在同一个节点下添加临时顺序节点（节点名末尾实际上是10位10进制数），每个客户端对应着一个子节点，同时关注自己的前一个节点，如果没有前一个节点（即对应的节点编号是当前最小的），则认为获得了锁。<br>当客户端断开连接时，对应的临时节点自动被移除，关注该节点的下一个节点将收到通知，此时再判断是否存在前一个节点，不存在则认为获得了锁，存在则关注前一个节点，添加事件监听器。<br><img src="../images/2019/ZooKeeper-Intro/distributed-lock.png" alt=""></p>
<h3 id="分布式协调-通知"><a href="#分布式协调-通知" class="headerlink" title="分布式协调/通知"></a>分布式协调/通知</h3><p>利用事件监听器注册和异步通知机制实现对数据变更的实时处理。例如：不同系统都对ZK上同一个节点进行注册，监听节点的变化（包括节点本身内容及子节点），其中一个系统更新了节点，那么另一个系统能够收到通知，并作出相应处理。</p>
<h3 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h3><p>服务器启动时，在指定节点（假设为<code>Servers</code>节点）下注册临时子节点，客户端连接服务器时在<code>Servers</code>节点下根据一定的负载均衡规则计算得出一个服务器节点之后与其进行连接。</p>
<h2 id="ZK部署及使用"><a href="#ZK部署及使用" class="headerlink" title="ZK部署及使用"></a>ZK部署及使用</h2><p>从<code>https://mirrors.tuna.tsinghua.edu.cn/apache/zookeeper/current/</code>可下载ZK的最新版本。<br>ZK的安装和配置比较简单，可以配置成单机模式，也可以配置成集群模式。</p>
<h3 id="单机"><a href="#单机" class="headerlink" title="单机"></a>单机</h3><p>在<code>conf</code>目录下创建<code>zoo.cfg</code>（可拷贝<code>zoo_sample.cfg</code>文件后改名），添加以下配置：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 数据目录</span></span><br><span class="line">dataDir=E:/Work/zookeeper/zookeeper/data/</span><br><span class="line"><span class="comment"># log目录</span></span><br><span class="line">dataLogDir=D:/zookeeper/zookeeper/logs/</span><br><span class="line"><span class="comment"># 客户端连接端口</span></span><br><span class="line">clientPort=2181</span><br></pre></td></tr></table></figure></p>
<h3 id="伪集群"><a href="#伪集群" class="headerlink" title="伪集群"></a>伪集群</h3><p>所谓伪集群，是指在单台机器中启动多个ZK进程，并组成一个集群。<br>以3个ZK服务器为例，拷贝ZK安装包为三份：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">|--zk1  </span><br><span class="line">|--zk2  </span><br><span class="line">|--zk3</span><br></pre></td></tr></table></figure></p>
<p>修改<code>zk1/conf/zoo.cfg</code>配置为：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ZK中的时间单元（毫秒），所有时间以时间单元为基础进行整数倍配置</span></span><br><span class="line"><span class="comment"># The duration of a tick in milliseconds. This is the basic unit of time in ZooKeeper.</span></span><br><span class="line">tickTime=2000</span><br><span class="line"><span class="comment"># Follower启动时从Leader同步所有数据的时间限制（*tickTime）</span></span><br><span class="line"><span class="comment"># The maximum number of ticks that a follower will wait to initially synchronize with a leader.</span></span><br><span class="line">initLimit=10</span><br><span class="line"><span class="comment"># Follower等待Leader发过来消息的最长时间（*tickTime）</span></span><br><span class="line"><span class="comment"># The maximum number of ticks that a follower will wait for a message (including heartbeats) from the leader.</span></span><br><span class="line">syncLimit=5</span><br><span class="line"><span class="comment"># 数据目录</span></span><br><span class="line">dataDir=E:/Work/zookeeper/zk1/data/</span><br><span class="line"><span class="comment"># log目录</span></span><br><span class="line">dataLogDir=D:/zookeeper/zk1/logs/</span><br><span class="line"><span class="comment"># 客户端连接端口</span></span><br><span class="line">clientPort=2181</span><br><span class="line"><span class="comment"># 客户端连接数量限制</span></span><br><span class="line"><span class="comment">#maxClientCnxns=60</span></span><br><span class="line"><span class="comment"># 开启autopurge选项前先阅读：</span></span><br><span class="line"><span class="comment"># http://zookeeper.apache.org/doc/current/zookeeperAdmin.html#sc_maintenance</span></span><br><span class="line"><span class="comment"># 保留在dataDir下的快照数量</span></span><br><span class="line"><span class="comment">#autopurge.snapRetainCount=3</span></span><br><span class="line"><span class="comment"># 自动清理事务日志和快照时间间隔，0标识不开启</span></span><br><span class="line"><span class="comment">#autopurge.purgeInterval=1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 集群配置</span></span><br><span class="line">server.1=localhost:2281:2381</span><br><span class="line">server.2=localhost:2282:2382</span><br><span class="line">server.3=localhost:2283:2383</span><br><span class="line">server.4=localhost:2284:2384</span><br></pre></td></tr></table></figure></p>
<p>之后在<code>zk1/data</code>下新建一个<code>myid</code>文件，文件中写入服务器ID：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1</span><br></pre></td></tr></table></figure></p>
<p>服务器2和服务器3同上，调整<code>clientPort</code>、<code>dataDir</code>和<code>dataLogDir</code>配置以及<code>myid</code>文件中的服务器ID即可。</p>
<h3 id="5-3-集群"><a href="#5-3-集群" class="headerlink" title="5.3 集群"></a>5.3 集群</h3><p>集群配置与伪集群配置类似，只是集群配置中localhost需要修改为真实的服务器IP。<br>由于集群模式下，各个服务器部署在不同的机器上, 因此各个服务器的<code>conf/zoo.cfg</code>文件可以完全相同。</p>
<h3 id="5-4-启动-停止服务器"><a href="#5-4-启动-停止服务器" class="headerlink" title="5.4 启动/停止服务器"></a>5.4 启动/停止服务器</h3><p>bin目录下存放着ZK服务器常用的脚本：</p>
<ul>
<li><code>zkCleanup</code>：清理ZK历史数据，包括日志文件和快照数据文件；</li>
<li><code>zkCli</code>：ZK的一个简易客户端；</li>
<li><code>zkEnv</code>：设置ZK的环境变量；</li>
<li><code>zkServer</code>：ZK服务器的启动、停止、和重启脚本。</li>
</ul>
<p><code>Linux</code>：启动服务器执行<code>./zkServer.sh start</code>，停止服务器执行<code>./zkServer.sh stop</code>，重启服务器执行<code>./zkServer.sh restart</code>；<br><code>Windows</code>：启动服务器执行<code>zkServer.cmd</code>，停止服务器直接关闭控制台窗口或<code>Ctrl+C</code>。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ ./zkServer.sh start</span><br><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: D:\zookeeper\zk5\conf\zoo.cfg</span><br><span class="line">Starting zookeeper ... STARTED</span><br><span class="line">$ ./zkServer.sh stop</span><br><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: D:\zookeeper\zk5\conf\zoo.cfg</span><br><span class="line">Stopping zookeeper ... STOPPED</span><br></pre></td></tr></table></figure></p>
<p>通过<code>./zkServer.sh status</code>可查询服务器状态：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ ./zkServer.sh status</span><br><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: D:\zookeeper\zk1\conf\zoo.cfg</span><br><span class="line">Client port found: 2181. Client address: localhost.</span><br><span class="line">Mode: follower</span><br><span class="line">$ <span class="built_in">cd</span> ../../zk2/bin &amp;&amp; ./zkServer.sh status</span><br><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: D:\zookeeper\zk2\conf\zoo.cfg</span><br><span class="line">Client port found: 2182. Client address: localhost.</span><br><span class="line">Mode: follower</span><br><span class="line">$ <span class="built_in">cd</span> ../../zk3/bin &amp;&amp; ./zkServer.sh status</span><br><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: D:\zookeeper\zk3\conf\zoo.cfg</span><br><span class="line">Client port found: 2183. Client address: localhost.</span><br><span class="line">Mode: leader</span><br></pre></td></tr></table></figure></p>
<h3 id="客户端命令"><a href="#客户端命令" class="headerlink" title="客户端命令"></a>客户端命令</h3><p>服务器开启成功后，通过<code>./zkCli.sh</code>（Windows下执行<code>zkCli.cmd</code>）启动客户端并与服务器连接。<br>默认连接<code>127.0.0.1:2181</code>，可在命令之后加上<code>-server ip:port</code>连接指定服务器。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">WATCHER::</span><br><span class="line"></span><br><span class="line">WatchedEvent state:SyncConnected <span class="built_in">type</span>:None path:null</span><br><span class="line">[zk: localhost:2181(CONNECTED) 0]</span><br></pre></td></tr></table></figure></p>
<p>输入<code>help</code>命令查看客户端支持的命令列表：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">[zk: localhost:2181(CONNECTED) 0] <span class="built_in">help</span></span><br><span class="line">ZooKeeper -server host:port cmd args</span><br><span class="line">        addauth scheme auth</span><br><span class="line">        close</span><br><span class="line">        config [-c] [-w] [-s]</span><br><span class="line">        connect host:port</span><br><span class="line">        create [-s] [-e] [-c] [-t ttl] path [data] [acl]</span><br><span class="line">        delete [-v version] path</span><br><span class="line">        deleteall path</span><br><span class="line">        delquota [-n|-b] path</span><br><span class="line">        get [-s] [-w] path</span><br><span class="line">        getAcl [-s] path</span><br><span class="line">        <span class="built_in">history</span></span><br><span class="line">        listquota path</span><br><span class="line">        ls [-s] [-w] [-R] path</span><br><span class="line">        ls2 path [watch]</span><br><span class="line">        printwatches on|off</span><br><span class="line">        quit</span><br><span class="line">        reconfig [-s] [-v version] [[-file path] | [-members serverID=host:port1:port2;port3[,...]*]] | [-add serverId=host:port1:port2;port3[,...]]* [-remove serverId[,...]*]</span><br><span class="line">        redo cmdno</span><br><span class="line">        removewatches path [-c|-d|-a] [-l]</span><br><span class="line">        rmr path</span><br><span class="line">        <span class="built_in">set</span> [-s] [-v version] path data</span><br><span class="line">        setAcl [-s] [-v version] [-R] path acl</span><br><span class="line">        setquota -n|-b val path</span><br><span class="line">        <span class="built_in">stat</span> [-w] path</span><br><span class="line">        sync path</span><br><span class="line">Command not found: Command not found <span class="built_in">help</span></span><br></pre></td></tr></table></figure></p>
<h2 id="C-API应用"><a href="#C-API应用" class="headerlink" title="C API应用"></a>C API应用</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;WinSock2.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib, <span class="meta-string">"ws2_32.lib"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> USE_STATIC_LIB</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"zookeeper.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib, <span class="meta-string">"zookeeper.lib"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib, <span class="meta-string">"hashtable.lib"</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SAFE_STR(x)     ((x == nullptr) ? <span class="meta-string">"nullptr"</span> : (const char*)x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STATE_FORMAT    <span class="meta-string">"state:\n  czxid=%llu\n  mzxid=%llu\n  ctime=%llu\n  mtime=%llu\n\</span></span></span><br><span class="line"><span class="meta"><span class="meta-string">  version=%u\n  cversion=%u\n  aversion=%u\n  ephemeralOwner=%llu\n  dataLength=%u\n\</span></span></span><br><span class="line"><span class="meta"><span class="meta-string">  numChildren=%u\n  pzxid=%llu\n"</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">zktest_global_watcher</span><span class="params">(<span class="keyword">zhandle_t</span> *zh, <span class="keyword">int</span> type, <span class="keyword">int</span> state, </span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">const</span> <span class="keyword">char</span> *path, <span class="keyword">void</span> *watcherCtx)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"global_watcher_callback: type=%d state=%d path=%s\n"</span>, type, state, SAFE_STR(path));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">zktest_completion</span><span class="params">(<span class="keyword">int</span> rc, <span class="keyword">const</span> <span class="keyword">char</span> *value, <span class="keyword">const</span> <span class="keyword">void</span> *data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"completion_callback: rc=%d value=%s data=%s\n"</span>, rc, SAFE_STR(value), SAFE_STR(data));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">zktest_aexist_callback</span><span class="params">(<span class="keyword">int</span> rc, <span class="keyword">const</span> struct Stat *stat, </span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">const</span> <span class="keyword">void</span> *data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"completion_callback: rc=%d data=%s\n"</span>, rc, SAFE_STR(data));</span><br><span class="line">    <span class="keyword">if</span> (stat != <span class="literal">nullptr</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(STATE_FORMAT, stat-&gt;czxid,stat-&gt;mzxid,stat-&gt;ctime,stat-&gt;mtime,stat-&gt;version,</span><br><span class="line">            stat-&gt;cversion,stat-&gt;aversion,stat-&gt;ephemeralOwner,stat-&gt;dataLength,</span><br><span class="line">            stat-&gt;numChildren,stat-&gt;pzxid);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">zktest_adelete_callback</span><span class="params">(<span class="keyword">int</span> rc, <span class="keyword">const</span> <span class="keyword">void</span> *data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"aexist_callback: rc=%d\n"</span>, rc);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* szKey = <span class="string">"/key1"</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* szContext = <span class="string">"hello animal!"</span>;</span><br><span class="line">    <span class="keyword">int</span> nRet = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    zoo_set_debug_level(ZOO_LOG_LEVEL_DEBUG);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">zhandle_t</span>* pHandle = zookeeper_init(<span class="string">"127.0.0.1:2181"</span>, zktest_global_watcher, <span class="number">30000</span>, </span><br><span class="line">        <span class="literal">nullptr</span>, (<span class="keyword">void</span>*)<span class="string">"hello zookeeper!"</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (pHandle == <span class="literal">nullptr</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"zookeeper_init Create FAIL!"</span>);</span><br><span class="line">        <span class="keyword">goto</span> EXIT;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// create node</span></span><br><span class="line">    nRet = zoo_acreate(pHandle, szKey, szContext, <span class="built_in">strlen</span>(szContext), &amp;ZOO_OPEN_ACL_UNSAFE, </span><br><span class="line">        <span class="number">0</span>, zktest_completion, <span class="string">"completion_callback"</span>);</span><br><span class="line">    <span class="keyword">if</span> (nRet != ZOK)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"zoo_acreate '%s' FAIL! nRet=%d\n"</span>, szKey, nRet);</span><br><span class="line">        <span class="keyword">goto</span> EXIT;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// check if exist</span></span><br><span class="line">    nRet = zoo_aexists(pHandle, szKey, <span class="number">1</span>, zktest_aexist_callback, <span class="string">"aexists"</span>);</span><br><span class="line">    <span class="keyword">if</span> (nRet != ZOK)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"zoo_aget '%s' FAIL! nRet=%d\n"</span>, szKey, nRet);</span><br><span class="line">        <span class="keyword">goto</span> EXIT;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// delete</span></span><br><span class="line">    <span class="comment">/*nRet = zoo_adelete(pHandle, szKey, -1, zktest_adelete_callback, "zoo_adelete");</span></span><br><span class="line"><span class="comment">    if (nRet != ZOK)</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">        std::cout &lt;&lt; "zoo_aget '" &lt;&lt; szKey &lt;&lt; "' FAIL! nRet=" &lt;&lt; nRet &lt;&lt; std::endl;</span></span><br><span class="line"><span class="comment">        goto EXIT;</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// wait 3s</span></span><br><span class="line">    ::Sleep(<span class="number">3000</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// release handle</span></span><br><span class="line">    zookeeper_close(pHandle);</span><br><span class="line">    </span><br><span class="line">EXIT:</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">2019-07-08 22:13:05,058:14408(0x30bc):ZOO_INFO@log_env@1080: Client environment:zookeeper.version=zookeeper C client 3.5.5</span><br><span class="line">2019-07-08 22:13:05,064:14408(0x30bc):ZOO_INFO@log_env@1086: Client environment:host.name=&lt;not implemented&gt;</span><br><span class="line">2019-07-08 22:13:05,068:14408(0x30bc):ZOO_INFO@log_env@1095: Client environment:os.name=&lt;not implemented&gt;</span><br><span class="line">2019-07-08 22:13:05,073:14408(0x30bc):ZOO_INFO@log_env@1096: Client environment:os.arch=&lt;not implemented&gt;</span><br><span class="line">2019-07-08 22:13:05,077:14408(0x30bc):ZOO_INFO@log_env@1097: Client environment:os.version=&lt;not implemented&gt;</span><br><span class="line">2019-07-08 22:13:05,080:14408(0x30bc):ZOO_INFO@log_env@1103: Client environment:user.name=&lt;not implemented&gt;</span><br><span class="line">2019-07-08 22:13:05,085:14408(0x30bc):ZOO_INFO@log_env@1114: Client environment:user.home=&lt;not implemented&gt;</span><br><span class="line">2019-07-08 22:13:05,089:14408(0x30bc):ZOO_INFO@log_env@1121: Client environment:user.dir=E:\Work\Misc\ZKTest\Test</span><br><span class="line">2019-07-08 22:13:05,095:14408(0x30bc):ZOO_INFO@zookeeper_init_internal@1164: Initiating client connection, host=127.0.0.1:2181 sessionTimeout=30000 watcher=0118</span><br><span class="line">5230 sessionId=0 sessionPasswd=&lt;null&gt; context=011B2B9C flags=0</span><br><span class="line">2019-07-08 22:13:05,124:14408(0x30bc):ZOO_DEBUG@start_threads@221: starting threads...</span><br><span class="line">2019-07-08 22:13:05,134:14408(0x3898):ZOO_DEBUG@do_completion@471: started completion thread</span><br><span class="line">2019-07-08 22:13:05,134:14408(0x30bc):ZOO_DEBUG@zoo_acreate@3586: Sending request xid=0x5d234f71 <span class="keyword">for</span> path [/key1] to 0.0.0.0:0</span><br><span class="line">2019-07-08 22:13:05,144:14408(0x30bc):ZOO_DEBUG@zoo_awexists@3696: Sending request xid=0x5d234f72 <span class="keyword">for</span> path [/key1] to 0.0.0.0:0</span><br><span class="line">2019-07-08 22:13:05,134:14408(0x1224):ZOO_DEBUG@do_io@403: started IO thread</span><br><span class="line">2019-07-08 22:13:05,155:14408(0x1224):ZOO_DEBUG@get_next_server_in_reconfig@1310: [OLD] count=0 capacity=0 next=0 hasnext=0</span><br><span class="line">2019-07-08 22:13:05,166:14408(0x1224):ZOO_DEBUG@get_next_server_in_reconfig@1313: [NEW] count=1 capacity=16 next=0 hasnext=1</span><br><span class="line">2019-07-08 22:13:05,171:14408(0x1224):ZOO_DEBUG@get_next_server_in_reconfig@1322: Using next from NEW=127.0.0.1:2181</span><br><span class="line">2019-07-08 22:13:05,176:14408(0x1224):ZOO_DEBUG@zookeeper_connect@2210: [zk] connect()</span><br><span class="line"></span><br><span class="line">2019-07-08 22:13:05,184:14408(0x1224):ZOO_INFO@check_events@2451: initiated connection to server [127.0.0.1:2181]</span><br><span class="line">2019-07-08 22:13:05,211:14408(0x1224):ZOO_INFO@check_events@2503: session establishment complete on server [127.0.0.1:2181], sessionId=0x1000079413a000b, negotiated timeout=30000</span><br><span class="line">2019-07-08 22:13:05,219:14408(0x1224):ZOO_DEBUG@check_events@2509: Calling a watcher <span class="keyword">for</span> a ZOO_SESSION_EVENT and the state=ZOO_CONNECTED_STATE</span><br><span class="line">2019-07-08 22:13:05,225:14408(0x3898):ZOO_DEBUG@process_completions@2789: Calling a watcher <span class="keyword">for</span> node [], <span class="built_in">type</span> = -1 event=ZOO_SESSION_EVENT</span><br><span class="line">global_watcher_callback: <span class="built_in">type</span>=-1 state=3 path=</span><br><span class="line">2019-07-08 22:13:05,272:14408(0x1224):ZOO_DEBUG@zookeeper_process@2945: Queueing asynchronous response</span><br><span class="line">2019-07-08 22:13:05,277:14408(0x1224):ZOO_DEBUG@zookeeper_process@2945: Queueing asynchronous response</span><br><span class="line">2019-07-08 22:13:05,277:14408(0x3898):ZOO_DEBUG@deserialize_response@2710: Calling COMPLETION_STRING <span class="keyword">for</span> xid=0x5d234f71 failed=1, rc=-110</span><br><span class="line">completion_callback: rc=-110 value=nullptr data=completion_callback</span><br><span class="line">2019-07-08 22:13:05,290:14408(0x3898):ZOO_DEBUG@deserialize_response@2674: Calling COMPLETION_STAT <span class="keyword">for</span> xid=0x5d234f72 failed=0 rc=0</span><br><span class="line">completion_callback: rc=0 data=aexists</span><br><span class="line">state:</span><br><span class="line">  czxid=4294967323</span><br><span class="line">  mzxid=4294967323</span><br><span class="line">  ctime=1562594380609</span><br><span class="line">  mtime=1562594380609</span><br><span class="line">  version=0</span><br><span class="line">  cversion=0</span><br><span class="line">  aversion=0</span><br><span class="line">  ephemeralOwner=0</span><br><span class="line">  dataLength=13</span><br><span class="line">  numChildren=0</span><br><span class="line">  pzxid=4294967323</span><br><span class="line">2019-07-08 22:13:08,152:14408(0x1224):ZOO_DEBUG@do_io@458: IO thread terminated</span><br><span class="line">2019-07-08 22:13:08,155:14408(0x3898):ZOO_DEBUG@do_completion@481: completion thread terminated</span><br><span class="line">2019-07-08 22:13:08,160:14408(0x30bc):ZOO_INFO@zookeeper_close@3254: Closing zookeeper sessionId=0x1000079413a000b to [127.0.0.1:2181]</span><br></pre></td></tr></table></figure></p>
<p>通过官方客户端验证结果一致：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[zk: localhost:2181(CONNECTED) 10] get /key1</span><br><span class="line">hello animal!</span><br><span class="line">[zk: localhost:2181(CONNECTED) 11] get -s /key1</span><br><span class="line">hello animal!</span><br><span class="line">cZxid = 0x10000001b</span><br><span class="line">ctime = Mon Jul 08 21:59:40 CST 2019</span><br><span class="line">mZxid = 0x10000001b</span><br><span class="line">mtime = Mon Jul 08 21:59:40 CST 2019</span><br><span class="line">pZxid = 0x10000001b</span><br><span class="line">cversion = 0</span><br><span class="line">dataVersion = 0</span><br><span class="line">aclVersion = 0</span><br><span class="line">ephemeralOwner = 0x0</span><br><span class="line">dataLength = 13</span><br><span class="line">numChildren = 0</span><br></pre></td></tr></table></figure></p>
<h2 id="一些问题"><a href="#一些问题" class="headerlink" title="一些问题"></a>一些问题</h2><h3 id="新的Leader选出时同步方式"><a href="#新的Leader选出时同步方式" class="headerlink" title="新的Leader选出时同步方式"></a>新的Leader选出时同步方式</h3><p><strong><code>SNAP</code>-全量同步</strong><br>条件：<code>peerLastZxid&lt;minCommittedLog</code><br>二者数据差异太大，<code>Follower</code>数据过于陈旧，<code>Leader</code>发送快照<code>SNAP</code>指令给<code>Follower</code>全量同步数据。<br><strong><code>DIFF</code>-增量同步</strong><br>条件：<code>minCommittedLog&lt;=peerLastZxid&lt;=maxCommittedLog</code><br>二者数据差异不大，<code>Follower</code>上有一些<code>Leader</code>上已经提交的提议未同步，此时需要增量提交。<br><strong><code>TRUNC</code>-仅回滚同步</strong><br>条件：<code>peerLastZxid&gt;minCommittedLog</code><br>证明<code>Follower</code>上有些提议并未在<code>Leader</code>上提交，<code>Follower</code>需要回滚到<code>zxid</code>为<code>minCommittedLog</code>对应的事务操作。<br><strong><code>TRUNC+DIFF</code>-回滚+增量同步</strong><br>条件：<code>minCommittedLog&lt;=peerLastZxid&lt;=maxCommittedLog</code>且原<code>Leader</code>已经将事务<code>Tx</code>提交到本地事务日志中，但没有成功发起提议就宕机了；之后集群重新选举出新<code>Leader</code>，新<code>Leader</code>收到了若干新的更新操作并发起了提议，之后原<code>Leader</code>重新加入到集群中。<br>此时原<code>Leader</code>和新<code>Leader</code>都有对方未提交的事务，原<code>Leader</code>加入集群后需要先回滚<code>Tx</code>之后同步新<code>Leader</code>的数据。</p>
<h3 id="丢包问题"><a href="#丢包问题" class="headerlink" title="丢包问题"></a>丢包问题</h3><p><strong>提议消息</strong>：<code>Leader</code>会定时向<code>Follower</code>发送<code>PING</code>消息，如果<code>Leader</code>发送出去的提议消息超过一定时间（<code>tick * syncLimit</code>，默认10秒）没有收到<code>Follower</code>的<code>ACK</code>，会导致<code>PING</code>失败，最终<code>Leader</code>会断开与<code>Follower</code>的连接。因为连接断开，<code>Follower</code>会退出<code>FOLLOWING</code>状态（收包出现异常），重新进入<code>LOOKING</code>状态。<br><strong>提交消息</strong>：此时客户端连接该<code>Follower</code>所看到的数据不是实时的。下一次收到提交消息时，会终止<code>Follower</code>进程，因为收到的提交消息中的<code>zxid</code>与上一次待提交的提议对应的<code>zxid</code>不匹配。</p>
<h3 id="动态扩容问题"><a href="#动态扩容问题" class="headerlink" title="动态扩容问题"></a>动态扩容问题</h3><p>逐个服务器重启：每次操作一台服务器，更新配置后重启，优先操作新的服务器。<br>整体重启：停止所有服务器，更新配置后全部启动。</p>
<h3 id="奇数服务器数量问题"><a href="#奇数服务器数量问题" class="headerlink" title="奇数服务器数量问题"></a>奇数服务器数量问题</h3><p>任意数量台服务器都可以构建为一个ZK集群。但考虑如下情况：</p>
<ul>
<li>服务器数量为偶数（假设为<code>2n</code>），过半为<code>n+1</code>，允许宕掉的服务器数量为<code>n-1</code>  </li>
<li>服务器数量为奇数（假设为<code>2n-1</code>），过半为<code>n</code>，允许宕掉的服务器数量为<code>n-1</code>  </li>
</ul>
<p>配置为奇数数量相比于偶数数量少占用一台服务器，因此奇数数量服务器配置更有优势。  </p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p>[1] <a href="https://www.ibm.com/developerworks/cn/opensource/os-cn-zookeeper/" target="_blank" rel="noopener">分布式服务框架 Zookeeper — 管理分布式环境中的数据</a><br>[2] <a href="https://www.cnblogs.com/leesf456/p/6012777.html" target="_blank" rel="noopener">【分布式】Zookeeper与Paxos</a><br>[3] <a href="http://www.jasongj.com/zookeeper/distributedlock/" target="_blank" rel="noopener">深入浅出Zookeeper（二） 基于Zookeeper的分布式锁与领导选举</a><br>[4] <a href="http://www.jasongj.com/zookeeper/fastleaderelection/" target="_blank" rel="noopener">深入浅出Zookeeper（一） Zookeeper架构及FastLeaderElection机制</a><br>[5] <a href="https://www.cnblogs.com/ASPNET2008/p/6421571.html" target="_blank" rel="noopener">理解zookeeper选举机制</a><br>[6] <a href="https://www.jianshu.com/p/c2ced54736aa" target="_blank" rel="noopener">Zookeeper选举算法原理（摘选）</a><br>[7] <a href="https://www.cnblogs.com/haippy/archive/2013/02/21/2919365.html" target="_blank" rel="noopener">Zookeeper C API 指南一(准备工作)</a><br>[8] <a href="http://sel-fish.net/2017/06/12/zk-data-sync" target="_blank" rel="noopener">ZooKeeper - Data Sync</a>    </p>
]]></content>
      
        <categories>
            
            <category> Framework </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ZooKeeper </tag>
            
            <tag> Framework </tag>
            
            <tag> Cluster </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[解决Win7远程桌面连接发生身份验证错误问题]]></title>
      <url>/2019/Fix-remote-desktop-authentication-error.html</url>
      <content type="html"><![CDATA[<p>报错截图如下：<br><img src="/../images/2019/Fix-remote-desktop-authentication-error/1.png" alt=""><a id="more"></a></p>
<p>打开注册表，在<code>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System</code>下新建<code>CredSSP</code>项，之后在<code>CredSSP</code>项下新建<code>Parameters</code>项，最后在<code>Parameters</code>项下新建DWORD（32-位）值，名称为<code>AllowEncryptionOracle</code>，值为2。如下图：<br><img src="/../images/2019/Fix-remote-desktop-authentication-error/2.png" alt=""></p>
<p>也可以将如下代码保存为reg后缀文件，之后合并。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Windows Registry Editor Version 5.00</span><br><span class="line"></span><br><span class="line">[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System\CredSSP]</span><br><span class="line"></span><br><span class="line">[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System\CredSSP\Parameters]</span><br><span class="line"><span class="string">"AllowEncryptionOracle"</span>=dword:00000002</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> Windows </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Windows </tag>
            
            <tag> mstsc </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Windows编译curl和openssl]]></title>
      <url>/2019/Building-openssl-with-curl-in-Windows.html</url>
      <content type="html"><![CDATA[<p>1、安装ActivePerl（<a href="https://www.activestate.com/products/activeperl/downloads/" target="_blank" rel="noopener">下载地址</a>）</p>
<p>2、安装nasm（<a href="https://www.nasm.us/pub/nasm/releasebuilds/?C=M;O=D" target="_blank" rel="noopener">下载地址</a>）</p>
<p>3、下载openssl的源代码（<a href="https://github.com/openssl/openssl/releases" target="_blank" rel="noopener">下载地址</a>）</p>
<p>4、下载curl的源代码（<a href="https://github.com/curl/curl/releases" target="_blank" rel="noopener">下载地址</a>）<a id="more"></a></p>
<p>5、将以下脚本内容另存为bat文件：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> SOURCE_PATH=D:\projects\openssl-1.1.1b</span><br><span class="line"><span class="built_in">set</span> PREFIX=D:\projects\openssl-x64</span><br><span class="line"><span class="built_in">set</span> BUILD_CONFIG=VC-WIN64A</span><br><span class="line"><span class="built_in">set</span> INSTALL_VCENV=<span class="string">"D:\Program\Microsoft Visual Studio\2017\Enterprise\VC\Auxiliary\Build\vcvars64.bat"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">where</span> /q perl</span><br><span class="line">IF ERRORLEVEL 1 (</span><br><span class="line">    ECHO Perl cannot be found. Please ensure it is installed and placed <span class="keyword">in</span> your PATH.</span><br><span class="line">	PAUSE</span><br><span class="line">    EXIT /B</span><br><span class="line">) </span><br><span class="line"></span><br><span class="line"><span class="built_in">where</span> /q nasm</span><br><span class="line">IF ERRORLEVEL 1 (</span><br><span class="line">    ECHO nasm cannot be found. Please ensure it is installed and placed <span class="keyword">in</span> your PATH.</span><br><span class="line">	PAUSE</span><br><span class="line">    EXIT /B</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">CD /D %SOURCE_PATH%</span><br><span class="line">CALL %INSTALL_VCENV%</span><br><span class="line">perl Configure %BUILD_CONFIG% no-shared --prefix=%PREFIX%</span><br><span class="line">nmake</span><br><span class="line">nmake <span class="built_in">test</span></span><br><span class="line">nmake install</span><br></pre></td></tr></table></figure>
<p>详细可参考openssl源代码目录下<code>INSTALL</code>中的<code>Configuration Options</code></p>
<p>6、按实际情况修改<code>SOURCE_PATH</code>/<code>PREFIX</code>/<code>BUILD_CONFIG</code>/<code>INSTALL_VCENV</code>四个变量的值，其中：<br><code>SOURCE_PATH</code>：openssl的源代码所在目录<br><code>PREFIX</code>：编译openssl生成的文件存放的目录<br><code>BUILD_CONFIG</code>：编译配置，有以下选项可选：<code>VC-WIN64A</code>/<code>debug-VC-WIN64A</code>/<code>debug-VC-WIN32</code>/<code>VC-WIN32</code>；<br><code>INSTALL_VCENV</code>：VS的64位编译环境配置bat文件路径（如果是编译32位，则需改为<code>vcvars32.bat</code>）</p>
<p>7、执行该bat，待编译完成后，在<code>PREFIX</code>指定的目录中可找到生成的文件列表。<br>以<code>VC-WIN64A</code>（64位release）为例，编译完成后在生成文件目录下的lib目录中可找到相应的lib文件（这里是<code>D:\projects\openssl-x64\lib</code>），dll文件则可在bin目录中找到（这里是<code>D:\projects\openssl-x64\bin</code>）</p>
<p>8、根据curl源代码目录下的<code>winbuild/BUILD.WINDOWS.txt</code>文件描述，将openssl生成的文件转移到curl源代码目录上一层下的deps中：<br>somedirectory\<br>    |_curl-src<br>    | |_winbuild<br>    |<br>    |<em>deps<br>      |</em> lib<br>      |<em> include<br>      |</em> bin</p>
<p>9、打开VS的本机工具命令提示（以VS2017为例，x86为<code>x86 Native Tools Command Prompt for VS 2017</code>，x64为<code>x64 Native Tools Command Prompt for VS 2017</code>），之后切换到libcurl源代码目录下的winbuild目录，以<code>D:\projects\curl-7.64.0</code>为例：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CD /D D:\projects\curl-7.64.0\winbuild</span><br></pre></td></tr></table></figure>
<p>10、根据<code>winbuild/BUILD.WINDOWS.txt</code>文件描述，执行nmake命令。以编译64位静态库为例：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmake /f Makefile.vc mode=static VC=15 WITH_SSL=static MACHINE=x64 DEBUG=no</span><br></pre></td></tr></table></figure>
<p>执行完成后，在curl源代码目录下的<code>builds\libcurl-vc15-x64-release-static-ssl-static-ipv6-sspi</code>目录中可以找到生成的文件列表。</p>
<p>11、新建一个控制台项目用于测试，测试代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"curl/curl.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	CURL *pCurl;</span><br><span class="line">	pCurl = curl_easy_init();</span><br><span class="line">	<span class="keyword">if</span> (pCurl == <span class="literal">nullptr</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"curl_easy_init FAIL!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	curl_easy_setopt(pCurl, CURLOPT_SSL_VERIFYPEER, <span class="literal">false</span>);</span><br><span class="line">	curl_easy_setopt(pCurl, CURLOPT_SSL_VERIFYHOST, <span class="literal">true</span>);</span><br><span class="line">	curl_easy_setopt(pCurl, CURLOPT_URL, <span class="string">"https://cn.bing.com"</span>);</span><br><span class="line">	curl_easy_setopt(pCurl, CURLOPT_FOLLOWLOCATION, <span class="number">1L</span>);</span><br><span class="line"></span><br><span class="line">	CURLcode nCode = curl_easy_perform(pCurl);</span><br><span class="line">	<span class="keyword">if</span> (nCode != CURLE_OK)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"curl_easy_perform FAIL! errstr="</span> &lt;&lt; curl_easy_strerror(nCode) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	curl_easy_cleanup(pCurl);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>12、项目配置修改：</p>
<ul>
<li><p>添加curl生成文件目录下的include目录到测试项目的附加包含目录（<code>D:\projects\curl-7.64.0\builds\libcurl-vc15-x64-release-static-ssl-static-ipv6-sspi\include</code>）</p>
</li>
<li><p>添加curl生成文件目录下的lib目录（<code>D:\projects\curl-7.64.0\builds\libcurl-vc15-x64-release-static-ssl-static-ipv6-sspi\lib</code>）和openssl生成文件目录下的lib目录（<code>D:\projects\openssl-x64\lib</code>）到测试项目的附加库目录</p>
</li>
<li>修改附加依赖项，添加以下lib文件：<code>wldap32.lib;libcrypto.lib;libssl.lib;libcurl_a.lib;Normaliz.lib;ws2_32.lib;crypt32.lib;</code></li>
<li>预处理器添加<code>CURL_STATICLIB</code></li>
</ul>
<p>13、编译项目并运行，能打印出网页源代码则说明测试成功。</p>
<p>参考：</p>
<ul>
<li><a href="http://www.p-nand-q.com/programming/windows/building_openssl_with_visual_studio_2013.html" target="_blank" rel="noopener">Building OpenSSL with Visual Studio</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> network </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Windows </tag>
            
            <tag> curl </tag>
            
            <tag> openssl </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[重命名用户手册]]></title>
      <url>/2019/ReanameTool-User-Manual.html</url>
      <content type="html"><![CDATA[<p><strong><a href="../attachments/RenameTool.pdf">新增PDF版本，918KB</a></strong><br><a id="more"></a></p>
<h2 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1 介绍"></a>1 介绍</h2><p>重命名（RenameTool）是一个重命名工具，具有以下功能：</p>
<p>1、提供了多种规则集，每个规则都有可控的参数，后续仍将不断添加</p>
<p>2、可在任何序列中堆叠多个规则, 并按该顺序应用</p>
<p>3、提供重命名结果实时预览</p>
<p>4、允许修改并保持重命名结果</p>
<p>5、可自动处理因重命名而产生的名称冲突</p>
<p>6、可以将规则保存为文件</p>
<p>7、可以根据重命名操作结果执行自动操作（例如，清除所有成功重命名的文件但保留有问题的文件）</p>
<h2 id="2-快速入门"><a href="#2-快速入门" class="headerlink" title="2 快速入门"></a>2 快速入门</h2><p><img src="../images/2019/RenameTool-User-Manual/0.png" alt="图1：界面说明"></p>
<table>
<thead>
<tr>
<th><strong>主要操作</strong></th>
<th><strong>详细内容</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>a</td>
<td>添加文件到区域4，支持以下两种方式：</td>
</tr>
<tr>
<td></td>
<td>1、单独添加选中的文件；</td>
</tr>
<tr>
<td></td>
<td>2、添加选中文件夹中的所有文件。</td>
</tr>
<tr>
<td>b</td>
<td>添加一个或多个规则以创建规则序列（区域3）：</td>
</tr>
<tr>
<td></td>
<td>1、允许编辑或删除现有的规则，以及改变规则的顺序；</td>
</tr>
<tr>
<td></td>
<td>2、点击规则以编辑当前规则。</td>
</tr>
<tr>
<td>c</td>
<td>进行重命名操作，应用区域4中各个文件重命名后的结果：</td>
</tr>
<tr>
<td></td>
<td>1、点击该按钮前，预览区域4中的结果，确保重命名结果无误；</td>
</tr>
<tr>
<td></td>
<td>2、目标文件名不是预期结果时，点击目标文件名可手动修改；</td>
</tr>
<tr>
<td></td>
<td>3、如果文件名有冲突（例如：文件名重复）或很多文件目标文件名不是预期结果时，请调整规则序列以更新目标文件名列表。</td>
</tr>
</tbody>
</table>
<h2 id="3-详细步骤"><a href="#3-详细步骤" class="headerlink" title="3 详细步骤"></a>3 详细步骤</h2><p>同上一节所描述，重命名流程包含三个步骤：</p>
<p>1、添加文件以进行重命名；</p>
<p>2、调整规则序列；</p>
<p>3、确认重命名文件。</p>
<h3 id="3-1-添加文件"><a href="#3-1-添加文件" class="headerlink" title="3.1 添加文件"></a>3.1 添加文件</h3><p>点击文件列表右上方的<img src="../images/2019/RenameTool-User-Manual/add.png" alt="">按钮（图1中的按钮a），在该按钮下方显示添加文件菜单（图2）：</p>
<p><img src="../images/2019/RenameTool-User-Manual/1.png" alt="图2：界面说明"></p>
<h4 id="使用“添加文件”选项添加文件"><a href="#使用“添加文件”选项添加文件" class="headerlink" title="使用“添加文件”选项添加文件"></a>使用“添加文件”选项添加文件</h4><p>1、点击“添加文件”选项，弹出如下窗口（图3）：</p>
<p><img src="../images/2019/RenameTool-User-Manual/2.png" alt="图3：界面说明"></p>
<p>2、打开需添加文件的文件夹，选中需要重命名的文件（支持选中多个，按住Shift即可）；</p>
<p>3、点击“打开”按钮，确认选择项；</p>
<p>4、如果需要，重复1-3步骤以添加更多文件。</p>
<h4 id="使用“从文件夹中导入文件”-选项添加文件"><a href="#使用“从文件夹中导入文件”-选项添加文件" class="headerlink" title="使用“从文件夹中导入文件” 选项添加文件"></a>使用“从文件夹中导入文件” 选项添加文件</h4><p>1、点击“从文件夹中导入文件”选项，弹出如下窗口（图4）：</p>
<p><img src="../images/2019/RenameTool-User-Manual/3.png" alt="图4：界面说明"></p>
<p>2、打开需添加所有文件的文件夹（需要注意：只能选中一个文件夹）；</p>
<p>3、点击“打开”按钮，确认选择项；</p>
<p>4、如果需要，重复1-3步骤以添加更多文件。</p>
<h3 id="3-2-调整规则序列"><a href="#3-2-调整规则序列" class="headerlink" title="3.2 调整规则序列"></a>3.2 调整规则序列</h3><p>接下来说明如何添加规则、编辑规则、删除规则以及更改规则在序列中的顺序。</p>
<h4 id="添加规则"><a href="#添加规则" class="headerlink" title="添加规则"></a>添加规则</h4><p>点击规则列表右上方的<img src="../images/2019/RenameTool-User-Manual/add.png" alt="">按钮（图1中的按钮b），左侧界面切换至规则编辑界面（图5）：</p>
<p><img src="../images/2019/RenameTool-User-Manual/4.png" alt="图5：添加规则界面"></p>
<p>点击上方显示的规则名称以切换当前所选的规则类型，也可以将鼠标移至任意规则名称附近，在左右两侧出现左右切换按钮（图6），点击切换按钮也可进行切换。</p>
<p><img src="../images/2019/RenameTool-User-Manual/5.png" alt="图6：左右切换按钮"></p>
<p>设置规则类型所需的参数，设置完成后点击<img src="../images/2019/RenameTool-User-Manual/ok.png" alt="">按钮，左侧界面将切换回规则列表界面，并在规则列表中新增一条对应规则类型的规则。</p>
<p><img src="../images/2019/RenameTool-User-Manual/6.png" alt="图7：添加规则"></p>
<h4 id="编辑规则"><a href="#编辑规则" class="headerlink" title="编辑规则"></a>编辑规则</h4><p>点击需要编辑的规则条目，规则列表界面切换到规则编辑界面（图5），修改规则类型对应的参数，也可以切换当前规则类型。编辑完成后，点击<img src="../images/2019/RenameTool-User-Manual/ok.png" alt="">按钮即可应用修改。</p>
<p><img src="../images/2019/RenameTool-User-Manual/7.png" alt="图8：编辑规则"></p>
<h4 id="删除规则"><a href="#删除规则" class="headerlink" title="删除规则"></a>删除规则</h4><p>点击规则列表右上方的<img src="../images/2019/RenameTool-User-Manual/selectmode.png" alt="">按钮（图1中区域2从左往右第1个按钮），规则列表切换至选择模式，点击需要删除的规则，左侧<img src="../images/2019/RenameTool-User-Manual/uncheck.png" alt="">选中框变为<img src="../images/2019/RenameTool-User-Manual/checked.png" alt="">选中状态；如果需要取消勾选，再次点击即可。操作完成后，点击右上方的<img src="../images/2019/RenameTool-User-Manual/remove.png" alt="">按钮，即可立即删除已勾选的规则。</p>
<p><img src="../images/2019/RenameTool-User-Manual/8.png" alt="图9：删除规则"></p>
<h3 id="3-3-确认重命名文件"><a href="#3-3-确认重命名文件" class="headerlink" title="3.3 确认重命名文件"></a>3.3 确认重命名文件</h3><p>点击文件列表右上方的<img src="../images/2019/RenameTool-User-Manual/ok.png" alt="">按钮时，将自动进行如下操作：</p>
<p>1、如果状态显示为无错误，尝试将原文件重命名为目标文件名；</p>
<p>2、如果状态显示为其他内容，自动跳过该文件的重命名；</p>
<p>3、重命名成功后，清空目标文件名或删除该条目（根据设置中自动移除重命名成功的文件选项决定）。</p>
<p>请注意，以下情况将导致重命名操作失败：</p>
<p>1、目标文件名与其他文件的目标文件名一致，该情况下相同目标文件名对应的文件都将不能被重命名；</p>
<p>2、文件已不存在；</p>
<p>3、目标文件名无效，例如包含<code>\\/:\*?&quot;\&lt;\&gt;\|</code>等特殊字符。</p>
<h2 id="4-规则说明"><a href="#4-规则说明" class="headerlink" title="4 规则说明"></a>4 规则说明</h2><p>目前重命名包含以下5类规则，它们的描述说明如下：</p>
<table>
<thead>
<tr>
<th><strong>规则类型</strong></th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>删除</td>
<td>删除文件名的一部分，起始位置支持按位置或分隔符方式定位，结束位置支持按位置、分隔符或直到末尾方式定位，另外还支持从右往左方式处理。</td>
</tr>
<tr>
<td>替换</td>
<td>将文件名中指定的字符串替换为目标字符串</td>
</tr>
<tr>
<td>填充</td>
<td>为包含数值且长度不足的文件名填充0，或移除所包含数值中多余的0；为长度不足的文件名填充指定的文本使其达到指定长度，支持左右方向填充</td>
</tr>
<tr>
<td>排序</td>
<td>使用任意分隔符或位置拆分文件名，并按新的顺序组合文件名，拆分的部分支持重复使用</td>
</tr>
<tr>
<td>序列化</td>
<td>按顺序给文件名添加编号</td>
</tr>
</tbody>
</table>
<h3 id="4-1-删除规则"><a href="#4-1-删除规则" class="headerlink" title="4.1 删除规则"></a>4.1 删除规则</h3><p>删除规则参数界面如下：</p>
<p><img src="../images/2019/RenameTool-User-Manual/9.png" alt="图10：添加规则"></p>
<p>各个参数说明如下：</p>
<table>
<thead>
<tr>
<th><strong>参数</strong></th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>起始</td>
<td>从哪个字符位置开始删除。</td>
</tr>
<tr>
<td></td>
<td>可选择以下选项：</td>
</tr>
<tr>
<td></td>
<td>位置：默认从1开始，可在设置中开启索引从0开始；</td>
</tr>
<tr>
<td></td>
<td>分隔符：可以是单个字符，也可以是字符串。</td>
</tr>
<tr>
<td>直到</td>
<td>删除到哪个字符位置结束。</td>
</tr>
<tr>
<td></td>
<td>可选择以下选项：</td>
</tr>
<tr>
<td></td>
<td>计数：删除直到已删除字符数量达到该值，从起始位置开始；</td>
</tr>
<tr>
<td></td>
<td>分隔符：删除直到指定的分隔符；</td>
</tr>
<tr>
<td></td>
<td>直到末尾：删除直到最末尾的字符。</td>
</tr>
<tr>
<td>不要移除分隔符</td>
<td>如果选择此选项，分隔符本身将被保留。</td>
</tr>
<tr>
<td></td>
<td>如果在起始 和直到 部分使用了两个不同的分隔符，则这两个分隔符都将被保留。</td>
</tr>
<tr>
<td>删除当前文件名</td>
<td>删除文件名中的所有字符。该选项勾选后，除了忽略扩展名选项之外，其他选项都将失效。</td>
</tr>
<tr>
<td>忽略扩展名</td>
<td>默认选中该选项，如果未选中，则扩展名部分也将视为文件名的一部分参与到规则中。</td>
</tr>
<tr>
<td>从右到左</td>
<td>如果选中该选项，删除规则将从右往左计算位置。例如：要删除末尾的3个字符，设置起始位置为1，直到计数为3，并勾选该选项。</td>
</tr>
</tbody>
</table>
<h3 id="4-2-替换规则"><a href="#4-2-替换规则" class="headerlink" title="4.2 替换规则"></a>4.2 替换规则</h3><p>替换规则参数界面如下：</p>
<p><img src="../images/2019/RenameTool-User-Manual/10.png" alt="图11：替换规则"></p>
<p>各个参数说明如下：</p>
<table>
<thead>
<tr>
<th><strong>参数</strong></th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>查找</td>
<td>要被替换的源字符串</td>
</tr>
<tr>
<td>替换</td>
<td>将替换源字符串的目标字符串</td>
</tr>
<tr>
<td>替换选项</td>
<td>如果字符串在文件名中出现多次，则需要指定应以什么方式替换，可选择全部，第一个或最后一个。</td>
</tr>
<tr>
<td>区分大小写</td>
<td>匹配源字符串时要求大小写一致。</td>
</tr>
<tr>
<td>全字匹配</td>
<td>匹配源字符串时要求完整匹配。例如：doing与do不完全匹配。</td>
</tr>
<tr>
<td>忽略扩展名</td>
<td>默认选中该选项，如果未选中，则扩展名部分也将视为文件名的一部分参与到规则中。</td>
</tr>
</tbody>
</table>
<h3 id="4-3-填充规则"><a href="#4-3-填充规则" class="headerlink" title="4.3 填充规则"></a>4.3 填充规则</h3><p>填充规则参数界面如下：</p>
<p><img src="../images/2019/RenameTool-User-Manual/11.png" alt="图12：填充规则"></p>
<p>各个参数说明如下：</p>
<table>
<thead>
<tr>
<th><strong>参数</strong></th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>补零填充</td>
<td>可选以下两个选项：</td>
</tr>
<tr>
<td></td>
<td>补零填充长度：当原字符串包含的数值长度小于该值时，自动在数值最左侧补零以达到该长度；</td>
</tr>
<tr>
<td></td>
<td>移除补零填充：当原字符串包含的数值左侧包含多余的零时，自动移除</td>
</tr>
<tr>
<td>文本填充</td>
<td>勾选文本填充长度左侧的勾选框后，文本填充功能开启。</td>
</tr>
<tr>
<td></td>
<td>文本填充长度：控制原字符串长度小于多少时，使用文本填充以达到指定长度；</td>
</tr>
<tr>
<td></td>
<td>填充文本：用于填充的目标文本。</td>
</tr>
<tr>
<td>忽略扩展名</td>
<td>默认选中该选项，如果未选中，则扩展名部分也将视为文件名的一部分参与到规则中。</td>
</tr>
</tbody>
</table>
<p>以文件名112_as.txt为例，选中补零填充长度选项，补零填充长度为5，勾选文本填充长度，文本填充长度为10，填充文本为abcd，位置为右，应用规则后目标文件名为：00112_asab.txt。</p>
<h3 id="4-4-排序规则"><a href="#4-4-排序规则" class="headerlink" title="4.4 排序规则"></a>4.4 排序规则</h3><p>排序规则参数界面如下：</p>
<p><img src="../images/2019/RenameTool-User-Manual/12.png" alt="图13：排序规则"></p>
<p>各个参数说明如下：</p>
<table>
<thead>
<tr>
<th><strong>参数</strong></th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>分隔符使用</td>
<td>指定如何将文件名拆分为多个部分：</td>
</tr>
<tr>
<td></td>
<td>分隔符：可以是单个字符或字符串，拆分的部分不包含该分隔符；</td>
</tr>
<tr>
<td></td>
<td>位置：在指定位置将文件名拆分为两个部分；</td>
</tr>
<tr>
<td></td>
<td>分隔符精确匹配：该项与分隔符选项的唯一区别是，拆分之后仅包含两个部分，且完整来自拆分前的文件名。</td>
</tr>
<tr>
<td>分隔符</td>
<td>指定一个字符或字符串，该分隔符在原字符串中首次出现的位置作为拆分位置。</td>
</tr>
<tr>
<td>目标字符串</td>
<td>重新排列后的字符串，使用{1}，{2}，{3}，…等引用拆分后的字符串，{0}表示原字符串。</td>
</tr>
<tr>
<td>从右到左</td>
<td>如果选中该选项，则从右往左进行拆分。</td>
</tr>
<tr>
<td>忽略扩展名</td>
<td>默认选中该选项，如果未选中，则扩展名部分也将视为文件名的一部分参与到规则中。</td>
</tr>
</tbody>
</table>
<p>以rty7X664K33KAK1.txt文件名为例，分隔符指定K字符，目标字符串为{1}-{2}-{3}-{4}-{0}，只勾选忽略扩展名选项，应用规则后，目标文件名为rty7X664-33-A-1-rty7X664K33KAK1.txt。各个部分字符串如下：</p>
<table>
<thead>
<tr>
<th><strong>rty7X664</strong></th>
<th><strong>K</strong></th>
<th><strong>33</strong></th>
<th><strong>K</strong></th>
<th><strong>A</strong></th>
<th><strong>K</strong></th>
<th><strong>1</strong></th>
<th><strong>.txt</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>{1}</td>
<td></td>
<td>{2}</td>
<td></td>
<td>{3}</td>
<td></td>
<td>{4}</td>
</tr>
</tbody>
</table>
<h3 id="4-5-序列化规则"><a href="#4-5-序列化规则" class="headerlink" title="4.5 序列化规则"></a>4.5 序列化规则</h3><p>序列化规则参数界面如下：</p>
<p><img src="../images/2019/RenameTool-User-Manual/13.png" alt="图14：序列化规则"></p>
<p>各个参数说明如下：</p>
<table>
<thead>
<tr>
<th><strong>参数</strong></th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>起始值</td>
<td>起始编号</td>
</tr>
<tr>
<td>重复数</td>
<td>在索引递增之前重复的次数</td>
</tr>
<tr>
<td>增量</td>
<td>索引增量</td>
</tr>
<tr>
<td>重置选项</td>
<td>重置间隔：索引达到指定值时重置为起始值；</td>
</tr>
<tr>
<td></td>
<td>文件夹改变时重置：文件夹名改变时重置索引；</td>
</tr>
<tr>
<td></td>
<td>文件改变时重置：文件名改变时重置索引</td>
</tr>
<tr>
<td>补零填充长度</td>
<td>如果插入索引后文件名长度小于指定长度，在插入的索引前补零使文件名达到指定长度。需要注意，序列符号使用罗马序号时该选项无效。</td>
</tr>
<tr>
<td>插入位置</td>
<td>前缀：在原始文件名之前插入</td>
</tr>
<tr>
<td></td>
<td>后缀：在原始文件名之后插入</td>
</tr>
<tr>
<td></td>
<td>位置：在指定位置插入</td>
</tr>
<tr>
<td></td>
<td>替换当前名称：插入的编号将替换整个文件名</td>
</tr>
<tr>
<td>序列符号</td>
<td>可选择以下选项：</td>
</tr>
<tr>
<td></td>
<td>十进制数字（0…9）</td>
</tr>
<tr>
<td></td>
<td>英文字母（a…z）</td>
</tr>
<tr>
<td></td>
<td>中文序号（一…九）</td>
</tr>
<tr>
<td></td>
<td>罗马序号（I,II,III,…）</td>
</tr>
<tr>
<td></td>
<td>自定义字符序号</td>
</tr>
<tr>
<td>忽略扩展名</td>
<td>默认选中该选项，如果未选中，则扩展名部分也将视为文件名的一部分参与到规则中。</td>
</tr>
</tbody>
</table>
<p>其中序列符号说明如下：</p>
<table>
<thead>
<tr>
<th><strong>序列符号</strong></th>
<th><strong>描述/示例</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>十进制数字</td>
<td>起始值0，增量1，重复数 1：</td>
</tr>
<tr>
<td></td>
<td>0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,..</td>
</tr>
<tr>
<td>英文字母</td>
<td>起始值1，增量1，重复数 1：</td>
</tr>
<tr>
<td></td>
<td>a, b, c, …, x, y, z, ba, bb, bc, …, bx, by, bz, ca, cb, cc, …, zx, zy, zz, baa, bab, bac, …</td>
</tr>
<tr>
<td></td>
<td>起始值0，增量1，重复数 1，补零填充长度3：</td>
</tr>
<tr>
<td></td>
<td>aaa, aab, aac, …, aax, aay, aaz, aba, abb, abc, …, abx, aby, abz, aca, acb, acc, …, azx, azy, azz, baa, bab, bac, …</td>
</tr>
<tr>
<td>罗马数字</td>
<td>起始值1，增量1，重复数 1：</td>
</tr>
<tr>
<td></td>
<td>I, II, III, IV, V, VI, VII, VIII, IX, X, XI, XII,…</td>
</tr>
<tr>
<td>中文序号</td>
<td>起始值1，增量1，重复数 1：</td>
</tr>
<tr>
<td></td>
<td>一, 二, 三, 四, 五, 六, 七, 八, 九, 一十, 一十一, 一十二, 一十三, …</td>
</tr>
<tr>
<td>自定义字符序号</td>
<td>起始值1，增量1，重复数 1，使用 “abc” 符号：</td>
</tr>
<tr>
<td></td>
<td>B, C, BA, BB, BC, CA, CB, CC, BAA, BAB, BAC, BBA, …</td>
</tr>
<tr>
<td></td>
<td>索引以1开始, 重复 1, 步骤 1, 使用 “01” 符号：</td>
</tr>
<tr>
<td></td>
<td>0, 1, 10, 11, 100, 101, 110, 111, 1000, 1001, 1001, 1001, 1100, …</td>
</tr>
<tr>
<td>自定义数字</td>
<td>索引从0开始, 重复1和步骤 1, 使用 “ABC” 符号：</td>
</tr>
<tr>
<td></td>
<td>A, B, C, BA, BB, BC, CA, CB, CC, BAA, BAB, BAC, BBA, …</td>
</tr>
<tr>
<td></td>
<td>索引以0开始, 重复1和步骤 1, 使用 “01” 符号：</td>
</tr>
<tr>
<td></td>
<td>0, 1, 10, 11, 100, 101, 110, 111, 1000, 1001, 1010, 1011, 1100, …</td>
</tr>
</tbody>
</table>
]]></content>
      
        <categories>
            
            <category> user-manual </category>
            
        </categories>
        
        
        <tags>
            
            <tag> RenameTool </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SVN递归将文件名改为小写]]></title>
      <url>/2019/SVN-change-filename-to-lowercase-recursively-in-Windows.html</url>
      <content type="html"><![CDATA[<p>&emsp;&emsp;由于用到了svn命令，执行之前请自行确认是否已添加svn环境变量。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line">CALL :RenameFile %CD%</span><br><span class="line">GOTO:EOF</span><br><span class="line"></span><br><span class="line">:RenameFile</span><br><span class="line">CD %1</span><br><span class="line"><span class="keyword">for</span> /f %%a <span class="keyword">in</span> (<span class="string">'dir /a-d /b /l'</span>) <span class="keyword">do</span> (</span><br><span class="line">	svn rename %%a %%a</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> /f %%a <span class="keyword">in</span> (<span class="string">'dir /ad /b /l'</span>) <span class="keyword">do</span> (</span><br><span class="line">	CALL :RenameFile %%a</span><br><span class="line">	CD %CD%</span><br><span class="line">	svn rename %%a %%a</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> svn </category>
            
        </categories>
        
        
        <tags>
            
            <tag> svn </tag>
            
            <tag> cmd </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[MySQL Master/Slave同步配置]]></title>
      <url>/2018/Set-up-Master-Slave-Replication-in-MySQL.html</url>
      <content type="html"><![CDATA[<h1 id="安装及配置MySQL"><a href="#安装及配置MySQL" class="headerlink" title="安装及配置MySQL"></a>安装及配置MySQL</h1><h2 id="Ubuntu"><a href="#Ubuntu" class="headerlink" title="Ubuntu"></a>Ubuntu</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install mysql-server mysql-client</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>编辑配置文件：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod 777 /etc/mysql/mysql.conf.d/mysqld.cnf</span><br><span class="line">gedit /etc/mysql/mysql.conf.d/mysqld.cnf</span><br></pre></td></tr></table></figure>
<p>bind-address修改为<code>0.0.0.0</code>：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Instead of skip-networking the default is now to listen only on</span></span><br><span class="line"><span class="comment"># localhost which is more compatible and is not less secure.</span></span><br><span class="line"><span class="built_in">bind</span>-address		= 0.0.0.0</span><br></pre></td></tr></table></figure>
<p><code>server-id</code>配置以及新增配置：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># The following can be used as easy to replay backup logs or for replication.</span></span><br><span class="line"><span class="comment"># note: if you are setting up a replication slave, see README.Debian about</span></span><br><span class="line"><span class="comment">#       other settings you may need to change.</span></span><br><span class="line">server-id			= 2</span><br><span class="line">log_bin				= /var/<span class="built_in">log</span>/mysql/mysql-bin.log</span><br><span class="line">expire_logs_days		= 10</span><br><span class="line">max_binlog_size   		= 100M</span><br><span class="line"><span class="comment">#binlog_do_db			= include_database_name</span></span><br><span class="line">binlog_ignore_db		= mysql</span><br><span class="line">log_bin_index 			= /var/<span class="built_in">log</span>/mysql/mysql-bin.log.index</span><br><span class="line">relay_log 			= /var/<span class="built_in">log</span>/mysql/mysql-relay-bin</span><br><span class="line">relay_log_index 		= /var/<span class="built_in">log</span>/mysql/mysql-relay-bin.index</span><br></pre></td></tr></table></figure>
<p>还原配置文件权限：  </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod 0444 /etc/mysql/mysql.conf.d/mysqld.cnf</span><br></pre></td></tr></table></figure>
<h2 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h2><p>从MySQL官网下载msi安装（<a href="https://dev.mysql.com/downloads/installer/" target="_blank" rel="noopener">下载链接</a>），其中有几个步骤需要注意：<br><code>Type and Networking</code>：勾选<code>Show Advanced and Loggin Options</code>显示扩展选项；<br><code>Logging Options</code>：配置错误日志路径，开启慢查询日志和二进制日志并配置路径；<br><code>Advanced Options</code>：指定唯一的<code>Server ID</code>。  </p>
<h1 id="主从配置"><a href="#主从配置" class="headerlink" title="主从配置"></a>主从配置</h1><p>主（Master）从（Slave）配置如下： </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Master:   </span><br><span class="line">IP: 192.168.0.1  </span><br><span class="line">server-id: 1</span><br><span class="line">MySQL account/password: root, 123456  </span><br><span class="line"></span><br><span class="line">Slave:  </span><br><span class="line">IP: 192.168.0.2  </span><br><span class="line">server-id: 2  </span><br><span class="line">MySQL account/password: root, 123456</span><br></pre></td></tr></table></figure>
<h1 id="设置允许远程连接"><a href="#设置允许远程连接" class="headerlink" title="设置允许远程连接"></a>设置允许远程连接</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; grant all privileges on *.* to root@&apos;%&apos; identified by &apos;123456&apos; with grant option;</span><br><span class="line">mysql&gt; flush privileges;</span><br></pre></td></tr></table></figure>
<p>或：  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; use mysql;</span><br><span class="line">mysql&gt; update user set host = &apos;%&apos; where user = &apos;root&apos;;</span><br></pre></td></tr></table></figure>
<h1 id="给从库授权"><a href="#给从库授权" class="headerlink" title="给从库授权"></a>给从库授权</h1><p>主库服务器执行以下SQL语句：  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; grant replication slave on *.* to root@&apos;192.168.0.2&apos; identified by &apos;123456&apos;;</span><br></pre></td></tr></table></figure>
<h1 id="获取主库状态"><a href="#获取主库状态" class="headerlink" title="获取主库状态"></a>获取主库状态</h1><p>主库服务器执行<code>show master status</code>查看Master状态，结果如下：  </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show master status;</span><br><span class="line">+------------------+----------+--------------+------------------+-------------------+</span><br><span class="line">| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |</span><br><span class="line">+------------------+----------+--------------+------------------+-------------------+</span><br><span class="line">| mysql-bin.000006 |      586 |              |                  |                   |</span><br><span class="line">+------------------+----------+--------------+------------------+-------------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>
<p>记录下<code>File</code>和<code>Position</code>值。  </p>
<h1 id="同步数据"><a href="#同步数据" class="headerlink" title="同步数据"></a>同步数据</h1><p>如果主库没有数据（例如是全新安装），则无需进行该步骤。<br>停止主库服务器上的MySQL服务，从主库服务器导出所有数据，之后导入到从库服务器。  </p>
<h1 id="从库配置"><a href="#从库配置" class="headerlink" title="从库配置"></a>从库配置</h1><p>在从库服务器上执行以下SQL语句：  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; STOP SLAVE;</span><br><span class="line">mysql&gt; CHANGE MASTER TO MASTER_HOST=&apos;192.168.0.1&apos;, MASTER_USER=&apos;root&apos;, MASTER_PASSWORD=&apos;123456&apos;, MASTER_LOG_FILE=&apos;mysql-bin.000006&apos;, MASTER_LOG_POS=586;</span><br><span class="line">mysql&gt; START SLAVE;</span><br></pre></td></tr></table></figure>
<p>之后执行<code>show slave status\G</code>查看slave状态，如果<code>Slave_IO_Running</code>和<code>Slave_SQL_Running</code>都为<code>YES</code>，说明配置正确。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show slave status\G;</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">               Slave_IO_State: Waiting for master to send event</span><br><span class="line">                  Master_Host: 192.168.88.1</span><br><span class="line">                  Master_User: root</span><br><span class="line">                  Master_Port: 3306</span><br><span class="line">                Connect_Retry: 60</span><br><span class="line">              Master_Log_File: mysql-bin.000006</span><br><span class="line">          Read_Master_Log_Pos: 882</span><br><span class="line">               Relay_Log_File: mysql-relay-bin.000008</span><br><span class="line">                Relay_Log_Pos: 616</span><br><span class="line">        Relay_Master_Log_File: mysql-bin.000006</span><br><span class="line">             Slave_IO_Running: Yes</span><br><span class="line">            Slave_SQL_Running: Yes</span><br><span class="line">              Replicate_Do_DB: </span><br><span class="line">          Replicate_Ignore_DB: </span><br><span class="line">           Replicate_Do_Table: </span><br><span class="line">       Replicate_Ignore_Table: </span><br><span class="line">      Replicate_Wild_Do_Table: </span><br><span class="line">  Replicate_Wild_Ignore_Table: </span><br><span class="line">                   Last_Errno: 0</span><br><span class="line">                   Last_Error: </span><br><span class="line">                 Skip_Counter: 0</span><br><span class="line">          Exec_Master_Log_Pos: 882</span><br><span class="line">              Relay_Log_Space: 1141</span><br><span class="line">              Until_Condition: None</span><br><span class="line">               Until_Log_File: </span><br><span class="line">                Until_Log_Pos: 0</span><br><span class="line">           Master_SSL_Allowed: No</span><br><span class="line">           Master_SSL_CA_File: </span><br><span class="line">           Master_SSL_CA_Path: </span><br><span class="line">              Master_SSL_Cert: </span><br><span class="line">            Master_SSL_Cipher: </span><br><span class="line">               Master_SSL_Key: </span><br><span class="line">        Seconds_Behind_Master: 0</span><br><span class="line">Master_SSL_Verify_Server_Cert: No</span><br><span class="line">                Last_IO_Errno: 0</span><br><span class="line">                Last_IO_Error: </span><br><span class="line">               Last_SQL_Errno: 0</span><br><span class="line">               Last_SQL_Error: </span><br><span class="line">  Replicate_Ignore_Server_Ids: </span><br><span class="line">             Master_Server_Id: 1</span><br><span class="line">                  Master_UUID: ccdf9df4-f4a0-11e8-bd9f-74d4356f2db7</span><br><span class="line">             Master_Info_File: /var/lib/mysql/master.info</span><br><span class="line">                    SQL_Delay: 0</span><br><span class="line">          SQL_Remaining_Delay: NULL</span><br><span class="line">      Slave_SQL_Running_State: Slave has read all relay log; waiting for more updates</span><br><span class="line">           Master_Retry_Count: 86400</span><br><span class="line">                  Master_Bind: </span><br><span class="line">      Last_IO_Error_Timestamp: </span><br><span class="line">     Last_SQL_Error_Timestamp: </span><br><span class="line">               Master_SSL_Crl: </span><br><span class="line">           Master_SSL_Crlpath: </span><br><span class="line">           Retrieved_Gtid_Set: </span><br><span class="line">            Executed_Gtid_Set: </span><br><span class="line">                Auto_Position: 0</span><br><span class="line">         Replicate_Rewrite_DB: </span><br><span class="line">                 Channel_Name: </span><br><span class="line">           Master_TLS_Version: </span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">ERROR: </span><br><span class="line">No query specified</span><br></pre></td></tr></table></figure>
<h1 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h1><p>在主库服务器上执行<code>create database test_for_slave;</code>创建一个测试数据库，在从库服务器上执行<code>show databases;</code>验证结果如下：<br>Master:  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show databases;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| sys                |</span><br><span class="line">| test               |</span><br><span class="line">| test_for_slave     |</span><br><span class="line">+--------------------+</span><br><span class="line">6 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>
<p>Slave:  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show databases;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| sys                |</span><br><span class="line">| test_for_slave     |</span><br><span class="line">+--------------------+</span><br><span class="line">5 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>
<h1 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h1><p>从库服务器上执行<code>create database test2;</code>创建一个数据库，创建完成后在主库服务器上执行<code>create database test2;</code>创建<code>test2</code>数据库，之后在从库服务器上执行<code>show slave status;</code>查看从库状态，结果如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show slave status\G;</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">               Slave_IO_State: Waiting for master to send event</span><br><span class="line">                  Master_Host: 192.168.88.1</span><br><span class="line">                  Master_User: root</span><br><span class="line">                  Master_Port: 3306</span><br><span class="line">                Connect_Retry: 60</span><br><span class="line">              Master_Log_File: mysql-bin.000006</span><br><span class="line">          Read_Master_Log_Pos: 1547</span><br><span class="line">               Relay_Log_File: mysql-relay-bin.000008</span><br><span class="line">                Relay_Log_Pos: 1119</span><br><span class="line">        Relay_Master_Log_File: mysql-bin.000006</span><br><span class="line">             Slave_IO_Running: Yes</span><br><span class="line">            Slave_SQL_Running: No</span><br><span class="line">              Replicate_Do_DB: </span><br><span class="line">          Replicate_Ignore_DB: </span><br><span class="line">           Replicate_Do_Table: </span><br><span class="line">       Replicate_Ignore_Table: </span><br><span class="line">      Replicate_Wild_Do_Table: </span><br><span class="line">  Replicate_Wild_Ignore_Table: </span><br><span class="line">                   Last_Errno: 1007</span><br><span class="line">                   Last_Error: Error &apos;Can&apos;t create database &apos;test2&apos;; database exists&apos; on query. Default database: &apos;test2&apos;. Query: &apos;create database test2&apos;</span><br><span class="line">                 Skip_Counter: 0</span><br><span class="line">          Exec_Master_Log_Pos: 1385</span><br><span class="line">              Relay_Log_Space: 1806</span><br><span class="line">              Until_Condition: None</span><br><span class="line">               Until_Log_File: </span><br><span class="line">                Until_Log_Pos: 0</span><br><span class="line">           Master_SSL_Allowed: No</span><br><span class="line">           Master_SSL_CA_File: </span><br><span class="line">           Master_SSL_CA_Path: </span><br><span class="line">              Master_SSL_Cert: </span><br><span class="line">            Master_SSL_Cipher: </span><br><span class="line">               Master_SSL_Key: </span><br><span class="line">        Seconds_Behind_Master: NULL</span><br><span class="line">Master_SSL_Verify_Server_Cert: No</span><br><span class="line">                Last_IO_Errno: 0</span><br><span class="line">                Last_IO_Error: </span><br><span class="line">               Last_SQL_Errno: 1007</span><br><span class="line">               Last_SQL_Error: Error &apos;Can&apos;t create database &apos;test2&apos;; database exists&apos; on query. Default database: &apos;test2&apos;. Query: &apos;create database test2&apos;</span><br><span class="line">  Replicate_Ignore_Server_Ids: </span><br><span class="line">             Master_Server_Id: 1</span><br><span class="line">                  Master_UUID: ccdf9df4-f4a0-11e8-bd9f-74d4356f2db7</span><br><span class="line">             Master_Info_File: /var/lib/mysql/master.info</span><br><span class="line">                    SQL_Delay: 0</span><br><span class="line">          SQL_Remaining_Delay: NULL</span><br><span class="line">      Slave_SQL_Running_State: </span><br><span class="line">           Master_Retry_Count: 86400</span><br><span class="line">                  Master_Bind: </span><br><span class="line">      Last_IO_Error_Timestamp: </span><br><span class="line">     Last_SQL_Error_Timestamp: 181130 23:48:42</span><br><span class="line">               Master_SSL_Crl: </span><br><span class="line">           Master_SSL_Crlpath: </span><br><span class="line">           Retrieved_Gtid_Set: </span><br><span class="line">            Executed_Gtid_Set: </span><br><span class="line">                Auto_Position: 0</span><br><span class="line">         Replicate_Rewrite_DB: </span><br><span class="line">                 Channel_Name: </span><br><span class="line">           Master_TLS_Version: </span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">ERROR: </span><br><span class="line">No query specified</span><br></pre></td></tr></table></figure>
<p>在此之后，主库服务器上执行任何SQL语句都不会同步到从库。要修复该问题，在从库服务器上执行以下SQL语句：  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; stop slave;</span><br><span class="line">mysql&gt; set global sql_slave_skip_counter=1;</span><br><span class="line">mysql&gt; start slave;</span><br></pre></td></tr></table></figure>
<p>其中<code>sql_slave_skip_counter=1</code>表示跳过执行出错的那一条语句，如果要跳过多条语句，修改1为对应值。<br>再次执行<code>show slave status\G;</code>查看从库状态：  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show slave status\G;</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">               Slave_IO_State: Waiting for master to send event</span><br><span class="line">                  Master_Host: 192.168.88.1</span><br><span class="line">                  Master_User: root</span><br><span class="line">                  Master_Port: 3306</span><br><span class="line">                Connect_Retry: 60</span><br><span class="line">              Master_Log_File: mysql-bin.000006</span><br><span class="line">          Read_Master_Log_Pos: 1709</span><br><span class="line">               Relay_Log_File: mysql-relay-bin.000009</span><br><span class="line">                Relay_Log_Pos: 320</span><br><span class="line">        Relay_Master_Log_File: mysql-bin.000006</span><br><span class="line">             Slave_IO_Running: Yes</span><br><span class="line">            Slave_SQL_Running: Yes</span><br><span class="line">              Replicate_Do_DB: </span><br><span class="line">          Replicate_Ignore_DB: </span><br><span class="line">           Replicate_Do_Table: </span><br><span class="line">       Replicate_Ignore_Table: </span><br><span class="line">      Replicate_Wild_Do_Table: </span><br><span class="line">  Replicate_Wild_Ignore_Table: </span><br><span class="line">                   Last_Errno: 0</span><br><span class="line">                   Last_Error: </span><br><span class="line">                 Skip_Counter: 0</span><br><span class="line">          Exec_Master_Log_Pos: 1709</span><br><span class="line">              Relay_Log_Space: 1816</span><br><span class="line">              Until_Condition: None</span><br><span class="line">               Until_Log_File: </span><br><span class="line">                Until_Log_Pos: 0</span><br><span class="line">           Master_SSL_Allowed: No</span><br><span class="line">           Master_SSL_CA_File: </span><br><span class="line">           Master_SSL_CA_Path: </span><br><span class="line">              Master_SSL_Cert: </span><br><span class="line">            Master_SSL_Cipher: </span><br><span class="line">               Master_SSL_Key: </span><br><span class="line">        Seconds_Behind_Master: 0</span><br><span class="line">Master_SSL_Verify_Server_Cert: No</span><br><span class="line">                Last_IO_Errno: 0</span><br><span class="line">                Last_IO_Error: </span><br><span class="line">               Last_SQL_Errno: 0</span><br><span class="line">               Last_SQL_Error: </span><br><span class="line">  Replicate_Ignore_Server_Ids: </span><br><span class="line">             Master_Server_Id: 1</span><br><span class="line">                  Master_UUID: ccdf9df4-f4a0-11e8-bd9f-74d4356f2db7</span><br><span class="line">             Master_Info_File: /var/lib/mysql/master.info</span><br><span class="line">                    SQL_Delay: 0</span><br><span class="line">          SQL_Remaining_Delay: NULL</span><br><span class="line">      Slave_SQL_Running_State: Slave has read all relay log; waiting for more updates</span><br><span class="line">           Master_Retry_Count: 86400</span><br><span class="line">                  Master_Bind: </span><br><span class="line">      Last_IO_Error_Timestamp: </span><br><span class="line">     Last_SQL_Error_Timestamp: </span><br><span class="line">               Master_SSL_Crl: </span><br><span class="line">           Master_SSL_Crlpath: </span><br><span class="line">           Retrieved_Gtid_Set: </span><br><span class="line">            Executed_Gtid_Set: </span><br><span class="line">                Auto_Position: 0</span><br><span class="line">         Replicate_Rewrite_DB: </span><br><span class="line">                 Channel_Name: </span><br><span class="line">           Master_TLS_Version: </span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">ERROR: </span><br><span class="line">No query specified</span><br></pre></td></tr></table></figure>
<p>再次执行<code>show databases;</code>可以看到多出了<code>test3</code>数据库，该数据库是在从库同步出错后在主库创建的：  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show databases;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| sys                |</span><br><span class="line">| test2              |</span><br><span class="line">| test3              |</span><br><span class="line">| test_for_slave     |</span><br><span class="line">+--------------------+</span><br><span class="line">7 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> linux </category>
            
            <category> database </category>
            
        </categories>
        
        
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> master-slave </tag>
            
            <tag> replication </tag>
            
            <tag> linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Windows下安装RabbitMQ]]></title>
      <url>/2018/RabbitMQ-Installation-Guide-on-Windows.html</url>
      <content type="html"><![CDATA[<p>1   安装<code>PHP</code>、<code>Composer</code>、<code>Erlang</code>、<code>RabbitMQ</code><a id="more"></a></p>
<p>2   配置环境变量</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ERLANG_HOME			D:\Program\erl10.0.1</span><br><span class="line">RABBITMQ_SERVER			D:\Program\RabbitMQ Server\rabbitmq_server-3.7.7</span><br><span class="line">PATH				;%ERLANG_HOME%\bin;%RABBITMQ_SERVER%\sbin;</span><br></pre></td></tr></table></figure>
<p>3   先执行以下命令开启<code>RabbitMQ</code>管理后台，执行完毕后访问<code>127.0.0.1:15672</code>，用户名/密码：<code>guest/guest</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmq-plugins.bat <span class="built_in">enable</span> rabbitmq_management</span><br></pre></td></tr></table></figure></p>
<p>4   修改<code>composer</code>镜像地址<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer config -g repo.packagist composer https://packagist.phpcomposer.com</span><br></pre></td></tr></table></figure></p>
<p>5   指定一个项目目录，在目录下新建<code>composer.json</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="string">"require"</span>: &#123; <span class="string">"php-amqplib/php-amqplib"</span>: <span class="string">"2.7.*"</span> &#125; &#125;</span><br></pre></td></tr></table></figure></p>
<p>6   在项目目录下执行<code>composer install</code></p>
<p>7   拷贝<code>.\vendor\php-amqplib\php-amqplib\demo</code>文件夹到项目根目录</p>
<p>8   官方demo测试<br>消费者：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> php-amqplib/demo</span><br><span class="line">$ php amqp_consumer.php</span><br></pre></td></tr></table></figure></p>
<p>发布者：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> php-amqplib/demo</span><br><span class="line">$ php amqp_publisher.php some text to publish</span><br></pre></td></tr></table></figure></p>
<p>9   <code>sender.php/receiver.php</code>测试</p>
]]></content>
      
        <categories>
            
            <category> RabbitMQ </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Windows </tag>
            
            <tag> rabbitmq </tag>
            
            <tag> msg-queue </tag>
            
            <tag> php </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HTTPSendRequest失败返回12029的一个解决方案]]></title>
      <url>/2018/One-way-to-resolve-HTTP-send-request-return-12029.html</url>
      <content type="html"><![CDATA[<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>&emsp;&emsp;Internet选项中按需求勾选TLS对应版本。<a id="more"></a></p>
<h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><p>&emsp;&emsp;使用<code>Postman</code>发送POST请求能正常返回，但通过HttpSendRequest发送POST请求总是失败，<code>GetLastError</code>返回12029。使用<code>Fiddler</code>抓包查看两次请求的内容如下：<br><br><img src="../images/2018/One-way-to-resolve-HTTP-send-request-return-12029/0.png" alt="成功的请求"></p>
<p><img src="../images/2018/One-way-to-resolve-HTTP-send-request-return-12029/1.png" alt="失败的请求"></p>
<p>&emsp;&emsp;对比发现两次请求的<code>Version</code>不一致，也就是TLS版本不对应，勾选<code>使用 TLS 1.2</code>版本之后便正常了。<br><img src="../images/2018/One-way-to-resolve-HTTP-send-request-return-12029/2.png" alt="TLS设置"></p>
]]></content>
      
        <categories>
            
            <category> network </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Windows </tag>
            
            <tag> wininet </tag>
            
            <tag> https </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Ubuntu环境下创建和使用动态库]]></title>
      <url>/2018/Create-and-use-dynamic-library-in-Ubuntu.html</url>
      <content type="html"><![CDATA[<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><h2 id="安装java"><a href="#安装java" class="headerlink" title="安装java"></a>安装<code>java</code></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository ppa:webupd8team/java</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install oracle-java8-installer</span><br><span class="line">sudo apt-get install oracle-java8-set-default</span><br></pre></td></tr></table></figure>
<h2 id="安装eclipse"><a href="#安装eclipse" class="headerlink" title="安装eclipse"></a>安装<code>eclipse</code></h2><p>&emsp;&emsp;从<code>eclipse</code>官网下载<code>Eclipse IDE for C/C++ Developers</code>（<a href="http://ftp.jaist.ac.jp/pub/eclipse/technology/epp/downloads/release/photon/R/eclipse-cpp-photon-R-linux-gtk-x86_64.tar.gz" target="_blank" rel="noopener"><strong>下载链接</strong></a>），解压到自定义目录，要启动<code>eclipse</code>，双击自定义目录下的<code>eclipse</code>可执行文件即可。<br><a id="more"></a></p>
<h1 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h1><p>&emsp;&emsp;通过<code>File</code>-&gt;<code>New C/C++ Project</code>打开项目创建界面，选择<code>C++ Managed Build</code>；<br><img src="../images/2018/Create-and-use-dynamic-library-in-Ubuntu/0.png" alt=""><br>&emsp;&emsp;点击<code>Next</code>，在<code>Project Name</code>中输入项目名称，<code>Project Type</code>中展开<code>Shared Library</code>，选择<code>Emtpy Project</code>，<code>ToolChains</code>选择<code>Linux GCC</code>，点<code>Finish</code>创建项目。<br><img src="../images/2018/Create-and-use-dynamic-library-in-Ubuntu/1.png" alt=""></p>
<h1 id="生成动态库"><a href="#生成动态库" class="headerlink" title="生成动态库"></a>生成动态库</h1><p>&emsp;&emsp;自行编写项目代码并进行编译，获得.so动态库文件。注意，导出的函数声明需要加上<code>extern &quot;C&quot;</code>，详细查看参考源2。</p>
<h1 id="使用动态库"><a href="#使用动态库" class="headerlink" title="使用动态库"></a>使用动态库</h1><h2 id="创建项目-1"><a href="#创建项目-1" class="headerlink" title="创建项目"></a>创建项目</h2><p>&emsp;&emsp;创建另外一个项目，与<code>创建项目</code>步骤唯一不同的是，<code>Project Type</code>中展开<code>Executable</code>，选择<code>Empty Project</code>。<br>&emsp;&emsp;编写动态库加载代码，这里将动态库加载和卸载封装成一个类，如下<code>ModuleLoader.h</code>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;dlfcn.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CModuleLoader</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">LoadModule</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* szModuleName)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		m_pModule = dlopen(szModuleName, RTLD_LAZY);</span><br><span class="line">		<span class="keyword">if</span> (m_pModule == <span class="literal">nullptr</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		m_pInterfaceFunc = (GET_INTERFACE)dlsym(m_pModule, <span class="string">"GetModuleInterface"</span>);</span><br><span class="line">		<span class="keyword">if</span> (m_pInterfaceFunc == <span class="literal">nullptr</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">void</span>* <span class="title">GetInterface</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* szInterfaceName)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (m_pInterfaceFunc == <span class="literal">nullptr</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> m_pInterfaceFunc(szInterfaceName);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">ReleaseModule</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (m_pModule != <span class="literal">nullptr</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			dlclose(m_pModule);</span><br><span class="line">			m_pModule = <span class="literal">nullptr</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">const</span> <span class="keyword">char</span>* <span class="title">GetErrorDesc</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> dlerror();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="keyword">typedef</span> <span class="keyword">void</span>* (*GET_INTERFACE)(<span class="keyword">const</span> <span class="keyword">char</span>* szInterfaceName);</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="keyword">void</span>*				m_pModule;</span><br><span class="line">	GET_INTERFACE		m_pInterfaceFunc;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;<code>Main.cpp</code>参考代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">#include &quot;ModuleLoader.h&quot;</span><br><span class="line">#include &quot;ISocketSystem.h&quot;</span><br><span class="line">using namespace SocketSystem;</span><br><span class="line"></span><br><span class="line">int main(int argc, char* argv[])</span><br><span class="line">&#123;</span><br><span class="line">	CModuleLoader oLoader;</span><br><span class="line">	if (!oLoader.LoadModule(&quot;./libSocketSystem.so&quot;))</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; oLoader.GetErrorDesc() &lt;&lt; endl;</span><br><span class="line">		return 0;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	ISocketSystem* pSocketSystem = (ISocketSystem*)oLoader.GetInterface(&quot;SocketSystem&quot;);</span><br><span class="line">	if (pSocketSystem == nullptr)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; &quot;GetInterface FAIL!&quot; &lt;&lt; endl;</span><br><span class="line">		return 0;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	pSocketSystem-&gt;Create();</span><br><span class="line">	cout &lt;&lt; &quot;OK!&quot; &lt;&lt; endl;</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="解决编译错误"><a href="#解决编译错误" class="headerlink" title="解决编译错误"></a>解决编译错误</h2><p><strong>nullptr was not declared in this scope</strong><br>&emsp;&emsp;<code>Properties</code>-&gt;<code>C/C++ Build</code>-&gt;<code>Settings</code>-&gt;<code>GCC C++ Compiler</code>-&gt;<code>Dialect</code>，修改<code>Language standard</code>选项为<code>IOS C++ 11(-std=c++0x)</code><br><img src="../images/2018/Create-and-use-dynamic-library-in-Ubuntu/2.png" alt=""></p>
<p><strong>undefined reference to ‘dlopen’</strong><br>&emsp;&emsp;<code>Properties</code>-&gt;<code>C/C++ Build</code>-&gt;<code>Settings</code>-&gt;<code>C/C++ Build</code>-&gt;<code>Settins</code>-&gt;<code>GNU C++ Linker</code>-&gt;<code>Libraries</code>，在<code>Libraries(-l)</code>框中添加<code>dl</code>。<br><img src="../images/2018/Create-and-use-dynamic-library-in-Ubuntu/3.png" alt=""></p>
<h1 id="参考源"><a href="#参考源" class="headerlink" title="参考源"></a>参考源</h1><ol>
<li><a href="http://tipsonubuntu.com/2016/07/31/install-oracle-java-8-9-ubuntu-16-04-linux-mint-18/" target="_blank" rel="noopener"><strong>Install Oracle Java 8 / 9 in Ubuntu 16.04, Linux Mint 18</strong></a></li>
<li><a href="https://stackoverflow.com/questions/9837009/getting-undefined-symbol-error-while-dynamic-loading-of-shared-library" target="_blank" rel="noopener"><strong>Getting undefined symbol error while dynamic loading of shared library</strong></a></li>
</ol>
]]></content>
      
        <categories>
            
            <category> linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ubuntu </tag>
            
            <tag> eclipse </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[为cocos2dx添加protobuf-lite支持]]></title>
      <url>/2018/Add-protobuf-lite-for-cocos2dx.html</url>
      <content type="html"><![CDATA[<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><ul>
<li>cocos2dx 3.x以上版本（以3.4版本为例）</li>
<li>protobuf 2.6.1（<a href="https://github.com/google/protobuf/releases/tag/v2.6.1" target="_blank" rel="noopener"><strong>release页</strong></a>）<a id="more"></a></li>
</ul>
<h1 id="提取protobuf-lite源文件"><a href="#提取protobuf-lite源文件" class="headerlink" title="提取protobuf-lite源文件"></a>提取protobuf-lite源文件</h1><p>&emsp;&emsp;protobuf源代码包中包含VS项目文件（<code>protobuf-2.6.1\vsprojects\</code>），可以通过打开<code>protobuf.sln</code>查看<code>libprotobuf-lite</code>依赖的文件，也可以用文本编辑器打开<code>libprotobuf-lite.vcxproj</code>查看，如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ItemGroup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ClInclude</span> <span class="attr">Include</span>=<span class="string">"..\src\google\protobuf\extension_set.h"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ClInclude</span> <span class="attr">Include</span>=<span class="string">"..\src\google\protobuf\generated_message_util.h"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ClInclude</span> <span class="attr">Include</span>=<span class="string">"..\src\google\protobuf\io\coded_stream.h"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ClInclude</span> <span class="attr">Include</span>=<span class="string">"..\src\google\protobuf\io\coded_stream_inl.h"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ClInclude</span> <span class="attr">Include</span>=<span class="string">"..\src\google\protobuf\io\zero_copy_stream.h"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ClInclude</span> <span class="attr">Include</span>=<span class="string">"..\src\google\protobuf\io\zero_copy_stream_impl_lite.h"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ClInclude</span> <span class="attr">Include</span>=<span class="string">"..\src\google\protobuf\message_lite.h"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ClInclude</span> <span class="attr">Include</span>=<span class="string">"..\src\google\protobuf\repeated_field.h"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ClInclude</span> <span class="attr">Include</span>=<span class="string">"..\src\google\protobuf\stubs\atomicops.h"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ClInclude</span> <span class="attr">Include</span>=<span class="string">"..\src\google\protobuf\stubs\atomicops_internals_x86_msvc.h"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ClInclude</span> <span class="attr">Include</span>=<span class="string">"..\src\google\protobuf\stubs\common.h"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ClInclude</span> <span class="attr">Include</span>=<span class="string">"..\src\google\protobuf\stubs\hash.h"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ClInclude</span> <span class="attr">Include</span>=<span class="string">"..\src\google\protobuf\stubs\map-util.h"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ClInclude</span> <span class="attr">Include</span>=<span class="string">"..\src\google\protobuf\stubs\once.h"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ClInclude</span> <span class="attr">Include</span>=<span class="string">"..\src\google\protobuf\stubs\platform_macros.h"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ClInclude</span> <span class="attr">Include</span>=<span class="string">"..\src\google\protobuf\stubs\stl_util.h"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ClInclude</span> <span class="attr">Include</span>=<span class="string">"..\src\google\protobuf\stubs\stringprintf.h"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ClInclude</span> <span class="attr">Include</span>=<span class="string">"..\src\google\protobuf\stubs\template_util.h"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ClInclude</span> <span class="attr">Include</span>=<span class="string">"..\src\google\protobuf\stubs\type_traits.h"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ClInclude</span> <span class="attr">Include</span>=<span class="string">"..\src\google\protobuf\wire_format_lite.h"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ClInclude</span> <span class="attr">Include</span>=<span class="string">"..\src\google\protobuf\wire_format_lite_inl.h"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ClInclude</span> <span class="attr">Include</span>=<span class="string">"config.h"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ItemGroup</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ItemGroup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ClCompile</span> <span class="attr">Include</span>=<span class="string">"..\src\google\protobuf\extension_set.cc"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ClCompile</span> <span class="attr">Include</span>=<span class="string">"..\src\google\protobuf\generated_message_util.cc"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ClCompile</span> <span class="attr">Include</span>=<span class="string">"..\src\google\protobuf\io\coded_stream.cc"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ClCompile</span> <span class="attr">Include</span>=<span class="string">"..\src\google\protobuf\io\zero_copy_stream.cc"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ClCompile</span> <span class="attr">Include</span>=<span class="string">"..\src\google\protobuf\io\zero_copy_stream_impl_lite.cc"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ClCompile</span> <span class="attr">Include</span>=<span class="string">"..\src\google\protobuf\message_lite.cc"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ClCompile</span> <span class="attr">Include</span>=<span class="string">"..\src\google\protobuf\repeated_field.cc"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ClCompile</span> <span class="attr">Include</span>=<span class="string">"..\src\google\protobuf\stubs\atomicops_internals_x86_msvc.cc"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ClCompile</span> <span class="attr">Include</span>=<span class="string">"..\src\google\protobuf\stubs\common.cc"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ClCompile</span> <span class="attr">Include</span>=<span class="string">"..\src\google\protobuf\stubs\once.cc"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ClCompile</span> <span class="attr">Include</span>=<span class="string">"..\src\google\protobuf\stubs\stringprintf.cc"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ClCompile</span> <span class="attr">Include</span>=<span class="string">"..\src\google\protobuf\wire_format_lite.cc"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ItemGroup</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h1 id="跟随项目编译（添加到Classes）"><a href="#跟随项目编译（添加到Classes）" class="headerlink" title="跟随项目编译（添加到Classes）"></a>跟随项目编译（添加到Classes）</h1><p>&emsp;&emsp;将以上列出的文件拷贝到创建好的cocos2dx项目下的Classes目录，另外还需要拷贝<code>vsprojects</code>目录下的<code>config.h</code>到<code>Classes</code>目录，拷贝时注意保留文件夹层次结构。拷贝之后Classes文件夹下的文件层次结构如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">─protobuf-lite  &lt;- 上层文件夹名称可以自定</span><br><span class="line">│  │  config.h  &lt;- protobuf-2.6.1/vsprojects/config.h</span><br><span class="line">│  │</span><br><span class="line">│  └─google</span><br><span class="line">│      └─protobuf</span><br><span class="line">│          │  extension_set.cc</span><br><span class="line">│          │  extension_set.h</span><br><span class="line">│          │  generated_message_util.cc</span><br><span class="line">│          │  generated_message_util.h</span><br><span class="line">│          │  message_lite.cc</span><br><span class="line">│          │  message_lite.h</span><br><span class="line">│          │  repeated_field.cc</span><br><span class="line">│          │  repeated_field.h</span><br><span class="line">│          │  wire_format_lite.cc</span><br><span class="line">│          │  wire_format_lite.h</span><br><span class="line">│          │  wire_format_lite_inl.h</span><br><span class="line">│          │</span><br><span class="line">│          ├─io</span><br><span class="line">│          │      coded_stream.cc</span><br><span class="line">│          │      coded_stream.h</span><br><span class="line">│          │      coded_stream_inl.h</span><br><span class="line">│          │      zero_copy_stream.cc</span><br><span class="line">│          │      zero_copy_stream.h</span><br><span class="line">│          │      zero_copy_stream_impl.h</span><br><span class="line">│          │      zero_copy_stream_impl_lite.cc</span><br><span class="line">│          │      zero_copy_stream_impl_lite.h</span><br><span class="line">│          │</span><br><span class="line">│          └─stubs</span><br><span class="line">│                  atomicops.h</span><br><span class="line">│                  atomicops_internals_arm_gcc.h</span><br><span class="line">│                  atomicops_internals_atomicword_compat.h</span><br><span class="line">│                  atomicops_internals_generic_gcc.h</span><br><span class="line">│                  atomicops_internals_macosx.h</span><br><span class="line">│                  atomicops_internals_x86_gcc.cc</span><br><span class="line">│                  atomicops_internals_x86_gcc.h</span><br><span class="line">│                  atomicops_internals_x86_msvc.cc</span><br><span class="line">│                  atomicops_internals_x86_msvc.h</span><br><span class="line">│                  common.cc</span><br><span class="line">│                  common.h</span><br><span class="line">│                  hash.h</span><br><span class="line">│                  map_util.h</span><br><span class="line">│                  once.cc</span><br><span class="line">│                  once.h</span><br><span class="line">│                  platform_macros.h</span><br><span class="line">│                  stl_util.h</span><br><span class="line">│                  stringprintf.cc</span><br><span class="line">│                  stringprintf.h</span><br><span class="line">│                  template_util.h</span><br><span class="line">│                  type_traits.h</span><br></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;接下来需要对不同平台项目做相应修改。</p>
<h2 id="win32项目"><a href="#win32项目" class="headerlink" title="win32项目"></a>win32项目</h2><p>&emsp;&emsp;用VS打开<code>proj.win32</code>下的sln文件，添加刚刚拷贝的<code>protobuf-lite</code>源文件到项目中（tip：可以直接在资源管理器中将<code>protobuf-lite</code>文件夹拖放到筛选器上，VS会自动将文件夹以及子文件夹下的所有文件添加到筛选器）。之后修改项目属性，添加<code>protobuf-lite</code>文件夹相对路径到附加包含目录，如下图：<br><img src="../images/2018/Add-protobuf-lite-for-cocos2dx/1.png" alt=""><br>&emsp;&emsp;现在可以开始编译了，稍等一会就可以跑起来了。</p>
<h2 id="wp8项目"><a href="#wp8项目" class="headerlink" title="wp8项目"></a>wp8项目</h2><p>&emsp;&emsp;用VS打开<code>proj.wp8</code>下的sln文件，将拷贝的<code>protobuf-lite</code>源文件添加到项目中。之后添加<code>protobuf-lite</code>文件夹相对路径到附加包含目录，添加完成后先尝试编译，会发现有一系列的报错：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">2&gt;  extension_set.cc</span><br><span class="line">2&gt;..\..\Classes\protobuf-lite\google\protobuf\extension_set.cc(312): error C2059: syntax error : <span class="string">')'</span></span><br><span class="line">2&gt;..\..\Classes\protobuf-lite\google\protobuf\extension_set.cc(313): error C2059: syntax error : <span class="string">')'</span></span><br><span class="line">2&gt;..\..\Classes\protobuf-lite\google\protobuf\extension_set.cc(314): error C2059: syntax error : <span class="string">')'</span></span><br><span class="line">2&gt;..\..\Classes\protobuf-lite\google\protobuf\extension_set.cc(315): error C2059: syntax error : <span class="string">')'</span></span><br><span class="line">2&gt;..\..\Classes\protobuf-lite\google\protobuf\extension_set.cc(316): error C2059: syntax error : <span class="string">')'</span></span><br><span class="line">2&gt;..\..\Classes\protobuf-lite\google\protobuf\extension_set.cc(317): error C2059: syntax error : <span class="string">')'</span></span><br><span class="line">2&gt;..\..\Classes\protobuf-lite\google\protobuf\extension_set.cc(318): error C2059: syntax error : <span class="string">')'</span></span><br><span class="line">2&gt;..\..\Classes\protobuf-lite\google\protobuf\extension_set.cc(405): error C2059: syntax error : <span class="string">')'</span></span><br><span class="line">2&gt;..\..\Classes\protobuf-lite\google\protobuf\extension_set.cc(418): error C2059: syntax error : <span class="string">')'</span></span><br><span class="line">2&gt;..\..\Classes\protobuf-lite\google\protobuf\extension_set.cc(427): error C2059: syntax error : <span class="string">')'</span></span><br><span class="line">2&gt;..\..\Classes\protobuf-lite\google\protobuf\extension_set.cc(434): error C2059: syntax error : <span class="string">')'</span></span><br><span class="line">2&gt;..\..\Classes\protobuf-lite\google\protobuf\extension_set.cc(449): error C2059: syntax error : <span class="string">')'</span></span><br><span class="line">2&gt;..\..\Classes\protobuf-lite\google\protobuf\extension_set.cc(465): error C2059: syntax error : <span class="string">')'</span></span><br><span class="line">2&gt;..\..\Classes\protobuf-lite\google\protobuf\extension_set.cc(479): error C2059: syntax error : <span class="string">')'</span></span><br><span class="line">2&gt;..\..\Classes\protobuf-lite\google\protobuf\extension_set.cc(488): error C2059: syntax error : <span class="string">')'</span></span><br><span class="line">2&gt;..\..\Classes\protobuf-lite\google\protobuf\extension_set.cc(495): error C2059: syntax error : <span class="string">')'</span></span><br><span class="line">2&gt;..\..\Classes\protobuf-lite\google\protobuf\extension_set.cc(509): error C2059: syntax error : <span class="string">')'</span></span><br><span class="line">2&gt;..\..\Classes\protobuf-lite\google\protobuf\extension_set.cc(524): error C2059: syntax error : <span class="string">')'</span></span><br><span class="line">2&gt;..\..\Classes\protobuf-lite\google\protobuf\extension_set.cc(551): error C2059: syntax error : <span class="string">')'</span></span><br><span class="line">2&gt;..\..\Classes\protobuf-lite\google\protobuf\extension_set.cc(581): error C2059: syntax error : <span class="string">')'</span></span><br><span class="line">2&gt;..\..\Classes\protobuf-lite\google\protobuf\extension_set.cc(599): error C2059: syntax error : <span class="string">')'</span></span><br><span class="line">2&gt;..\..\Classes\protobuf-lite\google\protobuf\extension_set.cc(620): error C2059: syntax error : <span class="string">')'</span></span><br><span class="line">2&gt;..\..\Classes\protobuf-lite\google\protobuf\extension_set.cc(627): error C2059: syntax error : <span class="string">')'</span></span><br><span class="line">2&gt;..\..\Classes\protobuf-lite\google\protobuf\extension_set.cc(642): error C2059: syntax error : <span class="string">')'</span></span><br></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;报错的原因是<code>OPTIONAL</code>在<code>c:\Program Files (x86)\Windows Phone Kits\8.0\Include\minwin\minwindef.h</code>中已有宏定义，解决这些报错的办法是在<code>OPTIONAL</code>枚举定义前面添加以下代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(WP8) || defined(WINRT)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> OPTIONAL</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> OPTIONAL</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure></p>
<h2 id="android项目"><a href="#android项目" class="headerlink" title="android项目"></a>android项目</h2><p>&emsp;&emsp;修改<code>Classes\protobuf-lite\google</code>目录下的<code>config.h</code>为以下内容（参考自<a href="https://blog.csdn.net/kaitiren/article/details/9047943" target="_blank" rel="noopener">Android NDK下编译google protocol buffer(protobuf)</a>）：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* protobuf config.h for MSVC.  On other platforms, this is generated</span></span><br><span class="line"><span class="comment"> * automatically by autoheader / autoconf / configure. */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(_WIN32)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _SILENCE_STDEXT_HASH_DEPRECATION_WARNINGS</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* the location of &lt;hash_map&gt; */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> HASH_MAP_H <span class="meta-string">&lt;hash_map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* the namespace of hash_map/hash_set */</span></span><br><span class="line"><span class="comment">// Apparently Microsoft decided to move hash_map *back* to the std namespace</span></span><br><span class="line"><span class="comment">// in MSVC 2010:</span></span><br><span class="line"><span class="comment">//   http://blogs.msdn.com/vcblog/archive/2009/05/25/stl-breaking-changes-in-visual-studio-2010-beta-1.aspx</span></span><br><span class="line"><span class="comment">// TODO(kenton):  Use unordered_map instead, which is available in MSVC 2010.</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> _MSC_VER <span class="meta-string">&lt; 1310 || _MSC_VER &gt;= 1600</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> HASH_NAMESPACE std</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> HASH_NAMESPACE stdext</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* the location of &lt;hash_set&gt; */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> HASH_SET_H <span class="meta-string">&lt;hash_set&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* define if the compiler has hash_map */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> HAVE_HASH_MAP 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* define if the compiler has hash_set */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> HAVE_HASH_SET 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* define if you want to use zlib.  See readme.txt for additional</span></span><br><span class="line"><span class="comment"> * requirements. */</span></span><br><span class="line"><span class="comment">// #define HAVE_ZLIB 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="comment">/* the location of &lt;hash_map&gt; */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> HASH_MAP_H <span class="meta-string">&lt;ext/hash_map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* the location of &lt;hash_set&gt; */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> HASH_SET_H <span class="meta-string">&lt;ext/hash_set&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> HASH_NAMESPACE __gnu_cxx</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> HAVE_PTHREAD</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure></p>
<h1 id="跟随libcocos2d编译（添加到external）"><a href="#跟随libcocos2d编译（添加到external）" class="headerlink" title="跟随libcocos2d编译（添加到external）"></a>跟随libcocos2d编译（添加到external）</h1><p>&emsp;&emsp;拷贝<code>protobuf-lite</code>文件夹到<code>Cocos2dxRoot\external</code>目录下（<code>Cocos2dxRoot</code>为Cocos2dx的安装目录，下同），接下来需要根据不同平台项目修改模板，修改之前建议做好备份。</p>
<h2 id="win32"><a href="#win32" class="headerlink" title="win32"></a>win32</h2><p>&emsp;&emsp;使用VS打开<code>Cocos2dxRoot\cocos\2d</code>目录下的<code>libcocos2d.vcxproj</code>文件，展开<code>external</code>筛选器，新建一个筛选器<code>protobuf-lite</code>，并将拷贝的<code>protobuf-lite</code>文件夹拖放到这个筛选器上。之后打开项目属性，在<code>C/C++</code>下的附加包含目录中添加<code>protobuf-lite</code>相对路径（<code>$(EngineRoot)external\protobuf-lite</code>）：<br><img src="../images/2018/Add-protobuf-lite-for-cocos2dx/2.png" alt=""><br>&emsp;&emsp;最后保存修改，注意退出VS时会提示是否保存sln文件，不保存即可。</p>
<h2 id="wp8"><a href="#wp8" class="headerlink" title="wp8"></a>wp8</h2><p>&emsp;&emsp;步骤与<code>win32</code>项目类似，使用VS打开<code>Cocos2dxRoot\cocos\2d</code>目录下的<code>libcocos2d_wp8.vcxproj</code>文件，展开<code>libcocos2d_wp8</code>项目下的<code>external</code>筛选器，新建<code>protobuf-lite</code>筛选器并添加拷贝的文件到该筛选器。之后在属性管理器（可以通过<code>View</code>（视图）-&gt;<code>Other Window</code>（其他窗口）-&gt;<code>Property Manager</code>（属性管理器）打开属性管理器标签页）中展开<code>libcocos2d_wp8</code>项目下的任意一个配置（例如：<code>Debug|ARM</code>），选中<code>cocos2d_wp8</code>，如下图：<br><img src="../images/2018/Add-protobuf-lite-for-cocos2dx/3.png" alt=""><br>&emsp;&emsp;右键<code>cocos2d_wp8</code>打开属性页，在<code>C/C++</code>下的附加包含目录中添加<code>protobuf-lite</code>相对路径（<code>$(EngineRoot)external\protobuf-lite</code>）：<br><img src="../images/2018/Add-protobuf-lite-for-cocos2dx/4.png" alt=""><br>&emsp;&emsp;展开<code>C/C++</code>选项，点击<code>Preprocessor</code>，在<code>Preprocessor Definitions</code>（宏定义）中添加<code>PROTOBUF_USE_DLLS</code>和<code>LIBPROTOBUF_EXPORTS</code>：<br><img src="../images/2018/Add-protobuf-lite-for-cocos2dx/5.png" alt=""><br>&emsp;&emsp;操作完成后保存修改并退出，退出时可能会有保存用户属性表的提示，选择是，另外可能还有保存sln文件的提示，不保存即可。</p>
<h2 id="android"><a href="#android" class="headerlink" title="android"></a>android</h2><p>&emsp;&emsp;参考<code>Cocos2dxRoot\external\flatbuffers</code>下的<code>Android.mk</code>，为<code>protobuf-lite</code>新建一个<code>Android.mk</code>，如下内容：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">LOCAL_PATH := $(call my-dir)</span><br><span class="line"></span><br><span class="line">include $(CLEAR_VARS)</span><br><span class="line"></span><br><span class="line">LOCAL_MODULE := protobuf_static</span><br><span class="line"></span><br><span class="line">LOCAL_MODULE_FILENAME := protobuf-lite</span><br><span class="line"></span><br><span class="line">LOCAL_SRC_FILES := google/protobuf/extension_set.cc \</span><br><span class="line">			google/protobuf/generated_message_util.cc \</span><br><span class="line">			google/protobuf/io/coded_stream.cc \</span><br><span class="line">			google/protobuf/io/zero_copy_stream.cc \</span><br><span class="line">			google/protobuf/io/zero_copy_stream_impl_lite.cc \</span><br><span class="line">			google/protobuf/message_lite.cc \</span><br><span class="line">			google/protobuf/repeated_field.cc \</span><br><span class="line">			google/protobuf/stubs/atomicops_internals_x86_gcc.cc \</span><br><span class="line">			google/protobuf/stubs/atomicops_internals_x86_msvc.cc \</span><br><span class="line">			google/protobuf/stubs/common.cc \</span><br><span class="line">			google/protobuf/stubs/once.cc \</span><br><span class="line">			google/protobuf/stubs/stringprintf.cc \</span><br><span class="line">			google/protobuf/wire_format_lite.cc</span><br><span class="line"></span><br><span class="line">LOCAL_EXPORT_C_INCLUDES := $(LOCAL_PATH)/..</span><br><span class="line"></span><br><span class="line">LOCAL_C_INCLUDES := $(LOCAL_PATH)/..\</span><br><span class="line"></span><br><span class="line">LOCAL_CFLAGS := -DGOOGLE_PROTOBUF_NO_RTTI</span><br><span class="line">                                 </span><br><span class="line">include $(BUILD_STATIC_LIBRARY)</span><br></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;之后修改<code>Cocos2dxRoot\templates</code>下的<code>cocos2dx_files.json</code>，在末尾添加<code>protobuf-lite</code>源文件相对路径，如下内容：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"external/protobuf-lite/config.h"</span>,</span><br><span class="line"><span class="string">"external/protobuf-lite/Android.mk"</span>,</span><br><span class="line"><span class="string">"external/protobuf-lite/google/protobuf/extension_set.h"</span>,</span><br><span class="line"><span class="string">"external/protobuf-lite/google/protobuf/generated_message_util.h"</span>,</span><br><span class="line"><span class="string">"external/protobuf-lite/google/protobuf/io/coded_stream.h"</span>,</span><br><span class="line"><span class="string">"external/protobuf-lite/google/protobuf/io/coded_stream_inl.h"</span>,</span><br><span class="line"><span class="string">"external/protobuf-lite/google/protobuf/io/zero_copy_stream.h"</span>,</span><br><span class="line"><span class="string">"external/protobuf-lite/google/protobuf/io/zero_copy_stream_impl.h"</span>,</span><br><span class="line"><span class="string">"external/protobuf-lite/google/protobuf/io/zero_copy_stream_impl_lite.h"</span>,</span><br><span class="line"><span class="string">"external/protobuf-lite/google/protobuf/message_lite.h"</span>,</span><br><span class="line"><span class="string">"external/protobuf-lite/google/protobuf/repeated_field.h"</span>,</span><br><span class="line"><span class="string">"external/protobuf-lite/google/protobuf/stubs/atomicops.h"</span>,</span><br><span class="line"><span class="string">"external/protobuf-lite/google/protobuf/stubs/atomicops_internals_arm_gcc.h"</span>,</span><br><span class="line"><span class="string">"external/protobuf-lite/google/protobuf/stubs/atomicops_internals_atomicword_compat.h"</span>,</span><br><span class="line"><span class="string">"external/protobuf-lite/google/protobuf/stubs/atomicops_internals_generic_gcc.h"</span>,</span><br><span class="line"><span class="string">"external/protobuf-lite/google/protobuf/stubs/atomicops_internals_macosx.h"</span>,</span><br><span class="line"><span class="string">"external/protobuf-lite/google/protobuf/stubs/atomicops_internals_x86_gcc.h"</span>,</span><br><span class="line"><span class="string">"external/protobuf-lite/google/protobuf/stubs/atomicops_internals_x86_msvc.h"</span>,</span><br><span class="line"><span class="string">"external/protobuf-lite/google/protobuf/stubs/common.h"</span>,</span><br><span class="line"><span class="string">"external/protobuf-lite/google/protobuf/stubs/hash.h"</span>,</span><br><span class="line"><span class="string">"external/protobuf-lite/google/protobuf/stubs/map_util.h"</span>,</span><br><span class="line"><span class="string">"external/protobuf-lite/google/protobuf/stubs/once.h"</span>,</span><br><span class="line"><span class="string">"external/protobuf-lite/google/protobuf/stubs/platform_macros.h"</span>,</span><br><span class="line"><span class="string">"external/protobuf-lite/google/protobuf/stubs/stl_util.h"</span>,</span><br><span class="line"><span class="string">"external/protobuf-lite/google/protobuf/stubs/stringprintf.h"</span>,</span><br><span class="line"><span class="string">"external/protobuf-lite/google/protobuf/stubs/template_util.h"</span>,</span><br><span class="line"><span class="string">"external/protobuf-lite/google/protobuf/stubs/type_traits.h"</span>,</span><br><span class="line"><span class="string">"external/protobuf-lite/google/protobuf/wire_format_lite.h"</span>,</span><br><span class="line"><span class="string">"external/protobuf-lite/google/protobuf/wire_format_lite_inl.h"</span>,</span><br><span class="line"><span class="string">"external/protobuf-lite/google/protobuf/extension_set.cc"</span>,</span><br><span class="line"><span class="string">"external/protobuf-lite/google/protobuf/generated_message_util.cc"</span>,</span><br><span class="line"><span class="string">"external/protobuf-lite/google/protobuf/io/coded_stream.cc"</span>,</span><br><span class="line"><span class="string">"external/protobuf-lite/google/protobuf/io/zero_copy_stream.cc"</span>,</span><br><span class="line"><span class="string">"external/protobuf-lite/google/protobuf/io/zero_copy_stream_impl_lite.cc"</span>,</span><br><span class="line"><span class="string">"external/protobuf-lite/google/protobuf/message_lite.cc"</span>,</span><br><span class="line"><span class="string">"external/protobuf-lite/google/protobuf/repeated_field.cc"</span>,</span><br><span class="line"><span class="string">"external/protobuf-lite/google/protobuf/stubs/atomicops_internals_x86_gcc.cc"</span>,</span><br><span class="line"><span class="string">"external/protobuf-lite/google/protobuf/stubs/atomicops_internals_x86_msvc.cc"</span>,</span><br><span class="line"><span class="string">"external/protobuf-lite/google/protobuf/stubs/common.cc"</span>,</span><br><span class="line"><span class="string">"external/protobuf-lite/google/protobuf/stubs/once.cc"</span>,</span><br><span class="line"><span class="string">"external/protobuf-lite/google/protobuf/stubs/stringprintf.cc"</span>,</span><br><span class="line"><span class="string">"external/protobuf-lite/google/protobuf/wire_format_lite.cc"</span>,</span><br></pre></td></tr></table></figure></p>
<h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p>&emsp;&emsp;如果项目要用到<code>protobuf</code>，还需做如下修改：</p>
<ul>
<li>win32主项目<code>YourProject</code>（即创建的项目名称）添加<code>protobuf-lite</code>目录（<code>$(EngineRoot)external\protobuf-lite</code>）到附加包含目录</li>
<li>wp8项目<code>YourProjectComponent</code>添加<code>protobuf-lite</code>目录（<code>$(EngineRoot)external\protobuf-lite</code>）到附加包含目录</li>
<li>android项目修改<code>Android.mk</code>，修改后的内容参考：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">LOCAL_PATH := $(call my-dir)</span><br><span class="line"></span><br><span class="line">include $(CLEAR_VARS)</span><br><span class="line"></span><br><span class="line">$(call import-add-path,$(LOCAL_PATH)/../../cocos2d)</span><br><span class="line">$(call import-add-path,$(LOCAL_PATH)/../../cocos2d/external)</span><br><span class="line">$(call import-add-path,$(LOCAL_PATH)/../../cocos2d/cocos)</span><br><span class="line"></span><br><span class="line">LOCAL_MODULE := cocos2dcpp_shared</span><br><span class="line"></span><br><span class="line">LOCAL_MODULE_FILENAME := libcocos2dcpp</span><br><span class="line"></span><br><span class="line">LOCAL_SRC_FILES := hellocpp/main.cpp \</span><br><span class="line">                   ../../Classes/AppDelegate.cpp \</span><br><span class="line">                   ../../Classes/HelloWorldScene.cpp \</span><br><span class="line">                   ../../Classes/test.pb.cc</span><br><span class="line"></span><br><span class="line">LOCAL_C_INCLUDES := $(LOCAL_PATH)/../../Classes  \</span><br><span class="line">                    $(LOCAL_PATH)/../../cocos2d/external/protobuf-lite</span><br><span class="line"></span><br><span class="line"><span class="comment"># _COCOS_HEADER_ANDROID_BEGIN</span></span><br><span class="line"><span class="comment"># _COCOS_HEADER_ANDROID_END</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">LOCAL_STATIC_LIBRARIES := cocos2dx_static</span><br><span class="line">LOCAL_STATIC_LIBRARIES += protobuf_static</span><br><span class="line"></span><br><span class="line"><span class="comment"># _COCOS_LIB_ANDROID_BEGIN</span></span><br><span class="line"><span class="comment"># _COCOS_LIB_ANDROID_END</span></span><br><span class="line"></span><br><span class="line">include $(BUILD_SHARED_LIBRARY)</span><br><span class="line">$(call import-module,.)</span><br><span class="line">$(call import-module,protobuf-lite)</span><br><span class="line"></span><br><span class="line"><span class="comment"># _COCOS_LIB_IMPORT_ANDROID_BEGIN</span></span><br><span class="line"><span class="comment"># _COCOS_LIB_IMPORT_ANDROID_END</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> cocos2dx </category>
            
        </categories>
        
        
        <tags>
            
            <tag> cocos2dx </tag>
            
            <tag> protobuf </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用Windbg简单分析托管程序dump]]></title>
      <url>/2018/Analyze-CLR-application-dump-with-windbg.html</url>
      <content type="html"><![CDATA[<p>&emsp; &emsp;分析dump之前，需要先从微软符号服务器下载分析所需的pdb。打开Windbg，选择<code>File-&gt;Symbol File Path</code>，在弹出的符号路径设置窗口中输入以下内容并点击<code>OK</code>，也可以使用<code>.sympath+</code>命令（需要先打开dump）：<a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SRV*F:\SymbolCache*http://symbols.mozilla.org/firefox;SRV*F:\SymbolCache*http://msdl.microsoft.com/download/symbols;</span><br></pre></td></tr></table></figure></p>
<p>&emsp; &emsp;其中，<code>F:\SymbolCache</code>替换为要存放pdb的路径，这里也可以预先在后面加上项目的pdb所在路径。</p>
<p><div align="center"><img src="../images/2018/Analyze-CLR-application-dump-with-windbg/1.png" alt=""></div><br>&emsp; &emsp;通过<code>File-&gt;Open Crash Dump</code>打开dump文件，添加项目的符号路径（<code>.sympath+</code>命令或<code>File-&gt; Symbol File Path</code>，如果已经预先添加过了则忽略），之后输入<code>.reload /f</code>强制重新加载符号，如果之前没有下载过符号，则需要等待比较长的时间。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">0:004&gt; .reload /f</span><br><span class="line">.*** WARNING: Unable to verify checksum for AppFrame.exe</span><br><span class="line">.............................*** WARNING: Unable to verify checksum for DLog.dll</span><br><span class="line">.*** ERROR: Symbol file could not be found.  Defaulted to export symbols for SocketSystem2012.dll - </span><br><span class="line">...*** WARNING: Unable to verify checksum for SceneServer.dll</span><br><span class="line">..........*** WARNING: Unable to verify checksum for Base_d.dll</span><br><span class="line">..................*** WARNING: Unable to verify checksum for ZoneServerLogic.DLL</span><br><span class="line">..</span><br><span class="line">.......*** WARNING: Unable to verify checksum for CenterServer_d.dll</span><br><span class="line">*** ERROR: Symbol file could not be found.  Defaulted to export symbols for CenterServer_d.dll - </span><br><span class="line">.*** WARNING: Unable to verify checksum for GatewayServer_d.dll</span><br><span class="line">*** ERROR: Symbol file could not be found.  Defaulted to export symbols for GatewayServer_d.dll - </span><br><span class="line">.*** ERROR: Symbol file could not be found.  Defaulted to export symbols for basetoolsA.dll - </span><br><span class="line">.*** ERROR: Symbol file could not be found.  Defaulted to export symbols for DataCenter.dll - </span><br><span class="line">.*** WARNING: Unable to verify checksum for EnterManager.DLL</span><br><span class="line">.*** WARNING: Unable to verify checksum for RoomServer.DLL</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Press ctrl-c (cdb, kd, ntsd) or ctrl-break (windbg) to abort symbol loads that take too long.</span><br><span class="line">Run !sym noisy before .reload to track down problems loading symbols.</span><br><span class="line"></span><br><span class="line">.*** WARNING: Unable to verify checksum for BattleModuleWrapper.DLL</span><br><span class="line">.....*** WARNING: Unable to verify checksum for mscorlib.ni.dll</span><br><span class="line">...*** WARNING: Unable to verify checksum for System.ni.dll</span><br><span class="line">.*** WARNING: Unable to verify checksum for System.Xml.ni.dll</span><br><span class="line">..*** WARNING: Unable to verify checksum for System.Core.ni.dll</span><br><span class="line">....</span><br><span class="line">Loading unloaded module list</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p>
<p>&emsp; &emsp;当出现<code>Loading unloaded module list</code>时，输入<code>.chain</code>命令查看当前已加载的扩展：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">0:004&gt; .chain</span><br><span class="line">Extension DLL search Path:</span><br><span class="line">    H:\Program\Debugging Tools for Windows (x86)\WINXP;H:\Program\Debugging Tools for Windows (x86)\winext;H:\Program\Debugging Tools for Windows (x86)\winext\arcade;H:\Program\Debugging Tools for Windows (x86)\pri;H:\Program\Debugging Tools for Windows (x86);H:\Program\Debugging Tools for Windows (x86)\winext\arcade;D:\Program\Perl\site\bin;D:\Program\Perl\bin;C:\Program Files (x86)\NVIDIA Corporation\PhysX\Common;C:\ProgramData\Oracle\Java\javapath;C:\Program Files (x86)\Intel\iCLS Client\;C:\Program Files\Intel\iCLS Client\;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files\Intel\Intel(R) Management Engine Components\DAL;C:\Program Files\Intel\Intel(R) Management Engine Components\IPT;C:\Program Files (x86)\Intel\Intel(R) Management Engine Components\DAL;C:\Program Files (x86)\Intel\Intel(R) Management Engine Components\IPT;E:\Software\Program\Python27\;E:\Software\Program\Lua\5.1;E:\Software\Program\Lua\5.1\clibs;C:\strawberry\c\bin;C:\strawberry\perl\bin;H:\Program\Java\jdk1.8.0_65\bin;H:\Program\Java\jdk1.8.0_65\jre\bin;E:\Software\Program\Git\cmd;E:\Software\Program\Subversion\bin;E:\Software\Program\Subversion\bin;E:\Software\Program\MySQL\MySQL Server 5.5\bin;C:\Program Files (x86)\AMD\ATI.ACE\Core-Static;D:\Program\php;D:\Program\php\ext;C:\Program Files\TortoiseSVN\bin;E:\Software\Program\CMake\bin;C:\Program Files (x86)\Windows Kits\8.1\Windows Performance Toolkit\;C:\Program Files (x86)\Microsoft SDKs\TypeScript\1.0\;C:\Program Files (x86)\GtkSharp\2.12\bin;D:\Program\Redis\;C:\Program Files (x86)\Common Files\Adobe\AGL;D:\Program\NASM;C:\Program Files\Microsoft SQL Server\130\Tools\Binn\;E:\Software\Program\cocos2d-x-3.2\tools\cocos2d-console\bin;C:\Program Files (x86)\Debugging Tools for Windows;D:\Program\Microsoft VS Code\bin</span><br><span class="line">Extension DLL chain:</span><br><span class="line">    C:\Windows\Microsoft.NET\Framework\v4.0.30319\sos: image 4.6.1055.0, API 1.0.0, built Fri Nov 06 10:20:58 2015</span><br><span class="line">        [path: C:\Windows\Microsoft.NET\Framework\v4.0.30319\sos.dll]</span><br><span class="line">    dbghelp: image 6.12.0002.633, API 6.1.6, built Tue Feb 02 04:08:26 2010</span><br><span class="line">        [path: H:\Program\Debugging Tools for Windows (x86)\dbghelp.dll]</span><br><span class="line">    ext: image 6.12.0002.633, API 1.0.0, built Tue Feb 02 04:08:31 2010</span><br><span class="line">        [path: H:\Program\Debugging Tools for Windows (x86)\winext\ext.dll]</span><br><span class="line">    exts: image 6.12.0002.633, API 1.0.0, built Tue Feb 02 04:08:24 2010</span><br><span class="line">        [path: H:\Program\Debugging Tools for Windows (x86)\WINXP\exts.dll]</span><br><span class="line">    uext: image 6.12.0002.633, API 1.0.0, built Tue Feb 02 04:08:23 2010</span><br><span class="line">        [path: H:\Program\Debugging Tools for Windows (x86)\winext\uext.dll]</span><br><span class="line">    ntsdexts: image 6.1.7650.0, API 1.0.0, built Tue Feb 02 04:08:08 2010</span><br><span class="line">        [path: H:\Program\Debugging Tools for Windows (x86)\WINXP\ntsdexts.dll]</span><br></pre></td></tr></table></figure></p>
<p>&emsp; &emsp;可以看到这里已经加载了<code>sos.dll</code>，如果遇到没有<code>sos.dll</code>的情况，可以输入<code>.load C:\Windows\Microsoft.NET\Framework64\v4.0.30319\sos.dll</code>加载dll。加载之前请先确认SOS 调试扩展 (sos.dll) 的版本与 CLR 和 DAC 的版本匹配: v4.0.30319，以及三个组件都是64位（这一句来自微软官方文档，我也不太明白是啥意思）。另外也可以输入<code>.loadby sos clr</code>（CLR版本4.0及以上，1.0或2.0版本输入<code>.loadby sos mscorwks</code>）加载<code>sos.dll</code>。<br>&emsp; &emsp;接下来，输入<code>!clrstack</code>即可看到托管堆栈信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">0:004&gt; !clrstack</span><br><span class="line">OS Thread Id: 0x1430 (4)</span><br><span class="line">Child SP       IP Call Site</span><br><span class="line">03f67be8 77020c52 [InlinedCallFrame: 03f67be8] </span><br><span class="line">03f67b54 037358c4 &lt;Module&gt;.CBattleModuleWrapper.Create(CBattleModuleWrapper*) [f:\xxx\server\battle\battlemodulewrapper\battlemodulewrapper.cpp @ 46]</span><br><span class="line">03f67b78 037351b7 DomainBoundILStubClass.IL_STUB_ReversePInvoke(Int32)</span><br><span class="line">03f67be8 03b3e29a [InlinedCallFrame: 03f67be8] </span><br><span class="line">03f67be4 03735125 DomainBoundILStubClass.IL_STUB_PInvoke(IntPtr)</span><br><span class="line">03f67c34 037330a8 &lt;Module&gt;.CreateBattleModuleWrapper() [f:\xxx\server\battle\battlemodulewrapper\battlemodulewrapper.cpp @ 192]</span><br></pre></td></tr></table></figure></p>
<p>&emsp; &emsp;输入<code>!clrstack -a</code>还可以看到调用堆栈传入参数信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">0:004&gt; !clrstack -a</span><br><span class="line">OS Thread Id: 0x1430 (4)</span><br><span class="line">Child SP       IP Call Site</span><br><span class="line">03f67be8 77020c52 [InlinedCallFrame: 03f67be8] Unknown</span><br><span class="line">03f67b54 037358c4 &lt;Module&gt;.CBattleModuleWrapper.Create(CBattleModuleWrapper*) [f:\xxx\server\battle\battlemodulewrapper\battlemodulewrapper.cpp @ 46]</span><br><span class="line">    PARAMETERS:</span><br><span class="line">        軰ˉˏd (0x03f67b6c) = 0x05812178</span><br><span class="line">    LOCALS:</span><br><span class="line">        0x03f67b64 = 0x074e2fd0</span><br><span class="line">        0x03f67b60 = 0x0749229c</span><br><span class="line">        0x03f67b68 = 0x00000000</span><br><span class="line">        0x03f67b5c = 0x00000000</span><br><span class="line"></span><br><span class="line">03f67b78 037351b7 DomainBoundILStubClass.IL_STUB_ReversePInvoke(Int32)</span><br><span class="line">    PARAMETERS:</span><br><span class="line">        &lt;no data&gt;</span><br><span class="line"></span><br><span class="line">03f67be8 03b3e29a [InlinedCallFrame: 03f67be8] </span><br><span class="line">03f67be4 03735125 DomainBoundILStubClass.IL_STUB_PInvoke(IntPtr)</span><br><span class="line">    PARAMETERS:</span><br><span class="line">        &lt;no data&gt;</span><br><span class="line"></span><br><span class="line">03f67c34 037330a8 &lt;Module&gt;.CreateBattleModuleWrapper() [f:\xxx\server\battle\battlemodulewrapper\battlemodulewrapper.cpp @ 192]</span><br><span class="line">    LOCALS:</span><br><span class="line">        0x03f67c58 = 0x05812178</span><br><span class="line">        0x03f67c54 = 0x00000000</span><br><span class="line">        0x03f67c50 = 0x05812178</span><br><span class="line">        0x03f67c4c = 0x05812178</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> windbg </category>
            
        </categories>
        
        
        <tags>
            
            <tag> windbg </tag>
            
            <tag> crash </tag>
            
            <tag> dump </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用Github和hexo搭建个人博客（多图）]]></title>
      <url>/2018/Building-personal-blog-with-github-and-hexo.html</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>如果希望阅读简洁的版本，请前往hexo官方查阅文档，戳<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener"><strong>这里</strong></a><a id="more"></a></p>
<h1 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h1><hr>
<p>&emsp;&emsp;下载地址：<a href="https://github.com/git-for-windows/git/releases/download/v2.16.3.windows.1/Git-2.16.3-64-bit.exe" target="_blank" rel="noopener">Git (2.16.3, x64)</a><br>&emsp;&emsp;下载完成后，打开exe进行安装。第一步是阅读GNU普通公共许可证，直接点击Next进行下一步：</p>
<div align="center"><img src="../images/2018/Build-personal-blog-with-github-and-hexo/git_0.png" alt=""></div>

<p>&emsp;&emsp;第二步，选择安装目录，没什么说的：</p>
<div align="center"><img src="../images/2018/Build-personal-blog-with-github-and-hexo/git_1.png" alt=""></div>

<p>&emsp;&emsp;第三步，选择组件，根据个人需要勾选，也可以都保持默认直接点Next：</p>
<div align="center"><img src="../images/2018/Build-personal-blog-with-github-and-hexo/git_2.png" alt=""></div>

<p>&emsp;&emsp;其中：<br>&emsp;&emsp;<strong>Additional icons(On the Desktop)</strong>：在桌面创建快捷方式，其实有右键菜单就够了；<br>&emsp;&emsp;<strong>Windows Explorer intergration</strong>：即右键菜单集成，由于不常用GUI，所以这里不选Git GUI Here；<br>&emsp;&emsp;<strong>Git LFS</strong>：大文件支持；<br>&emsp;&emsp;<strong>Associate .git* configuration files with the default text editor</strong>：使.git文件与默认文本编辑器关联，即用默认文本编辑器打开.sh文件；<br>&emsp;&emsp;<strong>Associate .sh files to be run with Bash</strong>：使用Git Bash关联执行.sh文件；<br>&emsp;&emsp;<strong>Use a TrueType font in all console windows</strong>：在所有命令行窗口中使用TrueType字体，推荐勾选；<br>&emsp;&emsp;<strong>Check daily for Git for Windows updates</strong>：每天检查Git更新；<br>&emsp;&emsp;第四步，开始菜单，没啥说的，不想它创建可以勾选左下角的Don’t create a Start Menu folder:</p>
<div align="center"><img src="../images/2018/Build-personal-blog-with-github-and-hexo/git_3.png" alt=""></div>

<p>&emsp;&emsp;第五步，选择Git使用的默认编辑器，这里可以选Vim、Notepad++，VS Code等，可以根据自己的喜好选择，这里保持默认:</p>
<div align="center"><img src="../images/2018/Build-personal-blog-with-github-and-hexo/git_4.png" alt=""></div>

<p>&emsp;&emsp;第六步，调整环境变量，建议保持默认，即选择第二个选项:</p>
<div align="center"><img src="../images/2018/Build-personal-blog-with-github-and-hexo/git_5.png" alt=""></div>

<p>&emsp;&emsp;其中：<br>&emsp;&emsp;<strong>Use Git from Git Bash only</strong>：只能在Git Bash中使用Git命令；<br>&emsp;&emsp;<strong>Use Git from the Windows Command Prompt</strong>：可以在Git Bash和Windows命令提示符中使用Git；<br>&emsp;&emsp;<strong>Use Git and optional Unix tools from the Windows Command Prompt</strong>：Git命令和部分Unix命令将添加到环境变量中，这将覆盖部分cmd命令，例如<code>find</code>和<code>sort</code>等；<br>&emsp;&emsp;第七步，选择HTTPS传输后端库，保持默认选项（使用OpenSSL库）即可:</p>
<div align="center"><img src="../images/2018/Build-personal-blog-with-github-and-hexo/git_6.png" alt=""></div>

<p>&emsp;&emsp;其中：<br>&emsp;&emsp;<strong>Use the OpenSSL library</strong>：使用OpenSSL库，将使用ca-bundle.crt进行服务器验证；<br>&emsp;&emsp;<strong>Use the native Windows Secure Channel library</strong>：使用Windows本地安全验证库，将使用Windows证书存储进行服务器验证，允许使用公司的CA根证书通过活动目录域服务分发；<br>&emsp;&emsp;第八步，换行符转换选择，使用默认选项（第一个）即可:</p>
<div align="center"><img src="../images/2018/Build-personal-blog-with-github-and-hexo/git_7.png" alt=""></div>

<p>&emsp;&emsp;其中：<br>&emsp;&emsp;<strong>Checkout Windows-style, commit Unix-style line endings</strong>：Git在拉取文本文件时将自动把换行符LF转换为CRLF；提交文本文件时，将自动把换行符CRLF转换为LF。如果时跨平台项目，推荐选择该选项；<br>&emsp;&emsp;<strong>Checkout as-is, commit Unix-style line endings</strong>：Git在拉取文本文件时将不做任何转换，提交文本文件时，将自动把换行符CRLF转换为LF；<br>&emsp;&emsp;<strong>Checkout as-is, commit as-is</strong>：Git在拉取文本文件和提交文本文件时将不做任何转换。<br>&emsp;&emsp;第九步，Git Bash终端配置，推荐使用默认选项，即使用MinTTY:</p>
<div align="center"><img src="../images/2018/Build-personal-blog-with-github-and-hexo/git_8.png" alt=""></div>

<p>&emsp;&emsp;其中：<br>&emsp;&emsp;<strong>Use MinTTY(hte default terminal of MSYS2)</strong>：使用MinTTY终端，窗口大小可调整，支持自由选择文本和Unicode字符集；<br>&emsp;&emsp;<strong>Use Windows’ default console window</strong>：使用windows命令提示符，滚动受限，要正确显示非ASCII字符时还需配置为支持Unicode字符集的字体，在Windows 10之前，窗口无法自由调整大小，且只能矩形框选文本。<br>&emsp;&emsp;最后一步，配置其他选项，保持默认选择即可:</p>
<div align="center"><img src="../images/2018/Build-personal-blog-with-github-and-hexo/git_9.png" alt=""></div>

<p>&emsp;&emsp;其中：<br>&emsp;&emsp;<strong>Enable file system caching</strong>：开启文件系统缓存，文件数据将被批量读取并缓存在内存中以进行某些操作，将带来显著的性能提升；<br>&emsp;&emsp;<strong>Enable Git Credential Manager</strong>：开启Git凭据管理器，为windows提供安全的Git凭据存储, 特别时对VS团队服务和Github的多因素身份验证支持；<br>&emsp;&emsp;<strong>Enable symbolic links</strong>：开启符号链接，要求有SeCreateSymbolicLink权限，已存在的仓库不受该设置影响。<br>&emsp;&emsp;之后，等待安装完成。</p>
<h1 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h1><hr>
<p>&emsp;&emsp;下载地址：<a href="https://nodejs.org/dist/v8.10.0/node-v8.10.0-x64.msi" target="_blank" rel="noopener">Node.js (8.10.0 LTS, x64)</a><br>&emsp;&emsp;安装Node.js相对简单，安装路径自己分配，选择组件时保持默认（即全部安装）即可。</p>
<div align="center"><img src="../images/2018/Build-personal-blog-with-github-and-hexo/nodejs_0.png" alt=""></div><br><div align="center"><img src="../images/2018/Build-personal-blog-with-github-and-hexo/nodejs_1.png" alt=""></div>

<h1 id="Github账号注册和配置"><a href="#Github账号注册和配置" class="headerlink" title="Github账号注册和配置"></a>Github账号注册和配置</h1><hr>
<p>&emsp;&emsp;浏览器访问<code>https://github.com</code>，在右侧注册一个GitHub账号，在下图三个输入框中分别输入用户名、邮箱和密码，输入完成后点<code>Sign up for GitHub</code>：</p>
<div align="center"><img src="../images/2018/Build-personal-blog-with-github-and-hexo/op_6.png" alt=""></div>

<p>&emsp;&emsp;注册成功后，登录自己的邮箱，找到Github发送的注册确认邮件，确认注册。确认邮件内容类似如下截图：</p>
<div align="center"><img src="../images/2018/Build-personal-blog-with-github-and-hexo/op_7.png" alt=""></div>

<p>&emsp;&emsp;重新登录后，点击右上角头像左侧的“+”图标，选择<code>New repository</code>进入创建代码仓库节目界面：</p>
<div align="center"><img src="../images/2018/Build-personal-blog-with-github-and-hexo/op_8.png" alt=""></div><br>&emsp;&emsp;在<code>Repository name</code>中填写<code>yourname.github.io</code>，这里用户名是<code>MKeyo</code>，所以填写<code>mkeyo.github.io</code>，<code>Description</code>下填写描述相关内容，不填写也可以，之后点击<code>Create repository</code>：<br><div align="center"><img src="../images/2018/Build-personal-blog-with-github-and-hexo/op_9.png" alt=""></div>

<p>&emsp;&emsp;创建成功后，将看到如下界面：</p>
<div align="center"><img src="../images/2018/Build-personal-blog-with-github-and-hexo/op_10.png" alt=""></div>

<p>&emsp;&emsp;接下来开启仓库的gh-pages功能，点击右侧<code>Settings</code>（<code>Unwatch</code>下方），打开仓库的设置界面，之后下拉页面到<code>GitHub Pages</code>标签或<code>Ctrl+F</code>搜索<code>GitHub Pages</code>，点击<code>Choose a theme</code>按钮：</p>
<div align="center"><img src="../images/2018/Build-personal-blog-with-github-and-hexo/op_11.png" alt=""></div>

<p>&emsp;&emsp;根据自己的喜好选择一个主题，点击右侧的<code>Select theme</code>按钮应用主题：</p>
<div align="center"><img src="../images/2018/Build-personal-blog-with-github-and-hexo/op_12.png" alt=""></div>

<p>&emsp;&emsp;点击按钮后将打开<code>index.md</code>提交页，直接下拉到页面底部点击<code>Commit changes</code>提交即可：</p>
<div align="center"><img src="../images/2018/Build-personal-blog-with-github-and-hexo/op_13.png" alt=""></div><br>&emsp;&emsp;提交成功后在浏览器中访问代码仓库的名字URL验证是否可以访问，能正常访问说明<code>GitHub Pages</code>已经搭建成功：<br><div align="center"><img src="../images/2018/Build-personal-blog-with-github-and-hexo/op_14.png" alt=""></div>

<h1 id="配置Git"><a href="#配置Git" class="headerlink" title="配置Git"></a>配置Git</h1><p>&emsp;&emsp;首先，在桌面或任意盘符目录下右键选择<code>Git Bash Here</code>打开Git命令窗口，也可以通过开始菜单找到<code>Git Bash</code>打开：</p>
<div align="center"><img src="../images/2018/Build-personal-blog-with-github-and-hexo/op_0.png" alt=""></div>

<p>&emsp;&emsp;打开命令窗口后需要稍等片刻，等到窗口中出现<code>MINGW64 xxx</code>类似提示时即可进行下一步操作：</p>
<div align="center"><img src="../images/2018/Build-personal-blog-with-github-and-hexo/op_1.png" alt=""></div>

<p>&emsp;&emsp;右键点击窗口标题，选择<code>Options</code>可自行调整命令窗口选项：</p>
<div align="center"><img src="../images/2018/Build-personal-blog-with-github-and-hexo/op_2.png" alt=""></div>

<p>&emsp;&emsp;由于默认窗口字体比较小，这里调整下字体大小，左侧点击<code>Text</code>标签，在右侧点击<code>Font</code>右边的<code>Select</code>打开字体窗口：</p>
<div align="center"><img src="../images/2018/Build-personal-blog-with-github-and-hexo/op_3.png" alt=""></div>

<p>&emsp;&emsp;根据自己的喜好选择字体和字体大小，点击确定按钮更改，之后点击下方的<code>Save</code>保存更改：</p>
<div align="center"><img src="../images/2018/Build-personal-blog-with-github-and-hexo/op_4.png" alt=""></div>

<p>&emsp;&emsp;调整完成后，回到命令窗口，输入以下两条命令设置git邮箱和用户名，输入时请自行替换双引号内的内容：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.email <span class="string">"youremail@xxx.com"</span></span><br><span class="line">git config --global user.name <span class="string">"yourname"</span></span><br></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;执行效果如下截图：</p>
<div align="center"><img src="../images/2018/Build-personal-blog-with-github-and-hexo/op_22.png" alt=""></div>

<p>&emsp;&emsp;之后，输入<code>ssh-keygen -t rsa -C &quot;youremail&quot;</code>生成SSH密钥（<code>youremail</code>替换为你的邮箱），生成SSH密钥用于GitHub授权，避免每次提交代码都需要输入账号密码，期间会有三次询问：<br>&emsp;&emsp;1、<code>Enter file in which to save the key (/c/Users/lfeng/.ssh/id_rsa):</code> 输入存放key的路径，默认为<code>c:/Users/lfeng/.ssh/id_rsa</code>；<br>&emsp;&emsp;2、<code>Enter passphrase (empty for no passphrase):</code> 输入密码；<br>&emsp;&emsp;3、<code>Enter same passphrase again:</code> 重复上一次输入的密码；<br>&emsp;&emsp;这里按三次回车键，即key文件放在默认位置且不设置密码：</p>
<div align="center"><img src="../images/2018/Build-personal-blog-with-github-and-hexo/op_26.png" alt=""></div>

<p>&emsp;&emsp;打开<code>c:/Users/yourname/.ssh/</code>（<code>yourname</code>为你的电脑用户名），找到<code>id_rsa.pub</code>文件并打开，复制文件里的内容：</p>
<div align="center"><img src="../images/2018/Build-personal-blog-with-github-and-hexo/op_27.png" alt=""></div>

<p>&emsp;&emsp;回到个人主页（如果关闭了网页，则访问<code>https://github.com/yourname</code>，其中<code>yourname</code>替换为你的GitHub昵称），在GitHub个人主页中点击右上角的头像，在弹出的菜单中选择<code>Settings</code>，打开设置页面：</p>
<div align="center"><img src="../images/2018/Build-personal-blog-with-github-and-hexo/op_23.png" alt=""></div>

<p>&emsp;&emsp;点击左侧<code>SSH and GPG Key</code>标签，在右侧页面中点击<code>New SSH Key</code>按钮：</p>
<div align="center"><img src="../images/2018/Build-personal-blog-with-github-and-hexo/op_24.png" alt=""></div>

<p>&emsp;&emsp;输入刚刚复制的<code>id_rsa.pub</code>文件里的内容，标题任意填写，完成后点击添加即可：</p>
<div align="center"><img src="../images/2018/Build-personal-blog-with-github-and-hexo/op_25.png" alt=""></div>

<h1 id="首次体验hexo"><a href="#首次体验hexo" class="headerlink" title="首次体验hexo"></a>首次体验hexo</h1><hr>
<p>&emsp;&emsp;自定义一个用于存放博客文件的目录，这里以<code>C:/Project</code>目录为例，在该目录下右键选择<code>Git Bash Here</code>选项打开Git命令窗口，输入<code>npm install -g hexo</code>开始全局安装hexo，安装时间可能比较长，耐心等待即可：</p>
<div align="center"><img src="../images/2018/Build-personal-blog-with-github-and-hexo/op_5.png" alt=""></div>

<p>&emsp;&emsp;安装完成之后，继续输入<code>npm install -g hexo-cli</code>开始全局安装hexo-cli，安装期间可能会有警告出现，忽略即可：</p>
<div align="center"><img src="../images/2018/Build-personal-blog-with-github-and-hexo/op_15.png" alt=""></div>

<p>&emsp;&emsp;继续输入<code>hexo init</code>初始化hexo：</p>
<div align="center"><img src="../images/2018/Build-personal-blog-with-github-and-hexo/op_16.png" alt=""></div>

<p>&emsp;&emsp;之后输入<code>npm install</code>安装所需的组件，等待其安装完成后进行下一步：</p>
<div align="center"><img src="../images/2018/Build-personal-blog-with-github-and-hexo/op_17.png" alt=""></div>

<p>&emsp;&emsp;继续输入<code>hexo g</code>生成网站文件，之后输入<code>hexo s</code>开启本地服务器：</p>
<div align="center"><img src="../images/2018/Build-personal-blog-with-github-and-hexo/op_18.png" alt=""></div>

<p>&emsp;&emsp;在浏览器中打开<a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a>，将会看到搭建好的博客页面：</p>
<div align="center"><img src="../images/2018/Build-personal-blog-with-github-and-hexo/op_19.png" alt=""></div>

<h1 id="配置hexo"><a href="#配置hexo" class="headerlink" title="配置hexo"></a>配置hexo</h1><p>&emsp;&emsp;打开目录下的<code>_config.yml</code>，编辑其中的配置：</p>
<div align="center"><img src="../images/2018/Build-personal-blog-with-github-and-hexo/op_20.png" alt=""></div>

<p>&emsp;&emsp;首先修改<code>Site</code>网站部分的配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># Site</span><br><span class="line"># 网站标题</span><br><span class="line">title: mkeyo</span><br><span class="line"># 网站副标题</span><br><span class="line">subtitle:</span><br><span class="line"># 网站描述</span><br><span class="line">description:</span><br><span class="line"># 关键字</span><br><span class="line">keywords:</span><br><span class="line"># 您的名字</span><br><span class="line">author: MKeyo</span><br><span class="line"># 网站使用的语言，默认为英语，设置简体汉语zh-Hans</span><br><span class="line">language: zh-Hans</span><br><span class="line"># 网站时区。Hexo 默认使用电脑的时区。</span><br><span class="line">timezone:</span><br></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;接下来是<code>Site</code>网站部分的配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># URL</span><br><span class="line">## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;</span><br><span class="line"># 网址，如果网站存放在子目录中，例如：http://yoursite.com/blog，则把url设为http://yoursite.com/blog并把root设为 /blog/。</span><br><span class="line">url: https://mkeyo.github.io</span><br><span class="line"># 网站根目录</span><br><span class="line">root: /</span><br><span class="line"># 文章的永久链接格式</span><br><span class="line">permalink: :year/:month/:day/:title/</span><br><span class="line"># 永久链接中各部分的默认值</span><br><span class="line">permalink_defaults:</span><br></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;最后是<code>Deployment</code>部署部分的配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  #类型，这里填git</span><br><span class="line">  type: git</span><br><span class="line">  # 代码仓库地址，格式为：git@github.com:yourname/repositoryname.git，其中yourname为你的GitHub昵称，repositoryname为代码仓库名称</span><br><span class="line">  repo: git@github.com:MKeyo/mkeyo.github.io.git</span><br><span class="line">  # 分支，这里填master，即主干</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;其他部分配置这里不做修改，保持默认即可，配置详细说明可以参考<a href="https://hexo.io/zh-cn/docs/configuration.html" target="_blank" rel="noopener"><strong>官方文档</strong></a>，配置完成后保存文件。</p>
<h1 id="部署到GitHub"><a href="#部署到GitHub" class="headerlink" title="部署到GitHub"></a>部署到GitHub</h1><p>&emsp;&emsp;在存放博客文件的目录下打开Git命令窗口，输入<code>npm install hexo-deployer-git --save</code>安装hexo发布到git组件，等待安装完成后进行下一步：</p>
<div align="center"><img src="../images/2018/Build-personal-blog-with-github-and-hexo/op_21.png" alt=""></div>
]]></content>
      
        <categories>
            
            <category> blog </category>
            
        </categories>
        
        
        <tags>
            
            <tag> blog </tag>
            
            <tag> github </tag>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Behaviac简单介绍]]></title>
      <url>/2018/Simple-introduction-of-behaviac.html</url>
      <content type="html"><![CDATA[<p>&emsp;&emsp;behaviac是游戏AI的开发框架组件，也是游戏原型的快速设计工具，支持全平台，适用于客户端和服务器，详细可查看： <a href="http://www.behaviac.com/language/zh/overview/" target="_blank" rel="noopener"><strong>behaviac概述</strong></a><br>&emsp;&emsp;exe安装包下载地址： <a href="https://github.com/Tencent/behaviac/releases/download/3.6.39/BehaviacSetup_3.6.39.exe" target="_blank" rel="noopener"><strong>3.6.39版</strong></a><br>&emsp;&emsp;behaviac项目源代码： <a href="https://github.com/Tencent/behaviac/archive/3.6.39.zip" target="_blank" rel="noopener"><strong>3.6.39版</strong></a><br>&emsp;&emsp;以下内容中大部分来自behaviac官方文档，详细可查看： <a href="http://www.behaviac.com/language/zh/category/%E6%96%87%E6%A1%A3/" target="_blank" rel="noopener"><strong>文档页面</strong></a><br><a id="more"></a></p>
<h2 id="工作原理和流程"><a href="#工作原理和流程" class="headerlink" title="工作原理和流程"></a>工作原理和流程</h2><p>&emsp;&emsp;behaviac整套组件分为编辑器和运行时库，编辑器是独立运行的程序，运行时库需要整合到自己的项目中，各模块的关系如下图所示：</p>
<div align="center"><img src="../images/2018/Simple-introduction-of-behaviac/1.png" alt="各模块关系"></div><br>&emsp;&emsp;其中：工作区用于管理整个项目，包括类型信息和行为树文件等；类型信息包括Agent类及其成员属性、成员方法和实例等，以及枚举和结构体类型；行为树描述了指定的Agent类型的行为，利用各种节点和类型信息来创建行为树；运行时端根据编辑器导出的类型信息，执行导出的行为树。整个组件工作流程：<br><div align="center"><img src="../images/2018/Simple-introduction-of-behaviac/2.png" alt="组件工作流程"></div>

<p>&emsp;&emsp;其中，&quot;胶水&quot;代码是指编辑器自动生成的代码文件，用于注册类型信息，可用于程序端执行时通过名字或ID调用类的成员属性或方法。</p>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>&emsp;&emsp;点击下载示例项目文件：<a href="../attachments/BehaviacTest.zip"><strong>示例下载</strong></a><br>&emsp;&emsp;以下内容中的截图大部分来自示例项目，自行解压缩之后使用编辑器打开HelloTest文件夹下的HelloTest.workspace.xml即可。</p>
<h2 id="类型信息"><a href="#类型信息" class="headerlink" title="类型信息"></a>类型信息</h2><p>&emsp;&emsp;通过菜单项&quot;视图&quot;-&gt;&quot;类型信息&quot;（或快捷键<code>Ctrl+M</code>），打开类型信息面板，如下图所示：</p>
<div align="center"><img src="../images/2018/Simple-introduction-of-behaviac/3.png" alt="类型信息面板"></div>

<h3 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h3><p>&emsp;&emsp;类型分为三种：Agent、Struct和Enum，在新加一个类型的时候，可以相应的选择，如下图所示：</p>
<div align="center"><img src="../images/2018/Simple-introduction-of-behaviac/4.png" alt="类型"></div><br>&emsp;&emsp;在类型信息面板左侧的&quot;类型列表&quot;中选择所要编辑的Agent子类，在右侧的&quot;类型&quot;属性框中，可以修改相关的参数，如下图所示：<br><div align="center"><img src="../images/2018/Simple-introduction-of-behaviac/5.png" alt="类型属性"></div>

<p>&emsp;&emsp;&quot;类型&quot;框中的各个参数说明如下：<br>&emsp;&emsp;<strong>生成代码</strong>：表示该类型是否需要在点击右下方的&quot;应用&quot;按钮时，生成源代码文件；<br>&emsp;&emsp;<strong>名称</strong>：该类型的名字，跟C++/C#的变量命名要求一致，不能输入非法字符；<br>&emsp;&emsp;<strong>命名空间</strong>：该类型的命名空间，跟C++/C#的命名空间一致；<br>&emsp;&emsp;<strong>基类</strong>：该类型的基类；<br>&emsp;&emsp;<strong>引用类型</strong>：该类型是否为引用类型，主要提供给结构体类型使用。若是引用类型，则表示在编辑器中使用时，只能作为引用或指针使用，不能展开配置其成员属性。Agent子类都是引用类型，结构体类型可以选择为引用或非引用类型，枚举类型都是非引用类型；<br>&emsp;&emsp;<strong>生成位置</strong>：一般不用设置，默认会统一使用工作区中配置的&quot;代码生成位置&quot;。但如果设置了该参数，表示当前类型会生成在指定的目录；<br>&emsp;&emsp;<strong>显示名</strong>：用于在编辑器中显示该类型的名字，可以用中文；<br>&emsp;&emsp;<strong>描述</strong>：用于在编辑器中显示该类型的描述内容，可以用中文。<br>&emsp;&emsp;右上方的按钮说明如下：<br>&emsp;&emsp;<strong>新增</strong>：用于添加一个新的类型；<br>&emsp;&emsp;<strong>删除</strong>：用于删除选中的类型；<br>&emsp;&emsp;<strong>预览原型代码</strong>：用于预览生成的代码内容。如果没有勾选上述&quot;类型&quot;框中的&quot;生成代码&quot;选项，可以点击该按钮打开原型代码文件后，复制相关的内容到自己的代码中；<br>&emsp;&emsp;<strong>设置头文件</strong>：在编辑器自动生成的代码中，可能需要包含项目中的头文件，这时就需要点击该按钮，弹出&quot;C++导出设置&quot;窗口添加需要的头文件。</p>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>&emsp;&emsp;在类型信息面板中部位置的&quot;实例名称&quot;列表中，列举了当前选中的Agent子类的所有全局实例名。在其右侧的&quot;新增&quot;按钮用于添加一个实例名，&quot;删除&quot;按钮用于删除当前选中的实例名，如下图所示：</p>
<div align="center"><img src="../images/2018/Simple-introduction-of-behaviac/6.png" alt="实例"></div>

<p>&emsp;&emsp;实例的详细使用说明可查看： <a href="http://www.behaviac.com/tutorial_3_agent_instance/" target="_blank" rel="noopener"><strong>教程三：Agent实例</strong></a></p>
<h3 id="成员"><a href="#成员" class="headerlink" title="成员"></a>成员</h3><p>&emsp;&emsp;在类型信息面板中下部位置的&quot;成员类型&quot;分为Property（成员属性）、Method（成员方法）和Task（任务，用于定义子树调用的接口原型）。</p>
<h4 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h4><p>&emsp;&emsp;成员列表&quot;根据上面选择的&quot;成员类型&quot;，列出了所有的成员；&quot;筛选字符&quot;用于列举自己指定字符的所有成员，即快速检索自己所需的成员，如下图所示：</p>
<div align="center"><img src="../images/2018/Simple-introduction-of-behaviac/7.png" alt="属性列表"></div>

<p>&emsp;&emsp;选择某个属性后，即可在下方&quot;属性&quot;框中查看该属性的各个参数：<br>&emsp;&emsp;<strong>名字</strong>：该属性的名字，跟C++/C#的变量命名要求一致，不能输入非法字符；<br>&emsp;&emsp;<strong>类型</strong>：该属性的类型。如果勾选了后面的&quot;数组？&quot;，则表示该类型为数组类型；<br>&emsp;&emsp;<strong>公开</strong>：该属性是否为public，跟C++/C#中的概念一致；<br>&emsp;&emsp;<strong>静态</strong>：该属性是否为static，跟C++/C#中的概念一致；<br>&emsp;&emsp;<strong>只读</strong>：该属性是否只读。如果为只读，那么在赋值节点中，不能作为左值被赋值，只能读取该值；<br>&emsp;&emsp;<strong>局部变量</strong>：表示该属性是否为局部变量。如果是局部变量，那么只在当前打开的行为树中使用，否则，是普通的成员属性，隶属于当前Agent子类，可用于任何行为树；<br>&emsp;&emsp;<strong>默认值</strong>：该属性的默认初始值，会自动生成在类型的构造函数中；<br>&emsp;&emsp;<strong>显示名</strong>：用于在编辑器中显示该属性的名字，可以用中文；<br>&emsp;&emsp;<strong>描述</strong>：用于在编辑器中显示该属性的描述内容，可以用中文。<br>&emsp;&emsp;右侧的&quot;新增&quot;按钮用于添加新的属性，&quot;删除&quot;按钮用于删除选中的属性，&quot;往上&quot;和&quot;往下&quot;按钮用于调整选中属性的相对位置。</p>
<h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><p>&emsp;&emsp;在类型信息面板中，将&quot;成员类型&quot;选择为&quot;Method&quot;，则在&quot;成员列表&quot;中列出了所有的成员方法，如下图所示：</p>
<div align="center"><img src="../images/2018/Simple-introduction-of-behaviac/8.png" alt="方法列表"></div>

<p>&emsp;&emsp;选择某个方法后，即可在下方&quot;属性&quot;框中查看该方法的各个参数：<br>&emsp;&emsp;<strong>名字</strong>：该方法的名字，跟C++/C#的变量命名要求一致，不能输入非法字符；<br>&emsp;&emsp;<strong>返回值类型</strong>：该方法的返回值类型。如果勾选了后面的&quot;数组？&quot;，则表示该类型为数组类型；<br>&emsp;&emsp;<strong>公开</strong>：该方法是否为public，跟C++/C#中的概念一致；<br>&emsp;&emsp;<strong>静态</strong>：该方法是否为static，跟C++/C#中的概念一致；<br>&emsp;&emsp;<strong>显示名</strong>：用于在编辑器中显示该方法的名字，可以用中文；<br>&emsp;&emsp;<strong>描述</strong>：用于在编辑器中显示该方法的描述内容，可以用中文；<br>&emsp;&emsp;<strong>参数</strong>：该方法的参数列表，可以添加和删除。</p>
<h4 id="任务"><a href="#任务" class="headerlink" title="任务"></a>任务</h4><p>&emsp;&emsp;在类型信息面板中，将&quot;成员类型&quot;选择为&quot;Task&quot;，则在&quot;成员列表&quot;中列出了所有的任务，如下图所示：</p>
<div align="center"><img src="../images/2018/Simple-introduction-of-behaviac/9.png" alt="任务列表"></div>

<p>&emsp;&emsp;任务的编辑跟成员方法的编辑相同，任务只是定义了一个接口原型，用于事件的参数传递。</p>
<h3 id="特别注意"><a href="#特别注意" class="headerlink" title="特别注意"></a>特别注意</h3><p>&emsp;&emsp;编辑类型信息的过程中，不要忘记点击右下方的&quot;应用&quot;按钮，保存和生成类型信息。</p>
<h2 id="节点"><a href="#节点" class="headerlink" title="节点"></a>节点</h2><p>&emsp;&emsp;behaviac有以下节点类型：</p>
<div align="center"><img src="../images/2018/Simple-introduction-of-behaviac/10.png" alt="节点类型"></div>

<p>&emsp;&emsp;接下来以以下几个行为树为例，说明各个节点的功能：<br>&emsp;&emsp;<code>1_Attach</code>&emsp;附件类节点<br>&emsp;&emsp;<code>2_Condition</code>&emsp;条件类节点<br>&emsp;&emsp;<code>3_Action</code>&emsp;动作类节点<br>&emsp;&emsp;<code>4_Combine</code>&emsp;组合类节点<br>&emsp;&emsp;<code>5_Combine_2</code>&emsp;组合类节点（等待信号和子树）<br>&emsp;&emsp;<code>6_Adorner</code>&emsp;装饰器类节点<br>&emsp;&emsp;<code>7_StateMachine</code>&emsp;状态机类节点</p>
<div align="center"><img src="../images/2018/Simple-introduction-of-behaviac/11.png" alt="行为树列表"></div>

<h3 id="附件类节点"><a href="#附件类节点" class="headerlink" title="附件类节点"></a>附件类节点</h3><p>&emsp;&emsp;附件类节点包含前置和后置节点，可以添加到任何一个节点作为前置和后置。前置往往是作为前提条件来使用，而后置往往是当节点结束的时候施加效果，如下图所示：</p>
<div align="center"><img src="../images/2018/Simple-introduction-of-behaviac/12.png" alt="附件类节点"></div>

<h3 id="条件类节点"><a href="#条件类节点" class="headerlink" title="条件类节点"></a>条件类节点</h3><p>&emsp;&emsp;条件节点对左右参数进行比较，根据比较结果返回成功或失败，但永远不会返回正在执行（Running）。通常左参数是Agent的某个属性或某个有返回值的方法，用户可以从下拉列表里选择，右参数是相应类型的常数、Agent的某个属性或某个有返回值的方法，如下图所示：</p>
<div align="center"><img src="../images/2018/Simple-introduction-of-behaviac/13.png" alt="条件类节点"></div>

<p>&emsp;&emsp;与节点接受两个以上的条件子节点，执行逻辑&quot;与（&amp;&amp;）&quot;操作，如下图：</p>
<div align="center"><img src="../images/2018/Simple-introduction-of-behaviac/14.png" alt="条件与节点"></div>

<p>&emsp;&emsp;或节点接受两个以上的条件子节点，执行逻辑&quot;或（||）&quot;操作，如下图：</p>
<div align="center"><img src="../images/2018/Simple-introduction-of-behaviac/15.png" alt="条件或节点"></div>

<h3 id="动作类节点"><a href="#动作类节点" class="headerlink" title="动作类节点"></a>动作类节点</h3><h4 id="等待"><a href="#等待" class="headerlink" title="等待"></a>等待</h4><p>&emsp;&emsp;等待节点在指定的数值内（单位根据自己的使用场景来定）持续保持为运行（Running）状态，数值到达之后则返回成功，如下图：</p>
<div align="center"><img src="../images/2018/Simple-introduction-of-behaviac/16.png" alt="等待节点"></div>

<p>&emsp;&emsp;需要配置&quot;持续时间&quot;，可以是常数、属性或方法的返回值（支持double和int类型），如下图所示：</p>
<div align="center"><img src="../images/2018/Simple-introduction-of-behaviac/17.png" alt="等待节点配置"></div>

<p>&emsp;&emsp;在工作区配置窗口中，可以勾选左下角的&quot;使用整数值&quot;来表示是否使用整数值，如下图所示：</p>
<div align="center"><img src="../images/2018/Simple-introduction-of-behaviac/18.png" alt="等待节点配置"></div>

<p>&emsp;&emsp;等待节点的更新逻辑如下，需要注意的是，使用等待节点需在游戏更新代码中调用SetIntValueSinceStartup或SetDoubleValueSinceStartup设置总时间。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">EBTStatus WaitTask::update(Agent* pAgent, EBTStatus childStatus) </span><br><span class="line">&#123;</span><br><span class="line">    BEHAVIAC_UNUSED_VAR(pAgent);</span><br><span class="line">    BEHAVIAC_UNUSED_VAR(childStatus);</span><br><span class="line">    <span class="keyword">bool</span> bUseIntValue = Workspace::GetInstance()-&gt;GetUseIntValue();</span><br><span class="line">    <span class="keyword">if</span> (bUseIntValue) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> time = Workspace::GetInstance()-&gt;GetIntValueSinceStartup();</span><br><span class="line">        <span class="keyword">if</span> (time - <span class="keyword">this</span>-&gt;m_intStart &gt;= <span class="keyword">this</span>-&gt;m_intTime) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> BT_SUCCESS;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">double</span> time = Workspace::GetInstance()-&gt;GetDoubleValueSinceStartup();</span><br><span class="line">        <span class="keyword">if</span> (time - <span class="keyword">this</span>-&gt;m_start &gt;= <span class="keyword">this</span>-&gt;m_time) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> BT_SUCCESS;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> BT_RUNNING;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="动作"><a href="#动作" class="headerlink" title="动作"></a>动作</h4><p>&emsp;&emsp;动作节点是比较常用的节点，如下图所示：</p>
<div align="center"><img src="../images/2018/Simple-introduction-of-behaviac/19.png" alt="动作节点"></div>

<p>&emsp;&emsp;动作节点通常对应Agent的某个方法，可以从下拉列表里为其选择方法：</p>
<div align="center"><img src="../images/2018/Simple-introduction-of-behaviac/20.png" alt="动作节点属性"></div>

<p>&emsp;&emsp;在设置其方法后，需进一步设置其&quot;决定状态的选项&quot;或&quot;决定状态的函数&quot;，如上图所示。如果没有正确配置，则视为错误不能被导出。<br>&emsp;&emsp;<strong>决定状态的选项</strong>：不管动作的方法的返回值是什么，都强制返回设定的EBTStatus值（即Success、Failure或Running）。<br>&emsp;&emsp;<strong>决定状态的函数</strong>：将动作的方法的返回值从不是EBTStatus类型，转换为执行行为树所需要的EBTStatus值（即Success、Failure或Running）。<br>&emsp;&emsp;有三种设置来决定每次执行动作节点后的状态（Success、Failure或Running）：<br>&emsp;&emsp;1、如果动作节点的方法返回EBTStatus值，那么该值就直接作为动作节点的状态，&quot;决定状态的选项&quot;和&quot;决定状态的函数&quot;将被禁用无需设置。<br>&emsp;&emsp;2、否则，需要设置&quot;决定状态的选项&quot;：当选择Invalid值时，表明需要进一步设置&quot;决定状态的函数&quot;，否则禁用&quot;决定状态的函数&quot;项，并直接使用&quot;决定状态的选项&quot;所选择的值（Success、Failure或Running），表示该方法执行完毕后，动作节点将返回这个设置的值。<br>&emsp;&emsp;3、在&quot;决定状态的函数&quot;项中选择的函数，其返回值必然是EBTStatus，作为动作节点的状态。该函数只有一个或者没有参数，当动作节点的方法无返回值时，该函数没有参数，当动作节点的方法有返回值时，该函数唯一参数的类型为动作节点方法的返回值类型。也即：<br>&emsp;&emsp;当方法的原型是void Method(…)的时候，&quot;决定状态的函数&quot;的原型为：EBTStatus StatusFunctor()。<br>&emsp;&emsp;当方法的原型是ReturnType Method(…)的时候，&quot;决定状态的函数&quot;的原型为：EBTStatus StatusFunctor(ReturnType param)。</p>
<h4 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h4><p>&emsp;&emsp;赋值节点实现了赋值的操作，可以把右边的值赋值给左侧的参数，如下图所示：</p>
<div align="center"><img src="../images/2018/Simple-introduction-of-behaviac/21.png" alt="赋值节点"></div>

<p>&emsp;&emsp;其中，左参数是某个Agent实例的属性，右参数可以是常数、Agent实例的属性或者方法调用的返回值，如下图所示：</p>
<div align="center"><img src="../images/2018/Simple-introduction-of-behaviac/22.png" alt="赋值节点属性"></div>

<p>&emsp;&emsp;当属性&#39;类型转换&#39;没有选中的时候，赋值节点只允许相同的类型进行赋值，也就是说右参数的下拉列表中仅列出与左参数相同类型的参数；而&#39;类型转换&#39;选中的时候，赋值节点允许较为宽松的类型。分为以下两种情况：<br>&emsp;&emsp;1、当左参数是数据类型（int，short，byte，float等）的时候，右参数也将是数据类型，不需要完全一致。<br>&emsp;&emsp;2、当左参数是指针类型（对于C#是引用类型）的时候，右参数将是左参数类型的同类或子类。</p>
<h4 id="计算"><a href="#计算" class="headerlink" title="计算"></a>计算</h4><p>&emsp;&emsp;计算节点对常数、属性或函数的返回值做加减乘除的运算，把结果赋值给某个属性，如下图所示：</p>
<div align="center"><img src="../images/2018/Simple-introduction-of-behaviac/23.png" alt="计算节点"></div>

<p>&emsp;&emsp;其中，左参数是某个Agent实例的属性，参数1和参数2可以是常数、Agent实例的属性或者方法调用的返回值，操作符可以是&quot;+, -, *, /&quot;，如下图所示：</p>
<div align="center"><img src="../images/2018/Simple-introduction-of-behaviac/24.png" alt="计算节点属性"></div>

<p>&emsp;&emsp;需要注意的是，这些操作的&quot;粒度&quot;过小，大量这种小粒度的操作可能对性能造成影响。复杂的计算建议使用动作节点调用相应的函数实现修改或计算。</p>
<h4 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h4><p>&emsp;&emsp;结束节点可以使用于行为树执行过程中的强制返回，即终止该行为树的全部执行，整个行为树直接返回当前结束节点所配置的&quot;结束状态&quot;值，如下图所示：</p>
<div align="center"><img src="../images/2018/Simple-introduction-of-behaviac/25.png" alt="结束节点"></div>

<p>&emsp;&emsp;在上图中，当执行到结束节点时，行为树直接返回Success，不再执行下面ID为10的动作节点。<br>&emsp;&emsp;可以为结束节点配置&quot;结束状态&quot;属性，如下图所示：</p>
<div align="center"><img src="../images/2018/Simple-introduction-of-behaviac/26.png" alt="结束节点属性"></div>

<p>&emsp;&emsp;上面的&quot;结束状态&quot;可以是一个常量，也可以是成员属性或方法的返回值，表示行为树执行到结束节点时，强制返回&quot;结束状态&quot;所配置的当前值。<br>&emsp;&emsp;注意：只有&quot;结束状态&quot;的当前值是Success或Failure时，行为树才会结束并返回该值；为Invalid或Running时，该结束节点不起作用，行为树接着执行。<br>&emsp;&emsp;此外，还有一个属性&quot;结束外层树&quot;，该属性用于表示在子树中的结束节点返回时，是否需要返回该子树所在的父树。</p>
<h4 id="空操作"><a href="#空操作" class="headerlink" title="空操作"></a>空操作</h4><p>&emsp;&emsp;空操作也就是什么都不做，如下图：</p>
<div align="center"><img src="../images/2018/Simple-introduction-of-behaviac/27.png" alt="空操作节点"></div>

<h4 id="等待帧数"><a href="#等待帧数" class="headerlink" title="等待帧数"></a>等待帧数</h4><p>&emsp;&emsp;等待帧数节点顾名思义就是等待指定的帧数后返回成功，如下图：</p>
<div align="center"><img src="../images/2018/Simple-introduction-of-behaviac/28.png" alt="等待帧数节点"></div>

<p>&emsp;&emsp;等待帧数节点的更新逻辑如下，需要在游戏更函数中调用SetFrameSinceStartup设置帧数：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">EBTStatus WaitTask::update(Agent* pAgent, EBTStatus childStatus) </span><br><span class="line">&#123;</span><br><span class="line">    BEHAVIAC_UNUSED_VAR(pAgent);</span><br><span class="line">    BEHAVIAC_UNUSED_VAR(childStatus);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span> bUseIntValue = Workspace::GetInstance()-&gt;GetUseIntValue();</span><br><span class="line">    <span class="keyword">if</span> (bUseIntValue) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> time = Workspace::GetInstance()-&gt;GetIntValueSinceStartup();</span><br><span class="line">        <span class="keyword">if</span> (time - <span class="keyword">this</span>-&gt;m_intStart &gt;= <span class="keyword">this</span>-&gt;m_intTime) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> BT_SUCCESS;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">double</span> time = Workspace::GetInstance()-&gt;GetDoubleValueSinceStartup();</span><br><span class="line">        <span class="keyword">if</span> (time - <span class="keyword">this</span>-&gt;m_start &gt;= <span class="keyword">this</span>-&gt;m_time) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> BT_SUCCESS;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> BT_RUNNING;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="组合类节点"><a href="#组合类节点" class="headerlink" title="组合类节点"></a>组合类节点</h3><h4 id="并行"><a href="#并行" class="headerlink" title="并行"></a>并行</h4><p>&emsp;&emsp;并行节点在逻辑上是&quot;同时&quot;并行的执行所有子节点（但实际也是从上往下依次执行），然后根据所有子节点的状态决定本身的状态，如下图：</p>
<div align="center"><img src="../images/2018/Simple-introduction-of-behaviac/29.png" alt="并行节点"></div>

<p>&emsp;&emsp;并行节点有几个重要属性可以配置，如下图所示：</p>
<div align="center"><img src="../images/2018/Simple-introduction-of-behaviac/30.png" alt="并行节点属性"></div>

<p>&emsp;&emsp;<strong>失败条件</strong>：决定并行节点在什么条件下是失败的；<br>&emsp;&emsp;<strong>成功条件</strong>：决定并行节点在什么条件下是成功的；<br>&emsp;&emsp;<strong>子节点结束继续条件</strong>：子节点结束后是重新再循环执行，还是结束后不再执行；<br>&emsp;&emsp;<strong>退出行为</strong>：当并行节点的成功或失败条件满足并返回成功或失败后，是否需要终止掉其他还在运行的子节点。<br>&emsp;&emsp;当子节点执行状态既不满足失败条件，也不满足成功条件，且无Running状态子节点时，并行节点将直接返回Failure。</p>
<h4 id="子树"><a href="#子树" class="headerlink" title="子树"></a>子树</h4><p>&emsp;&emsp;通过子树节点，一个行为树可以作为另一个行为树的子树。作为子树的那个行为树被&quot;调用&quot;。如同一个动作节点一样，子树节点根据子树的执行结果也会返回执行结果（成功、失败或运行。），其父节点按照自己的控制逻辑来控制接下来的运行。</p>
<div align="center"><img src="../images/2018/Simple-introduction-of-behaviac/31.png" alt="子树节点"></div>

<p>&emsp;&emsp;子树节点属性如下图：</p>
<div align="center"><img src="../images/2018/Simple-introduction-of-behaviac/32.png" alt="子树节点属性"></div>

<p>&emsp;&emsp;引用文件名，作为被调用的子树的行为树的相对路径。该属性不允许为空，需要是有效的路径。没有提供有效路径会导致报错并且该树不允许被导出。引用文件名可以是const常量，可以是变量(其值是行为树的相对路径)，或函数（其返回值需要是字符串，是行为树的相对路径）。<br>&emsp;&emsp;任务，如果子树的根节点是任务节点，这里会出现该任务，并且允许提供参数。如在最上的图中，8号节点travel(x, ax)，4号节点travel(ay, y)。如果子树的根节点不是任务节点，或者引用文件名不是常量，任务属性就是空的。</p>
<h5 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h5><p>&emsp;&emsp;一个行为树可以&quot;调用&quot;自己，这么做的时候形成递归，形成递归的时候需要注意不要造成死循环，这可以通过变量的使用来避免。<br>&emsp;&emsp;如下图所示，利用<code>testVar_0</code>来避免死循环：第一次进入的时候<code>testVar_0 == 0</code>，所以可以执行下面的序列，先把<code>testVar_0</code>赋值为1，那么在下面的递归重入的时候由于<code>testVar_0 == 1</code>，所以<code>testVar_0 == 0</code>的条件不满足，所以下面的序列不会进入从而避免了死循环。</p>
<div align="center"><img src="../images/2018/Simple-introduction-of-behaviac/33.png" alt="递归避免死循环"></div>

<h5 id="添加子树节点"><a href="#添加子树节点" class="headerlink" title="添加子树节点"></a>添加子树节点</h5><p>&emsp;&emsp;在编辑器中，可以通过鼠标拖拽一棵行为树到另一棵行为树中生成子树节点，被拖拽的行为树的路径被设置到引用文件名。需要指出的是，并非任意一个行为树都可以作为另外一个行为树的子树。作为子树的行为树的Agent类型需要是&quot;父树&quot;的Agent类型的子类或同类。也可以像添加其他节点那样，在节点列表中选取子树，拖拽其到相应的位置，然后配置引用文件名或任务。<br>&emsp;&emsp;如果手工配置的子树的路径是空的，或无效的则会报错，该树不允许被导出。如果配置的是变量或函数，编辑器中无法知道其是否有效，只有在运行时发现值无效才会报运行时错误。</p>
<h4 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h4><p>&emsp;&emsp;选择节点以给定的顺序依次调用其子节点，直到其中一个成功返回，那么该节点也返回成功。如果所有的子节点都失败，那么该节点也失败。</p>
<div align="center"><img src="../images/2018/Simple-introduction-of-behaviac/34.png" alt="选择节点"></div>

<p>&emsp;&emsp;选择节点可以添加&#39;中断条件&#39;作为终止执行的条件。下图中红框中的箭头就是可选的&#39;中断条件&#39;。该&#39;中断条件&#39;在每处理下一个子节点的时候被检查，当为true时，则不再继续，返回失败（Failure）。</p>
<div align="center"><img src="../images/2018/Simple-introduction-of-behaviac/35.png" alt="选择节点"></div>

<h4 id="概率选择"><a href="#概率选择" class="headerlink" title="概率选择"></a>概率选择</h4><p>&emsp;&emsp;类似选择节点，概率选择节点也是从子节点中选择执行一个，但不像选择节点每次都是按照排列的先后顺序选择，概率选择节点每次选择的时候根据子节点的&quot;概率权值&quot;进行选择，权值越大，被选到的机会越大，权值为0，则其分支不会被执行，如下图所示：</p>
<div align="center"><img src="../images/2018/Simple-introduction-of-behaviac/36.png" alt="概率选择节点"></div>

<p>&emsp;&emsp;概率选择节点根据概率&quot;直接&quot;选择并执行某个子节点，无论其返回成功还是失败，概率选择节点也将返回同样的结果。如果该子节点返回失败，概率选择也返回失败，它不会像选择节点那样会继续执行接下来的子节点。<br>&emsp;&emsp;概率选择节点有随机数生成器可以配置，该随机数生成器是一个返回值为0.0到1.0之间的float类型的函数，一般设为空即可，表示采用系统的缺省实现，也可以使用自己提供的函数。如下图所示：</p>
<div align="center"><img src="../images/2018/Simple-introduction-of-behaviac/37.png" alt="概率选择节点属性"></div>

<p>&emsp;&emsp;概率选择节点的子节点只能是权值的子节点，在添加子节点时，该权值节点会被系统自动添加。所有权值子节点的相加之和不需要是100，执行时会进行归一化操作，子节点的概率是该子节点的权值/总和。<br>&emsp;&emsp;概率选择节点的选择算法是基于概率区间的，比如上图中的2个子节点的权值都为1，归一化后的概率为0.5，那么对应的概率区间分别是[0.0, 0.5)、[0.5, 1)。概率选择节点的随机数生成器随机产生一个[0.0, 1.0)之间的随机数，看这个随机数落在哪个区间，则执行第几个子节点。例如，随机数为0.45，落在第一个区间[0.0, 0.5)，则选择执行第一个子节点。</p>
<h4 id="随机选择"><a href="#随机选择" class="headerlink" title="随机选择"></a>随机选择</h4><p>&emsp;&emsp;类似选择节点，随机选择节点也是从子节点中选择执行一个，但不像选择节点每次都是按照排列的先后顺序选择，随机选择节点每次选择的时候随机的决定执行顺序，如下图所示：</p>
<div align="center"><img src="../images/2018/Simple-introduction-of-behaviac/38.png" alt="随机选择节点"></div>

<p>&emsp;&emsp;随机选择节点有随机数生成器可以配置，该随机数生成器是一个返回值为0.0到1.0之间的float类型的函数，一般设为空即可，表示采用系统的缺省实现，也可以使用自己提供的函数。如下图所示：</p>
<div align="center"><img src="../images/2018/Simple-introduction-of-behaviac/39.png" alt="随机选择节点属性"></div>

<h4 id="序列"><a href="#序列" class="headerlink" title="序列"></a>序列</h4><p>&emsp;&emsp;序列以给定的顺序依次执行其子节点，直到所有子节点成功返回，该节点也返回成功。只要其中某个子节点失败，那么该节点也失败。如下图：</p>
<div align="center"><img src="../images/2018/Simple-introduction-of-behaviac/40.png" alt="序列节点"></div>

<p>&emsp;&emsp;序列节点不仅可以管理&#39;动作&#39;子节点，也可以管理&#39;条件&#39;子节点，如下图（FirstBT），由于假节点必定返回false，即失败，那么后面的Print(&quot;Failure&quot;)将不再执行：</p>
<div align="center"><img src="../images/2018/Simple-introduction-of-behaviac/41.png" alt="序列节点属性"></div>

<p>&emsp;&emsp;序列节点可以添加&#39;中断条件&#39;作为终止执行的条件。上图中序列节点右上角的箭头就是可选的&#39;中断条件&#39;，该&#39;中断条件&#39;在每处理下一个子节点的时候被检查，当为true时，则不再继续，返回失败（Failure）。</p>
<h4 id="随机序列"><a href="#随机序列" class="headerlink" title="随机序列"></a>随机序列</h4><p>&emsp;&emsp;类似序列节点，随机序列节点也是从子节点中顺序执行，但不像序列节点每次都是按照排列的先后顺序，随机序列节点每次执行子节点时随机的决定其执行顺序，如下图所示：</p>
<div align="center"><img src="../images/2018/Simple-introduction-of-behaviac/42.png" alt="随机序列节点"></div>

<p>&emsp;&emsp;与随机选择节点相同的是，随机序列节点也有随机数生成器可以配置，该随机数生成器是一个返回值为0.0到1.0之间的float类型的函数，一般设为空即可，表示采用系统的缺省实现，也可以使用自己提供的函数。如下图所示：</p>
<div align="center"><img src="../images/2018/Simple-introduction-of-behaviac/43.png" alt="随机序列节点属性"></div>

<h4 id="条件执行"><a href="#条件执行" class="headerlink" title="条件执行"></a>条件执行</h4><p>&emsp;&emsp;条件执行节点与IfElse流程相似，其必须要有3个子节点，第一个子节点是条件分支，第二个子节点是&quot;真时执行&quot;分支，第三个子节点是&quot;假时执行&quot;分支。如果条件为真，那么执行&quot;真时执行&quot;分支；否则，执行&quot;假时执行&quot;分支。如下图所示：</p>
<div align="center"><img src="../images/2018/Simple-introduction-of-behaviac/44.png" alt="条件执行节点"></div>

<p>&emsp;&emsp;如果不使用条件执行节点，也可以用序列和选择节点来实现相同的功能，只不过没有条件执行节点简洁。另外，条件执行节点的&quot;条件&quot;分支，还可以挂上动作节点甚至是一棵子树。比如挂上动作节点时，如果该动作节点返回Running，则条件执行节点也返回Running，并且该条件一直持续执行，直到动作节点返回Success或Failure，则继续相应的执行&quot;真时执行&quot;或&quot;假时执行&quot;分支。</p>
<h4 id="等待信号"><a href="#等待信号" class="headerlink" title="等待信号"></a>等待信号</h4><p>&emsp;&emsp;等待信号节点模拟了等待某个条件的&quot;阻塞&quot;过程。等待信号节点返回Running，直到它上面附加的条件是true的时候：<br>&emsp;&emsp;1、如果有子节点，则执行其子节点，并当子节点结束时，返回该子节点的返回值；<br>&emsp;&emsp;2、如果没有子节点，则直接返回成功。<br>&emsp;&emsp;在下图中，等待信号节点在<code>m_bFlag</code>为true之前一直返回running，当<code>m_bFlag</code>为true时，结束阻塞，执行之后的<code>m_nVal=11</code>赋值节点：</p>
<div align="center"><img src="../images/2018/Simple-introduction-of-behaviac/45.png" alt="等待信号节点"></div>

<p>&emsp;&emsp;等待信号节点还可以附加子节点，如下图，在这种情况下，<code>testVar_0</code>为0时先执行<code>testVar_1 =1</code>赋值节点，之后执行后续的节点：</p>
<div align="center"><img src="../images/2018/Simple-introduction-of-behaviac/46.png" alt="附加子节点的等待信号节点"></div>

<h4 id="选择监测"><a href="#选择监测" class="headerlink" title="选择监测"></a>选择监测</h4><p>&emsp;&emsp;选择监测节点和监测分支节点作为对传统行为树的扩展，可以很自然的处理事件和状态的改变，类似于程序语言中的&quot;switch…case&quot;语句，如下图所示：</p>
<div align="center"><img src="../images/2018/Simple-introduction-of-behaviac/47.png" alt="选择监测节点"></div>

<p>&emsp;&emsp;需要注意以下几点：<br>&emsp;&emsp;1、选择监测和监测分支节点只能配对使用，即选择监测节点只能添加监测分支节点作为它的子节点，监测分支节点也只能作为选择监测节点的子节点被添加；<br>&emsp;&emsp;2、监测分支节点有条件分支子树和动作分支子树。只有条件分支子树返回成功的时候，动作分支子树才能够被执行；<br>&emsp;&emsp;3、选择监测节点是一个动态的选择节点，与选择节点相同的是，它选择第一个返回成功的子节点，但不同的是，它不是只选择一次，而是每次执行时都对其子节点重新评估后再进行选择；<br>&emsp;&emsp;4、选择检测节点的实现很像并行节点，每帧都要重新执行所有的子树，大量使用的时候请注意其性能。<br>&emsp;&emsp;默认情况下，上一次得到执行的动作分支，如果在下一次其条件分支也返回成功，那么这个动作分支会继续执行上次返回正在运行的节点。例如，假设上图中上一次执行行为树的时候，ID为28的条件节点返回成功，并且已经执行到ID为30的动作节点（31节点返回成功，30节点返回running），那么，当下一次执行该选择检测节点时，如果发现ID为28的条件节点还是返回成功，ID为30的动作节点就会直接得到执行，而不是先执行ID为31的动作节点。<br>&emsp;&emsp;但有的时候，可能需要在条件分支再次得到满足时，其动作分支需要重新执行，而不是默认情况下的从上次返回正在执行的节点继续执行。例如，对于上面的例子，当ID为28的条件节点再次返回成功时，需要重新执行其动作分支，即重新开始执行ID为31的动作节点，这时候，需要勾选上选择检测节点的属性&quot;重置子节点&quot;，如下图所示：</p>
<div align="center"><img src="../images/2018/Simple-introduction-of-behaviac/48.png" alt="选择监测节点属性"></div>

<p>&emsp;&emsp;另外，执行行为树的过程中，当状态、条件发生变化或发生事件时如何响应或打断当前的执行是个重要的问题。<br>&emsp;&emsp;目前behaviac组件支持三种方式来处理状态变化或事件发生：并行节点、选择监测节点、事件附件等。简而言之，并行和选择监测节点的工作方式是采用&quot;轮询&quot;的方式，每次执行时需要重新评估所有子节点，而不是像其他节点会保留上一次正在执行的子节点以便在下一次执行时继续执行。事件附件是在游戏逻辑（程序端）发出事件时，才按需得到响应。</p>
<h4 id="任务-1"><a href="#任务-1" class="headerlink" title="任务"></a>任务</h4><p>&emsp;&emsp;任务节点用于描述一个接口，该接口的入口参数为当前的行为树提供了局部变量，这些局部变量可以根据需要用于该行为树所有子节点，如下图所示：</p>
<div align="center"><img src="../images/2018/Simple-introduction-of-behaviac/49.png" alt="任务节点"></div>

<p>&emsp;&emsp;注意，任务节点只能作为行为树的第一个子节点存在，在任务节点上可以添加其他子节点。<br>&emsp;&emsp;在任务节点的任务属性中需要选择在类型信息面板中创建的事件，如下图所示：</p>
<div align="center"><img src="../images/2018/Simple-introduction-of-behaviac/50.png" alt="任务节点属性"></div>

<p>&emsp;&emsp;带有任务节点的行为树主要用于事件的处理，事件则主要用于在游戏逻辑发出事件时，得到响应后打断当前正在执行的行为树，并切换到所设置的另一个行为树。以<code>4_Combine_Task</code>和<code>5_Combine_2</code>为例，操作步骤如下：<br>&emsp;&emsp;1、首先为FirstAgent添加一个任务<code>event_task</code>，接受一个int参数nVal：</p>
<div align="center"><img src="../images/2018/Simple-introduction-of-behaviac/51.png" alt="添加任务属性"></div>

<p>&emsp;&emsp;2、新建一个任务行为树<code>4_Combine_Task</code>，添加任务节点，在属性框中选择<code>event_task</code>任务，之后添加一系列的节点：</p>
<div align="center"><img src="../images/2018/Simple-introduction-of-behaviac/52.png" alt="选任务行为树"></div>

<p>&emsp;&emsp;3、新建一个用于模拟主逻辑的行为树<code>5_Combine_2</code>，拖动<code>4_Combine_Task</code>行为树到<code>5_Combine_2</code>的第一个序列节点上，这样该序列节点就有了一个事件的附件：</p>
<div align="center"><img src="../images/2018/Simple-introduction-of-behaviac/53.png" alt="主行为树"></div>

<p>&emsp;&emsp;4、之后为该事件设置参数：</p>
<div align="center"><img src="../images/2018/Simple-introduction-of-behaviac/54.png" alt="为事件设置参数"></div>

<p>&emsp;&emsp;其中，&quot;触发一次&quot;表示该事件是否只触发一次就不再起作用。&quot;触发模式&quot;控制该事件触发后对当前行为树的影响以及被触发的子树结束时应该如何恢复，有转移和返回两个选项：<br>&emsp;&emsp;转移：当子树结束时，当前行为树被中断和重置，该子树将被设置为当前行为树。<br>&emsp;&emsp;返回：当子树结束时，返回控制到之前打断的地方继续执行。当前行为树直接&quot;压&quot;到执行堆栈上而不被中断和重置，该子树被设置为当前行为树，当该子树结束时，原本的那棵行为树从执行堆栈上&quot;弹出&quot;，并从当初的节点恢复执行。<br>&emsp;&emsp;5、最后在代码中通过如下代码将事件<code>event_task</code>发出，并指定所需参数：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">g_pFirstAgent-&gt;FireEvent(<span class="string">"event_task"</span>, <span class="number">10</span>);</span><br></pre></td></tr></table></figure>
<p>&emsp;&emsp;这样，在执行行为树<code>5_Combine_2</code>时，如果接收到事件<code>event_task</code>，那么行为树中的事件附件将得到响应和处理，行为树的执行就会从当前的<code>5_Combine_2</code>跳转到<code>4_Combine_Task</code>。<br>&emsp;&emsp;调用FireEvent的时候，只有处于running状态的节点才响应事件，这样设计是为了允许不同的分支不同的时机同样的事件可以触发不同的行为。比如同样是BeingHit，受伤的时候，或者逃跑的时候可以对应不同的行为。如果不需要根据不同的节点相应不同的行为，只是需要响应事件，可以把事件配置在根节点上（根节点同样需要是running状态，非running状态的节点没有机会响应事件）。<br>&emsp;&emsp;另外需要补充说明的是，虽然行为树<code>4_Combine_Task</code>带有任务节点，但也可以直接将该行为树拖拽到行为树<code>5_Combine_2</code>中，如下图：</p>
<div align="center"><img src="../images/2018/Simple-introduction-of-behaviac/55.png" alt="直接使用任务行为树"></div>

<p>&emsp;&emsp;选中该任务子树后，可直接配置所需参数，如下图：</p>
<div align="center"><img src="../images/2018/Simple-introduction-of-behaviac/56.png" alt="配置参数"></div>

<h3 id="装饰器类节点"><a href="#装饰器类节点" class="headerlink" title="装饰器类节点"></a>装饰器类节点</h3><p>&emsp;&emsp;装饰器类节点作为控制分支节点，必须且只接受一个子节点。装饰器类节点首先从子节点开始执行，并根据自身的控制逻辑以及子节点的返回结果决定自身的状态。装饰节点都有&quot;子节点结束时作用&quot;属性配置，如果该值配置为真，则仅当子节点结束（成功或失败）的时候，装饰节点的装饰逻辑才起作用。</p>
<h4 id="非"><a href="#非" class="headerlink" title="非"></a>非</h4><p>&emsp;&emsp;非节点将子节点的返回值取反，如下图所示：</p>
<div align="center"><img src="../images/2018/Simple-introduction-of-behaviac/57.png" alt="非节点"></div>

<p>&emsp;&emsp;类似于逻辑&quot;非&quot;操作，非节点对子节点的返回值执行如下操作：<br>&emsp;&emsp;1、如果子节点失败，那么此节点返回成功；<br>&emsp;&emsp;2、如果子节点成功，那么此节点返回失败；<br>&emsp;&emsp;3、如果子节点返回正在执行，则同样返回正在执行。</p>
<h4 id="时间"><a href="#时间" class="headerlink" title="时间"></a>时间</h4><p>&emsp;&emsp;时间节点用于在指定的时间内，持续调用其子节点，如下图所示：</p>
<div align="center"><img src="../images/2018/Simple-introduction-of-behaviac/58.png" alt="时间节点"></div>

<p>&emsp;&emsp;时间节点可以配置其属性&quot;时间&quot;，该属性是float或double类型，可以配置一个常量、成员属性或方法的返回值，如下图所示：</p>
<div align="center"><img src="../images/2018/Simple-introduction-of-behaviac/59.png" alt="时间节点属性"></div>

<h4 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h4><p>&emsp;&emsp;循环节点循环执行子节点指定的次数，如下图所示：</p>
<div align="center"><img src="../images/2018/Simple-introduction-of-behaviac/60.png" alt="循环节点"></div>

<p>&emsp;&emsp;循环节点配置如下图：</p>
<div align="center"><img src="../images/2018/Simple-introduction-of-behaviac/61.png" alt="循环节点属性"></div>

<p>&emsp;&emsp;<strong>次数</strong>：如果次数配置为-1，则视为无限循环，总是返回运行。否则循环执行子节点指定的次数然后返回成功，在指定次数之前则返回运行。此循环次数可以是常数，也可以是变量，当是变量的时候，每次enter的时候此循环次数被赋值，也就是每次enter的时候，循环的次数就被确定了。之后再更改该变量的值在本次循环内将不起作用，但是exit后再enter的时候会起作用；<br>&emsp;&emsp;<strong>一帧内结束</strong>：如果选择了&#39;一帧内结束&#39;，次数不可以配置为-1，节点阻塞，直到子节点在一帧内执行指定的次数后返回成功；然而如果子节点失败了，不会执行指定次数就直接返回失败；如果子节点一直返回运行，则本节点一直阻塞。但如果&quot;子节点结束时作用&quot;不为真，则不会阻塞；在&#39;一帧内结束&#39;的情况下，本节点只能成功或失败，不会返回运行。</p>
<h4 id="帧数"><a href="#帧数" class="headerlink" title="帧数"></a>帧数</h4><p>&emsp;&emsp;帧数节点用于在指定的帧数内，持续调用其子节点，如下图所示：</p>
<div align="center"><img src="../images/2018/Simple-introduction-of-behaviac/62.png" alt="帧数节点"></div>

<p>&emsp;&emsp;帧数节点可以配置其属性&quot;帧数&quot;，该属性是int类型，可以配置一个常量、成员属性或方法的返回值，如下图所示：</p>
<div align="center"><img src="../images/2018/Simple-introduction-of-behaviac/63.png" alt="帧数节点属性"></div>

<h4 id="计数限制"><a href="#计数限制" class="headerlink" title="计数限制"></a>计数限制</h4><p>&emsp;&emsp;计数限制节点不同于循环节点，它在 <strong>指定的循环次数到达前</strong> 返回子节点返回的状态，无论成功、失败还是正在执行，如下图所示：</p>
<div align="center"><img src="../images/2018/Simple-introduction-of-behaviac/64.png" alt="计数限制节点"></div>

<p>&emsp;&emsp;计数限制节点在指定的循环次数到达后不再执行。如果指定的循环次数小于0，则表示只执行一次子节点并且返回子节点的返回值。<br>&emsp;&emsp;此外，计数限制节点上还可以添加中断条件作为重新开始条件，如下图：</p>
<div align="center"><img src="../images/2018/Simple-introduction-of-behaviac/65.png" alt="计数限制节点中断条件"></div>

<h4 id="输出消息"><a href="#输出消息" class="headerlink" title="输出消息"></a>输出消息</h4><p>&emsp;&emsp;输出消息节点作为调试的辅助工具，执行完子节点后，输出配置的消息，如下图所示：</p>
<div align="center"><img src="../images/2018/Simple-introduction-of-behaviac/66.png" alt="输出消息节点"></div>

<h4 id="循环直到"><a href="#循环直到" class="headerlink" title="循环直到"></a>循环直到</h4><p>&emsp;&emsp;循环直到节点在指定的次数到达后返回成功，在指定的次数到达前一直返回正在执行。如果指定的次数小于0，则表示无限循环，总是返回正在执行。如下图所示：</p>
<div align="center"><img src="../images/2018/Simple-introduction-of-behaviac/67.png" alt="循环直到节点"></div>

<p>&emsp;&emsp;循环直到节点除了像循环节点可以配置循环的次数，还有一个属性&quot;直到子树&quot;需要配置，如下图所示：</p>
<div align="center"><img src="../images/2018/Simple-introduction-of-behaviac/68.png" alt="循环直到节点属性"></div>

<p>&emsp;&emsp;循环直到节点有两个结束条件，指定的&quot;循环次数&quot;到达或者子树的返回值与配置的&quot;直到子树&quot;值一样时：<br>&emsp;&emsp;1、指定的&quot;循环次数&quot;到达的时候，则返回成功；<br>&emsp;&emsp;2、指定的&quot;循环次数&quot;小于0的时候，则是无限循环，等同于只检查子树的返回值是否满足。<br>&emsp;&emsp;子树的返回值满足的时候：<br>&emsp;&emsp;1、如果&quot;直到子树&quot;设置为真，意味着直到子树返回成功，也返回成功；<br>&emsp;&emsp;2、如果&quot;直到子树&quot;设置为假，意味着直到子树返回失败，也返回失败。</p>
<h4 id="总是成功-总是失败-总是运行"><a href="#总是成功-总是失败-总是运行" class="headerlink" title="总是成功/总是失败/总是运行"></a>总是成功/总是失败/总是运行</h4><p>&emsp;&emsp;总是成功/总是失败/总是运行将忽略子节点返回的结果，返回成功/失败/正在运行，如下图：</p>
<div align="center"><img src="../images/2018/Simple-introduction-of-behaviac/69.png" alt="总是成功节点"></div>

<p>&emsp;&emsp;在上图中，并行节点下的两个条件必定有一个返回失败，那么并行也将返回失败，由于前面有总是成功节点，所以最终仍然返回成功。</p>
<h4 id="返回成功直到-返回失败直到"><a href="#返回成功直到-返回失败直到" class="headerlink" title="返回成功直到/返回失败直到"></a>返回成功直到/返回失败直到</h4><p>&emsp;&emsp;返回成功直到节点在指定的次数到达前返回成功，指定的次数到达后返回失败。如果指定的次数小于0，则总是返回成功；返回失败直到节点在指定的次数到达前返回失败，指定的次数到达后返回成功。如果指定的次数小于0，则总是返回失败。</p>
<h3 id="状态机类节点"><a href="#状态机类节点" class="headerlink" title="状态机类节点"></a>状态机类节点</h3><p>&emsp;&emsp;behaviac组件不仅支持行为树，也支持有限状态机（FSM），并且支持行为树跟状态机的相互嵌套调用。<br>&emsp;&emsp;behaviac组件中的状态机主要用到了状态、等待状态和等待帧数状态三种节点，以及条件转换和总是转换两种附件。</p>
<h4 id="状态"><a href="#状态" class="headerlink" title="状态"></a>状态</h4><p>&emsp;&emsp;状态节点是状态机中的基本组成部分之一，可以在状态节点上添加前置、后置以及转换等附件，如下图所示：</p>
<div align="center"><img src="../images/2018/Simple-introduction-of-behaviac/70.png" alt="状态节点"></div>

<p>&emsp;&emsp;在状态节点上添加的前置：表明进入该状态节点时，需要执行的操作。<br>&emsp;&emsp;在状态节点上添加的后置：表明退出该状态节点时，需要执行的操作。<br>&emsp;&emsp;在状态节点上添加的转换：表明满足该转换所表示的条件时，由当前状态切换到转换所指向的下一个状态。<br>&emsp;&emsp;状态节点相关属性如下图：</p>
<div align="center"><img src="../images/2018/Simple-introduction-of-behaviac/71.png" alt="状态节点属性"></div>

<p>&emsp;&emsp;<strong>名字</strong>：为状态节点指定一个有意义的名字，以便区分其他状态节点。<br>&emsp;&emsp;<strong>方法</strong>：表示该状态节点需要执行的操作。<br>&emsp;&emsp;<strong>结束状态</strong>：如果勾选，表示该状态作为结束状态，即在执行完该状态节点之后，整个状态机也直接结束。该节点形状也将显示为圆角矩形，以示区别。</p>
<h4 id="等待状态"><a href="#等待状态" class="headerlink" title="等待状态"></a>等待状态</h4><p>&emsp;&emsp;等待状态节点是一种特殊的状态节点，可以在状态节点上添加前置、后置以及等待转换等附件。添加等待状态节点时，会自动的生成唯一的等待转换附件，不接受添加其他类型的转换附件。如下图所示：</p>
<div align="center"><img src="../images/2018/Simple-introduction-of-behaviac/72.png" alt="等待状态节点"></div>

<p>&emsp;&emsp;等待状态节点相关属性如下图：</p>
<div align="center"><img src="../images/2018/Simple-introduction-of-behaviac/73.png" alt="等待状态节点属性"></div>

<p>&emsp;&emsp;相比状态节点的属性，等待状态节点少了&quot;方法&quot;属性，但多出了一个&quot;持续时间&quot;属性，用来指定需要等待多长时间，可以是常数、属性或方法的返回值。</p>
<h4 id="等待帧数状态"><a href="#等待帧数状态" class="headerlink" title="等待帧数状态"></a>等待帧数状态</h4><p>&emsp;&emsp;等待帧数状态节点与等待状态节点相似，只是持续时间属性变为帧数属性，如下图所示：</p>
<div align="center"><img src="../images/2018/Simple-introduction-of-behaviac/74.png" alt="等待帧数状态节点"></div>

<h4 id="条件转换"><a href="#条件转换" class="headerlink" title="条件转换"></a>条件转换</h4><p>&emsp;&emsp;条件转换附件是状态机中的基本组成部分之一，它表示一个条件，当这个条件满足时，由所在的状态切换到另一个状态，如下图所示：</p>
<div align="center"><img src="../images/2018/Simple-introduction-of-behaviac/75.png" alt="条件转换附件"></div>

<p>&emsp;&emsp;其中<code>m_nVal == 2</code>为切换到等待状态的条件。条件转换的属性如下图，其中效果属性为转换附件执行完之后需要执行的额外操作：</p>
<div align="center"><img src="../images/2018/Simple-introduction-of-behaviac/76.png" alt="条件转换附件属性"></div>

<h4 id="状态转换"><a href="#状态转换" class="headerlink" title="状态转换"></a>状态转换</h4><p>&emsp;&emsp;状态转换附件是一种特殊的转换附件，根据它的配置，转换时机会有不同（ <strong>验证发现无法添加子树作为当前节点，2、3、4可能已不支持</strong> ）：<br>&emsp;&emsp;1、总跳转，表示无条件从所在的状态切换到另一个状态，如下图所示；<br>&emsp;&emsp;2、成功时，表示当所在节点是子树并且成功的时候转换；<br>&emsp;&emsp;3、失败时，表示当所在节点是子树并且失败的时候转换；<br>&emsp;&emsp;4、结束时，表示当所在节点是子树并且结束（成功或失败）的时候转换。</p>
<div align="center"><img src="../images/2018/Simple-introduction-of-behaviac/77.png" alt="状态转换附件"></div>

<h2 id="预制"><a href="#预制" class="headerlink" title="预制"></a>预制</h2><p>&emsp;&emsp;预制可以用来复用和实例化已有的行为树，如果只是直接复用行为树，预制跟引用子树的功能是一样的。但是预制还可以用来定制个别节点的配置，称之为对预制的实例化。也即，如果一棵行为树用到了一棵预制行为树，那么可以局部修改某些节点，这些修改的节点不会跟着预制行为树的更新而同步更新。</p>
<h3 id="添加预制"><a href="#添加预制" class="headerlink" title="添加预制"></a>添加预制</h3><p>&emsp;&emsp;打开示例中的任意一棵行为树，这里选中某一个节点之后右键，在弹出的菜单框中选择另存为预制行为树。这里以<code>2_Condition</code>行为树中的第一个或节点为例，如下图所示：</p>
<div align="center"><img src="../images/2018/Simple-introduction-of-behaviac/78.png" alt="行为树"></div>

<p>&emsp;&emsp;在弹出的&quot;另存为预制&quot;窗口中，可以为当前的预制改名，然后点击&quot;确认&quot;按钮，如下图所示：</p>
<div align="center"><img src="../images/2018/Simple-introduction-of-behaviac/79.png" alt="另存为预制"></div>

<p>&emsp;&emsp;在编辑器左侧的行为树列表中，可以看到多了<code>pf_Or</code>节点，这就是刚刚保存出来的预制行为树，如下图所示：</p>
<div align="center"><img src="../images/2018/Simple-introduction-of-behaviac/80.png" alt="Prefabs"></div>

<p>&emsp;&emsp;在Prefabs标签下的所有预制行为树都可以直接拖拽到主视口中打开的行为树中使用，不过需要保证预制行为树跟主视口中打开的行为树的Agent类型保持兼容，也即要么类型相同，要么预制行为树的Agent类型是主视口中打开的行为树的Agent类型的基类。<br>&emsp;&emsp;双击打开预制行为树<code>pf_Or</code>，可以看到该树自动添加了根节点及其Agent类型FirstAgent，其他节点跟原有的情况保持一致，如下图所示：</p>
<div align="center"><img src="../images/2018/Simple-introduction-of-behaviac/81.png" alt="预制行为树"></div>

<p>&emsp;&emsp;而在行为树<code>2_Condition</code>中，可以看到原来的或节点已被预制行为树<code>pf_Or</code>替代，如下图所示：</p>
<div align="center"><img src="../images/2018/Simple-introduction-of-behaviac/82.png" alt="预制行为树已替换"></div>

<p>&emsp;&emsp;修改了预制行为树<code>pf_Or</code>中的节点，所有引用到该预制行为树的行为树都会保持相同的更新，除非在行为树中有对预制行为树的节点属性有自己的修改或定制。</p>
<h3 id="应用预制"><a href="#应用预制" class="headerlink" title="应用预制"></a>应用预制</h3><p>&emsp;&emsp;为行为树<code>2_Condition</code>拖拽一个预制行为树<code>pf_Or</code>，如下图所示：</p>
<div align="center"><img src="../images/2018/Simple-introduction-of-behaviac/83.png" alt="使用预制行为树"></div>

<p>&emsp;&emsp;修改第二个预制<code>pf_Or</code>中ID为15的节点右值为2，如下图所示：</p>
<div align="center"><img src="../images/2018/Simple-introduction-of-behaviac/84.png" alt="修改值"></div>

<p>&emsp;&emsp;可以看到上图ID为13和16的两个节点都变为了虚线框，表示这是预制实例化（定制）后的节点及其父节点。此时如果修改预制<code>pf_Or</code>中的或节点的第二个条件节点<code>m_nVal == 1</code>为<code>m_nVal == 3</code>，那么行为树<code>2_Condition</code>中的ID为3的条件节点右值也将更新为3，而ID为15的节点将不更新，如下图所示：</p>
<div align="center"><img src="../images/2018/Simple-introduction-of-behaviac/85.png" alt="定制预制行为树"></div>

<h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><p>&emsp;&emsp;注意：示例压缩包中已经包含了BehaviacTest项目文件，其中的代码无需进行以下修改。</p>
<h3 id="生成代码"><a href="#生成代码" class="headerlink" title="生成代码"></a>生成代码</h3><p>&emsp;&emsp;编辑器中选择视图-&gt;类型信息选项，打开类型信息对话框，点击底下的应用按钮导出最新的&quot;胶水&quot;代码，通过左下角打开代码生成位置可以定位到&quot;胶水&quot;代码所在路径（工作区目录下的<code>exported\behaviac_generated\types</code>），一般在类型信息新增或有变更时才需要重新导出。</p>
<div align="center"><img src="../images/2018/Simple-introduction-of-behaviac/86.png" alt="导出代码"></div>

<p>&emsp;&emsp;之后新建一个VS项目，拷贝编辑器生成的&quot;胶水&quot;代码到项目中：</p>
<div align="center"><img src="../images/2018/Simple-introduction-of-behaviac/87.png" alt="胶水代码"></div>

<p>&emsp;&emsp;添加&quot;胶水&quot;代码之后的项目如下图：</p>
<div align="center"><img src="../images/2018/Simple-introduction-of-behaviac/88.png" alt="拷贝胶水代码"></div>

<h3 id="添加逻辑代码"><a href="#添加逻辑代码" class="headerlink" title="添加逻辑代码"></a>添加逻辑代码</h3><p>&emsp;&emsp;打开上图中的FirstAgent.cpp文件，为FirstAgent的Print/PrintInt/SetInt方法添加逻辑代码，注意逻辑代码只能添加在注释&quot;///&lt;&lt;&lt; BEGIN WRITING YOUR CODE&quot;和&quot;///&lt;&lt;&lt; END WRITING YOUR CODE&quot;之间。如下代码所示：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> FirstAgent::Print(behaviac::<span class="built_in">string</span>&amp; strText)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">///&lt;&lt;&lt; BEGIN WRITING YOUR CODE Print</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%s\n"</span>, strText.c_str());</span><br><span class="line"><span class="comment">///&lt;&lt;&lt; END WRITING YOUR CODE</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> FirstAgent::PrintInt()</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">///&lt;&lt;&lt; BEGIN WRITING YOUR CODE PrintInt</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"m_nVal=%d\n"</span>, m_nVal);</span><br><span class="line"><span class="comment">///&lt;&lt;&lt; END WRITING YOUR CODE</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> FirstAgent::SetInt(<span class="keyword">int</span> nVal)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">///&lt;&lt;&lt; BEGIN WRITING YOUR CODE SetInt</span></span><br><span class="line">	m_nVal = nVal;</span><br><span class="line"><span class="comment">///&lt;&lt;&lt; END WRITING YOUR CODE</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="修改项目属性"><a href="#修改项目属性" class="headerlink" title="修改项目属性"></a>修改项目属性</h3><p>&emsp;&emsp;右键项目选择项目属性，在C/C++下的General（常规）选项中添加behaviac库的inc目录（位于behaviac源码压缩包的最顶级）为附加引入目录；在Linker下的General（常规）选项中添加behaviac库生成的lib文件所在目录为附加库目录，添加该lib文件为附加依赖项。如下图：</p>
<div align="center"><img src="../images/2018/Simple-introduction-of-behaviac/90.png" alt="附加引入目录"></div>

<div align="center"><img src="../images/2018/Simple-introduction-of-behaviac/91.png" alt="附加库目录"></div>

<div align="center"><img src="../images/2018/Simple-introduction-of-behaviac/92.png" alt="依赖项"></div>

<h3 id="添加Behaviac逻辑"><a href="#添加Behaviac逻辑" class="headerlink" title="添加Behaviac逻辑"></a>添加Behaviac逻辑</h3><p>&emsp;&emsp;1、首先，在InitBehaviac()方法中初始化behaviac的加载目录和文件格式等，如下代码所示：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">InitBehaviac</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%s\n"</span>, __FUNCTION__);</span><br><span class="line">	behaviac::Workspace::GetInstance()-&gt;SetFilePath(<span class="string">"../res"</span>);	<span class="comment">// 用于设置加载编辑器导出的行为树所在的目录</span></span><br><span class="line">	behaviac::Workspace::GetInstance()-&gt;SetFileFormat(behaviac::Workspace::EFF_xml);		<span class="comment">// 用于设置加载的行为树格式，这里用的是xml格式</span></span><br><span class="line">	behaviac::Config::SetLogging(<span class="literal">true</span>);</span><br><span class="line">	behaviac::Config::SetSocketBlocking(<span class="literal">true</span>);	<span class="comment">// 等待编辑器连接上才往后继续执行</span></span><br><span class="line">	<span class="comment">//behaviac::Config::SetSocketPort(60636);	// 如果需要修改端口号，需要添加此代码</span></span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>&emsp;&emsp;2、接着，创建Agent子类FirstAgent的实例，并加载指定的行为树，如下代码所示：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">InitPlayer</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">const</span> <span class="keyword">char</span>* szPath = g_arrBTPath[g_nBTIndex].c_str();</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%s\n"</span>, __FUNCTION__);</span><br><span class="line">	g_pFirstAgent = behaviac::Agent::Create&lt;FirstAgent&gt;();	<span class="comment">//Create()用于创建Agent子类的实例</span></span><br><span class="line">	<span class="keyword">if</span> (g_pFirstAgent == <span class="literal">nullptr</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">bool</span> bRet = g_pFirstAgent-&gt;btload(szPath);	<span class="comment">//用于加载行为树，入口参数是行为树的名字，不需要加后缀</span></span><br><span class="line">	<span class="keyword">if</span> (bRet)</span><br><span class="line">	&#123;</span><br><span class="line">		g_pFirstAgent-&gt;btsetcurrent(szPath);		<span class="comment">//用于指定当前准备执行的行为树</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> bRet;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>&emsp;&emsp;3、其次，开始执行行为树，如下代码所示：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UpdateLoop</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%s\n"</span>, __FUNCTION__);</span><br><span class="line">	<span class="keyword">int</span> frames = <span class="number">0</span>;</span><br><span class="line">	behaviac::EBTStatus enStatus = behaviac::BT_RUNNING;</span><br><span class="line">	<span class="keyword">while</span> (enStatus == behaviac::BT_RUNNING)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"frame %d:\n"</span>, frames);</span><br><span class="line">		behaviac::Workspace::GetInstance()-&gt;DebugUpdate();</span><br><span class="line">		enStatus = g_pFirstAgent-&gt;btexec();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>&emsp;&emsp;4、之后，对创建的Agent实例进行销毁释放，并清理整个工作区，如下代码所示：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CleanPlayer</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%s\n"</span>, __FUNCTION__);</span><br><span class="line">	behaviac::Agent::Destroy(g_pFirstAgent);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CleanBehaviac</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%s\n"</span>, __FUNCTION__);</span><br><span class="line">	behaviac::Workspace::GetInstance()-&gt;Cleanup();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>&emsp;&emsp;5、最后，在main函数中依次调用1-4中所写的函数，编译并运行程序即可。</p>
<h3 id="其他说明"><a href="#其他说明" class="headerlink" title="其他说明"></a>其他说明</h3><h4 id="编译behaviac运行时库"><a href="#编译behaviac运行时库" class="headerlink" title="编译behaviac运行时库"></a>编译behaviac运行时库</h4><p>&emsp;&emsp;behaviac源代码压缩包中包含了VS2013的项目文件，解压缩后打开projects/vs2013目录下的sln文件，如下图：</p>
<div align="center"><img src="../images/2018/Simple-introduction-of-behaviac/93.png" alt="behaviac项目文件"></div>

<p>&emsp;&emsp;打开之后按需选择<code>DebugStatic</code>/<code>DebugDLL</code>/<code>ReleaseDLL</code>/<code>ReleaseStatic</code>编译即可，生成的lib或dll文件在源代码根目录下的bin目录：</p>
<div align="center"><img src="../images/2018/Simple-introduction-of-behaviac/94.png" alt="生成文件目录"></div>

<h4 id="逻辑代码更新问题"><a href="#逻辑代码更新问题" class="headerlink" title="逻辑代码更新问题"></a>逻辑代码更新问题</h4><p>&emsp;&emsp;当类型信息中建立好的类已添加了逻辑代码时，为避免下一次修改类型信息导致类的逻辑代码被覆盖，添加好逻辑代码之后将修改的类cpp和h文件覆盖到工作区目录下的<code>exported\behaviac_generated\types\internal</code>目录，这样在编辑器下一次生成&quot;胶水&quot;代码不会覆盖掉已有的逻辑代码。</p>
<h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><h3 id="连调"><a href="#连调" class="headerlink" title="连调"></a>连调</h3><p>&emsp;&emsp;连调功能是指在游戏运行的时候，编辑器可以连上游戏，实时的查看树的运行情况，变量的当前值，可以设断点等。而离线调试实际上是回放运行时产生的log。<br>&emsp;&emsp;连调需要游戏是开发版本（即宏<code>BEHAVIAC_RELEASE</code>没有被定义），发布版本下没有连调的功能。<br>&emsp;&emsp;连调流程说明如下（以文档中提供的示例BehaviacTest.zip包为例，假设已安装好Behaviac编辑器）：<br>&emsp;&emsp;1、解压缩BehaviacTest.zip，打开Project下的BehaviacTest.sln，直接编译运行。运行时，可以看到如下图所示：</p>
<div align="center"><img src="../images/2018/Simple-introduction-of-behaviac/95.png" alt="运行结果"></div>

<p>&emsp;&emsp;2、使用编辑器打开HelloTest下的<code>HelloTest.workspace.xml</code>，左上角双击<code>5_Combine_2</code>和<code>4_Combine_Task</code>打开这两个行为树，并在任意节点上打断点，选中某个节点之后右键选择断点-&gt;添加进入/退出断点或按F9添加断点即可；<br>&emsp;&emsp;3、点击左上角当前工作区下的连接游戏图标，如下图：</p>
<div align="center"><img src="../images/2018/Simple-introduction-of-behaviac/96.png" alt="连接游戏图标"></div>

<p>&emsp;&emsp;之后弹出连接游戏对话框，按情况勾选使用本机IP及填写IP和端口：</p>
<div align="center"><img src="../images/2018/Simple-introduction-of-behaviac/97.png" alt="连接游戏面板"></div>

<p>&emsp;&emsp;连接成功后，如果已命中断点，则会以黄色框显示当前断住的节点，如下图，此时按F5可以继续执行：</p>
<div align="center"><img src="../images/2018/Simple-introduction-of-behaviac/98.png" alt="调试界面"></div>

<h3 id="离线调试"><a href="#离线调试" class="headerlink" title="离线调试"></a>离线调试</h3><p>&emsp;&emsp;离线调试功能是指在编辑器里加载运行时产生的<code>_behaviac_$_.log</code>文件，如下图，可以加载<code>_behaviac_$_.log</code>文件：</p>
<div align="center"><img src="../images/2018/Simple-introduction-of-behaviac/99.png" alt="分析文件"></div>

<p>&emsp;&emsp;<code>_behaviac_$_.log</code>是运行游戏时产生的log文件。一般都是产生在exe所在的目录，对于Unity，是产生在Assets的同级目录。以C++项目为例为例，调试时，log文件在项目vcxproj同级目录下：</p>
<div align="center"><img src="../images/2018/Simple-introduction-of-behaviac/100.png" alt="log文件路径"></div>

<p>&emsp;&emsp;单独运行exe时，则在exe同级目录下：</p>
<div align="center"><img src="../images/2018/Simple-introduction-of-behaviac/101.png" alt="log文件路径"></div>

<p>&emsp;&emsp;在离线调试里，可以模拟游戏的运行，甚至可以设断点，然后查看变量的当前值，可以查看树的执行情况。需要注意，文件<code>_behaviac_$_.log</code>只在开发版本下产生，或是<code>Config::IsLogging</code>为true时产生。</p>
]]></content>
      
        <categories>
            
            <category> behaviac </category>
            
        </categories>
        
        
        <tags>
            
            <tag> behaviac </tag>
            
            <tag> FSM </tag>
            
            <tag> Game-AI </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用VS2015编译cocos2dx-3.2项目]]></title>
      <url>/2018/Building-cocos2dx-3_2-project-with-VS2015.html</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><hr>
<p>&emsp;&emsp;cocos2dx3.2应该算是大家比较熟知的一个版本了，相比后续的版本，这个版本生成的apk比较小，重点是支持WP8（软粉一枚(ง •_•)ง），然而这个版本生成的项目在VS2015上编译不过。接下来介绍如何修改使VS2015能够顺利编译项目。<a id="more"></a></p>
<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><hr>
<p>&emsp;&emsp;用cocos2dx3.2创建一个项目（以下用<code>YourProject</code>表示项目路径），创建成功后用VS2015打开<code>proj.win32</code>下的sln文件，打开时会弹出一个升级VC编译器和库的提示，点确认即可。之后编译整个解决方案，不出意外的话会看到这些报错：<br><img src="../images/2018/Build-cocos2dx-3_2-project-with-VS2015/builderror.png" alt=""></p>
<h1 id="解决错误"><a href="#解决错误" class="headerlink" title="解决错误"></a>解决错误</h1><hr>
<p>&emsp;&emsp;接下来解决这些编译报错，双击报错信息可以定位到所在文件以及行。</p>
<h2 id="无效文本后缀XSTR"><a href="#无效文本后缀XSTR" class="headerlink" title="无效文本后缀XSTR"></a>无效文本后缀<code>XSTR</code></h2><p>&emsp;&emsp;报错文件为<code>YourProject\cocos2d\external\chipmunk\src\chipmunk.c(48)</code>。查找报错信息发现，VS2015新增了用户定义文本支持，详细见<a href="https://msdn.microsoft.com/zh-cn/library/dn919277.aspx" target="_blank" rel="noopener"><strong>MSDN:用户定义的文本</strong></a>，这里<code>XSTR(CP_VERSION_MAJOR)&quot;.&quot;XSTR(CP_VERSION_MINOR)&quot;.&quot;XSTR(CP_VERSION_RELEASE)</code>后面两个XSTR由于没有空格隔开，所以被认为是用户定义的文本，但实际上没有XSTR这个定义，所以报错。解决办法就是在分别在后面两个<code>XSTR</code>前面加上空格，即：<code>XSTR(CP_VERSION_MAJOR)&quot;.&quot; XSTR(CP_VERSION_MINOR)&quot;.&quot; XSTR(CP_VERSION_RELEASE)</code>。</p>
<h2 id="snprintf宏定义冲突"><a href="#snprintf宏定义冲突" class="headerlink" title="snprintf宏定义冲突"></a><code>snprintf</code>宏定义冲突</h2><p>&emsp;&emsp;Macro definition of snprintf conflicts with Standard Library function declaration这条报错信息的意思是<code>snprintf</code>宏定义和标准库定义冲突，说明cocos2dx在内部定义了<code>snprintf</code>宏。查看输出可以发现在这条报错信息前面还有一条警告信息，如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1&gt;C:\Program Files (x86)\Windows Kits\10\Include\10.0.10240.0\ucrt\stdio.h(1925): warning C4005: \<span class="string">'snprintf\'</span>: macro redefinition (compiling <span class="built_in">source</span> file ..\base\atitc.cpp)</span><br><span class="line">1&gt;  YourProject\cocos2d\cocos\platform\win32\CCStdC.h(53): note: see previous definition of \<span class="string">'snprintf\'</span> (compiling <span class="built_in">source</span> file ..\base\atitc.cpp)</span><br></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;定位到CCStdC.h文件53行，可以看到snprintf宏的定义，解决办法就是把<code>#define snprintf _snprintf</code>注释掉。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// for math.h on win32 platform</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> __MINGW32__</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> !defined(_USE_MATH_DEFINES)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> _USE_MATH_DEFINES       <span class="comment">// make M_PI can be use</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> !defined(isnan)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> isnan   _isnan</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> snprintf</span></span><br><span class="line"><span class="comment">//#define snprintf _snprintf    // 注释掉这一行即可</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// __MINGW32__</span></span></span><br></pre></td></tr></table></figure></p>
<h2 id="无法解析的外部符号"><a href="#无法解析的外部符号" class="headerlink" title="无法解析的外部符号"></a>无法解析的外部符号</h2><p>&emsp;&emsp;编译错误解决了之后，重新编译发现有链接错误：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3&gt;libpng.lib(pngerror.obj) : error LNK2019: unresolved external symbol __imp____iob_func referenced <span class="keyword">in</span> <span class="keyword">function</span> _png_default_error</span><br><span class="line">3&gt;libtiff.lib(tif_unix.obj) : error LNK2001: unresolved external symbol __imp____iob_func</span><br><span class="line">3&gt;libjpeg.lib(jerror.obj) : error LNK2019: unresolved external symbol ___iob_func referenced <span class="keyword">in</span> <span class="keyword">function</span> _output_message</span><br><span class="line">3&gt;MSVCRTD.lib(vsnprintf.obj) : error LNK2001: unresolved external symbol __imp___vsnprintf</span><br></pre></td></tr></table></figure></p>
<h3 id="iob-func"><a href="#iob-func" class="headerlink" title="__iob_func"></a><code>__iob_func</code></h3><p>&emsp;&emsp;出现<code>__iob_func</code>链接错误的原因是早期VS版本是用<code>__iob_func</code>来定义<code>stdin</code>、<code>stdout</code>和<code>stderr</code>宏的，而VS2015是用<code>__acrt_iob_func</code>定义（以SDK 10240版本为例，三个宏定义在<code>c:\Program Files (x86)\Windows Kits\10\Include\10.0.10240.0\ucrt\corecrt_wstdio.h</code>）。有以下两种解决办法：</p>
<ol>
<li>自行编译libpng、libtiff和libjpeg生成VS2015版本的lib文件；</li>
<li>从cocos2dx最新版本中拷贝libpng、libtiff和libjpeg的win32版本lib文件及头文件到cocos2dx3.2对应目录<code>YourProject\cocos2d\external</code>（<strong>不希望下载cocos2dx最新版本？查看结束部分下载我提供的附件</strong>）；<br>拷贝完成之后修改<code>YourProject\cocos2d\cocos\platform\win32\CCPlatformDefine.h</code>，在<code>#endif // CC_TARGET_PLATFORM == CC_PLATFORM_WIN32</code>之前加上如下代码：  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">if</span> _MSC_VER &gt;= 1900</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib,<span class="meta-string">"libpng-2015.lib"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib,<span class="meta-string">"libjpeg-2015.lib"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib,<span class="meta-string">"libtiff-2015.lib"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib,<span class="meta-string">"libpng.lib"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib,<span class="meta-string">"libjpeg.lib"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib,<span class="meta-string">"libtiff.lib"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="vsnprintf"><a href="#vsnprintf" class="headerlink" title="__vsnprintf"></a><code>__vsnprintf</code></h3><p></p><p>&emsp;&emsp;出现这个问题的原因参考<a href="https://social.msdn.microsoft.com/Forums/en-US/5150eeec-4427-440f-ab19-aecb26113d31/updated-to-vs-2015-and-now-get-unresolved-external-errors?forum=vcgeneral" target="_blank" rel="noopener"><strong>MSDN Social：Updated to VS 2015 and now get Unresolved External Errors</strong></a>，解决办法是在启动项目属性中的链接器-&gt;输入-&gt;附加依赖项中加上<code>legacy_stdio_definitions.lib</code>。</p><br><img src="../images/2018/Build-cocos2dx-3_2-project-with-VS2015/add_stdio_definitions_lib.png" alt=""><p></p>
<h1 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h1><hr>
<p>&emsp;&emsp;到这里所有问题都已经解决，可以用VS2015愉快的写代码了😘<br>&emsp;&emsp;最后附上cocos2dx3.14.1版本的libpng、libtiff和libjpeg库相关文件，包含三个库的win32版本include和prebuilt目录，下载地址<a href="../attachments/cocos2d.zip"><strong>点这里</strong></a>，下载之后直接替换你的项目下的cocos2d目录即可。</p>
]]></content>
      
        <categories>
            
            <category> cocos2dx </category>
            
        </categories>
        
        
        <tags>
            
            <tag> cocos2dx </tag>
            
            <tag> Visual Studio </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Trigger第三篇：创建、读取和写入json文件]]></title>
      <url>/2015/TS3-create-read-write-data-with-json.html</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><hr>
<p>&#160; &#160; &#160; &#160;上一篇其实已经说完了这个游戏里的重要部分了，所以接下来开始写代码了。先从解析json文件开始，配置环境啥的就不写了，网上一搜大把的教程（感觉这部分其实都不用写，也有类似读取json文件的教程= =）<a id="more"></a></p>
<h1 id="地图数据json"><a href="#地图数据json" class="headerlink" title="地图数据json"></a>地图数据json</h1><hr>
<p>&#160; &#160; &#160; &#160;这里使用rapidjson读取json文件。以3.2版本为例，rapidjson头文件在项目目录\cocos2d\external\json下，如下图所示：<br><img src="../images/2015/Trigger/rapidjson.png" alt="rapidjson"><br>&#160; &#160; &#160; &#160;在使用rapidjson前，需要引入以下头文件：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"json/rapidjson.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"json/writer.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"json/document.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"json/prettywriter.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"json/stringbuffer.h"</span></span></span><br></pre></td></tr></table></figure></p>
<p>&#160; &#160; &#160; &#160;接下来上地图配置加载的代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//加载json并解析</span></span><br><span class="line"><span class="keyword">bool</span> CDataManager::LoadMapData()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">string</span> strContent = FileUtils::getInstance()-&gt;getStringFromFile(MAP_FILE_PATH);</span><br><span class="line"></span><br><span class="line">	rapidjson::Document oDoc;</span><br><span class="line">	oDoc.Parse&lt;<span class="number">0</span>&gt;(strContent.c_str());</span><br><span class="line">	<span class="keyword">if</span> (oDoc.HasParseError())</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">log</span>(<span class="string">"Parse Error: %s\n"</span>, oDoc.GetParseError());</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (oDoc.IsNull() || !oDoc.IsArray())</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; oDoc.Size(); i++)</span><br><span class="line">	&#123;</span><br><span class="line">		MapInfo mapInfo;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//color</span></span><br><span class="line">		<span class="keyword">if</span> (oDoc[i][<span class="string">"color"</span>].IsNull())</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		mapInfo.iColor = oDoc[i][<span class="string">"color"</span>].GetInt();</span><br><span class="line"></span><br><span class="line">		<span class="comment">//id</span></span><br><span class="line">		<span class="keyword">if</span> (oDoc[i][<span class="string">"id"</span>].IsNull())</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		mapInfo.iID = oDoc[i][<span class="string">"id"</span>].GetInt();</span><br><span class="line"></span><br><span class="line">		<span class="comment">//beat</span></span><br><span class="line">		<span class="keyword">if</span> (oDoc[i][<span class="string">"beat"</span>].IsNull())</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		mapInfo.iBeat = oDoc[i][<span class="string">"beat"</span>].GetInt();</span><br><span class="line"></span><br><span class="line">		<span class="comment">//map</span></span><br><span class="line">		<span class="keyword">if</span> (oDoc[i][<span class="string">"map"</span>].IsNull() || (!oDoc[i][<span class="string">"map"</span>].IsArray()))</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//每行数据</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; oDoc[i][<span class="string">"map"</span>].Size(); j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (oDoc[i][<span class="string">"map"</span>][j].IsNull() </span><br><span class="line">				|| (!oDoc[i][<span class="string">"map"</span>][j].IsArray()))</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; oDoc[i][<span class="string">"map"</span>][j].Size(); k++)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span> (oDoc[i][<span class="string">"map"</span>][j][k].IsNull())</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">				&#125;</span><br><span class="line"></span><br><span class="line">				<span class="keyword">int</span> iValue = oDoc[i][<span class="string">"map"</span>][j][k].GetInt();</span><br><span class="line">				<span class="comment">//每行数据存入vecMap中</span></span><br><span class="line">				mapInfo.vecMap.push_back(iValue);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//mapitem</span></span><br><span class="line">		<span class="keyword">if</span> (oDoc[i][<span class="string">"mapitem"</span>].IsNull() </span><br><span class="line">			|| (!oDoc[i][<span class="string">"mapitem"</span>].IsArray()))</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; oDoc[i][<span class="string">"mapitem"</span>].Size(); j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (oDoc[i][<span class="string">"mapitem"</span>][j].IsNull())</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="built_in">string</span> strMapItem = oDoc[i][<span class="string">"mapitem"</span>][j].GetString();</span><br><span class="line"></span><br><span class="line">			<span class="keyword">int</span> iArrow[<span class="number">3</span>] = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">			SplitString(strMapItem, <span class="string">'_'</span>, iArrow);</span><br><span class="line"></span><br><span class="line">			ArrowInfo arrowInfo;</span><br><span class="line">			<span class="comment">//X和Y位置互换</span></span><br><span class="line">			arrowInfo.iY = iArrow[<span class="number">0</span>];</span><br><span class="line">			arrowInfo.iX = iArrow[<span class="number">1</span>];</span><br><span class="line">			arrowInfo.iType = iArrow[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">			<span class="comment">//存入vecMapItem中</span></span><br><span class="line">			mapInfo.vecMapItem.push_back(arrowInfo);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//useritem</span></span><br><span class="line">		<span class="keyword">if</span> (oDoc[i][<span class="string">"useritem"</span>].IsNull() </span><br><span class="line">			|| (!oDoc[i][<span class="string">"useritem"</span>].IsArray()))</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; oDoc[i][<span class="string">"useritem"</span>].Size(); j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (oDoc[i][<span class="string">"useritem"</span>][j].IsNull())</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">int</span> iNum = oDoc[i][<span class="string">"useritem"</span>][j].GetInt();</span><br><span class="line"></span><br><span class="line">			mapInfo.vecUserItem.push_back(iNum);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		m_oMapVec.push_back(mapInfo);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>&#160; &#160; &#160; &#160;以上代码涉及到了两个结构体，MapInfo和ArrowInfo，对应定义如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//箭头信息</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ArrowInfo</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">int</span> iX;		<span class="comment">//横向位置索引</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> iY;		<span class="comment">//纵向位置索引</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> iType;	<span class="comment">//箭头类型</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">MapInfo</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">int</span> iColor;	<span class="comment">//颜色序号，也是主题序号</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> iID;	<span class="comment">//关卡ID</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> iBeat;	<span class="comment">//可点击次数</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vecMap;	<span class="comment">//六边形行列分布序列</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">vector</span>&lt;ArrowInfo&gt; vecMapItem;	<span class="comment">//地图中箭头分布</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vecUserItem;	<span class="comment">//可用箭头数据</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>&#160; &#160; &#160; &#160;另外还有一个函数SplitString，其负责解析出字符串中的三个数值，代码如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//移除string中所有位置出现过的某个字符</span></span><br><span class="line"><span class="keyword">void</span> CDataManager::SplitString(<span class="built_in">string</span> &amp;srcStr, <span class="keyword">char</span> chTarget, <span class="keyword">int</span>* pArray)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">int</span> iPos = srcStr.find_first_of(<span class="string">'_'</span>);</span><br><span class="line">	<span class="built_in">string</span> strTemp = srcStr.substr(<span class="number">0</span>, iPos);</span><br><span class="line">	pArray[<span class="number">0</span>] = atoi(strTemp.c_str());</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> iNewPos = srcStr.find_first_of(<span class="string">'_'</span>, iPos + <span class="number">1</span>);</span><br><span class="line">	strTemp = srcStr.substr(iPos + <span class="number">1</span>, iNewPos - iPos - <span class="number">1</span>);</span><br><span class="line">	pArray[<span class="number">1</span>] = atoi(strTemp.c_str());</span><br><span class="line"></span><br><span class="line">	iPos = srcStr.find_first_of(<span class="string">'_'</span>, iNewPos + <span class="number">1</span>);</span><br><span class="line">	strTemp = srcStr.substr(iNewPos + <span class="number">1</span>, iPos - iNewPos - <span class="number">1</span>);</span><br><span class="line">	pArray[<span class="number">2</span>] = atoi(strTemp.c_str());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="进度数据json"><a href="#进度数据json" class="headerlink" title="进度数据json"></a>进度数据json</h1><hr>
<p>&#160; &#160; &#160; &#160;现在需要考虑一个问题，游戏的进度该如何保存？使用UserDefault类？很显然是不行的，因为需要记录每个关卡的分数情况，200个关卡用UserDefault去存储的话显然够呛，所以这里可以考虑使用json文件保存游戏进度数据（当然，用xml也是可以的）。进度数据文件格式如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">"score"</span>:600,<span class="string">"level"</span>:200,<span class="string">"data"</span>:[3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3]&#125;</span><br></pre></td></tr></table></figure></p>
<p>&#160; &#160; &#160; &#160;先写个创建进度数据文件的函数。因为第一次打开游戏时，进度是木有的，所以需要先建好进度数据文件：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> CDataManager::InitUserData(<span class="keyword">const</span> <span class="keyword">char</span>* pName)</span><br><span class="line">&#123;</span><br><span class="line">	rapidjson::Document oWriteDoc;</span><br><span class="line">	oWriteDoc.SetObject();</span><br><span class="line">	rapidjson::Document::AllocatorType&amp; allocator = oWriteDoc.GetAllocator();</span><br><span class="line">	rapidjson::<span class="function">Value <span class="title">oArray</span><span class="params">(rapidjson::kArrayType)</span></span>;</span><br><span class="line"></span><br><span class="line">	oWriteDoc.AddMember(<span class="string">"score"</span>, <span class="number">0</span>, allocator);</span><br><span class="line">	oWriteDoc.AddMember(<span class="string">"level"</span>, <span class="number">0</span>, allocator);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//初始化数据</span></span><br><span class="line">	m_stUserInfo.iLevel = <span class="number">0</span>;</span><br><span class="line">	m_stUserInfo.iScore = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; TOTAL_LEVEL_NUM; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		m_stUserInfo.vecData.push_back(<span class="number">0</span>);</span><br><span class="line">		oArray.PushBack(<span class="number">0</span>, allocator);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	oWriteDoc.AddMember(<span class="string">"data"</span>, oArray, allocator);</span><br><span class="line"></span><br><span class="line">	rapidjson::StringBuffer oBuffer;</span><br><span class="line">	rapidjson::Writer&lt;rapidjson::StringBuffer&gt; oWriter(oBuffer);</span><br><span class="line">	oWriteDoc.Accept(oWriter);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//写入</span></span><br><span class="line">	FILE* pFile = fopen(pName, <span class="string">"wb+"</span>);</span><br><span class="line">	<span class="keyword">if</span> (pFile == <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">log</span>(<span class="string">"Open File '%s' Failed."</span>, pName);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">fputs</span>(oBuffer.GetString(), pFile);</span><br><span class="line">	fclose(pFile);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>&#160; &#160; &#160; &#160;这里传入参数pName即要写入的进度数据文件路径，由于创建时没有进度，所以score和level都是0，各个关卡分数记录也是0。<br>&#160; &#160; &#160; &#160;接下来写加载进度数据文件的函数：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//加载用户数据</span></span><br><span class="line"><span class="keyword">bool</span> CDataManager::LoadUserData()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">string</span> strPath = FileUtils::getInstance()-&gt;getWritablePath() + <span class="built_in">string</span>(SAVE_DATA_PATH);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> _DEBUG_</span></span><br><span class="line">	<span class="built_in">log</span>(<span class="string">"UserData Path:%s\n"</span>, strPath.c_str());</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">string</span> strContent = FileUtils::getInstance()-&gt;getStringFromFile(strPath);</span><br><span class="line">	rapidjson::Document oDoc;</span><br><span class="line">	oDoc.Parse&lt;<span class="number">0</span>&gt;(strContent.c_str());</span><br><span class="line">	<span class="keyword">if</span> (oDoc.HasParseError() || oDoc.IsNull())</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//log("CDataManager::LoadUserData Load 'oDoc' Error.");</span></span><br><span class="line">		InitUserData(strPath.c_str());</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//当前获得的分数</span></span><br><span class="line">	<span class="keyword">if</span> (oDoc[<span class="string">"score"</span>].IsNull())</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">log</span>(<span class="string">"CDataManager::LoadUserData Load 'score' Error."</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	m_stUserInfo.iScore = oDoc[<span class="string">"score"</span>].GetInt();</span><br><span class="line"></span><br><span class="line">	<span class="comment">//已通过关卡数量，因为不可能跨关卡，所以也表示当前通过的最后一关</span></span><br><span class="line">	<span class="keyword">if</span> (oDoc[<span class="string">"level"</span>].IsNull())</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">log</span>(<span class="string">"CDataManager::LoadUserData Load 'level' Error."</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	m_stUserInfo.iLevel = oDoc[<span class="string">"level"</span>].GetInt();</span><br><span class="line"></span><br><span class="line">	<span class="comment">//所有关卡当前信息</span></span><br><span class="line">	<span class="keyword">if</span> (oDoc[<span class="string">"data"</span>].IsNull() || (!oDoc[<span class="string">"data"</span>].IsArray()))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">log</span>(<span class="string">"CDataManager::LoadUserData Load 'data' Error."</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; oDoc[<span class="string">"data"</span>].Size(); i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (oDoc[<span class="string">"data"</span>][i].IsNull())</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">log</span>(<span class="string">"CDataManager::LoadUserData Load 'oDoc[data][%d]' Error."</span>, i);</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">int</span> iValue = oDoc[<span class="string">"data"</span>][i].GetInt();</span><br><span class="line">		m_stUserInfo.vecData.push_back(iValue);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>&#160; &#160; &#160; &#160;需要注意的是，默认当进度数据json文件读取失败时，说明json文件不存在，需要重新建立，即调用InitUserData函数创建进度数据文件。m_stUserInfo中保存了读取的进度数据，其类型是UserInfo结构体类型，UserInfo定义如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">UserInfo</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">int</span> iScore;		<span class="comment">//分数</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> iLevel;		<span class="comment">//当前通过关卡数</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vecData;	<span class="comment">//关卡得分数据</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>&#160; &#160; &#160; &#160;有了读取函数当然少不了写入函数，进度数据保存函数如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用户数据写入到指定文件中</span></span><br><span class="line"><span class="keyword">bool</span> CDataManager::SaveUserData()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">string</span> strPath = FileUtils::getInstance()-&gt;getWritablePath() + <span class="built_in">string</span>(SAVE_DATA_PATH);</span><br><span class="line">	<span class="built_in">string</span> strContent = FileUtils::getInstance()-&gt;getStringFromFile(strPath);</span><br><span class="line">	rapidjson::Document oDoc;</span><br><span class="line">	oDoc.Parse&lt;<span class="number">0</span>&gt;(strContent.c_str());</span><br><span class="line">	<span class="keyword">if</span> (oDoc.HasParseError())</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">log</span>(<span class="string">"Parse Error: %s\n"</span>, oDoc.GetParseError());</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (oDoc.IsNull())</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//更新分数</span></span><br><span class="line">	<span class="keyword">if</span> (oDoc[<span class="string">"score"</span>].IsNull())</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	oDoc[<span class="string">"score"</span>].SetInt(m_stUserInfo.iScore);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//更新通过的关卡数量</span></span><br><span class="line">	<span class="keyword">if</span> (oDoc[<span class="string">"level"</span>].IsNull())</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	oDoc[<span class="string">"level"</span>].SetInt(m_stUserInfo.iLevel);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//更新关卡当前信息</span></span><br><span class="line">	<span class="keyword">if</span> (oDoc[<span class="string">"data"</span>].IsNull() || !oDoc[<span class="string">"data"</span>].IsArray())</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> iVecSize = m_stUserInfo.vecData.size();</span><br><span class="line">	<span class="keyword">int</span> iJsonSize = oDoc[<span class="string">"data"</span>].Size();</span><br><span class="line">	<span class="keyword">if</span> (iVecSize != iJsonSize)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">log</span>(<span class="string">"Error: %d(iVecSize) != %d(iJsonSize)\n"</span>, iVecSize, iJsonSize);</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (rapidjson::SizeType i = <span class="number">0</span>; i &lt; oDoc[<span class="string">"data"</span>].Capacity(); i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (oDoc[<span class="string">"data"</span>][i].IsNull())</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		oDoc[<span class="string">"data"</span>][i].SetInt(m_stUserInfo.vecData[i]);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//准备写入数据</span></span><br><span class="line">	rapidjson::StringBuffer oBuffer;</span><br><span class="line">	rapidjson::Writer&lt;rapidjson::StringBuffer&gt; oWriter(oBuffer);</span><br><span class="line">	oDoc.Accept(oWriter);</span><br><span class="line"></span><br><span class="line">	FILE* pFile = fopen(strPath.c_str(), <span class="string">"wb+"</span>);</span><br><span class="line">	<span class="keyword">if</span> (pFile == <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">log</span>(<span class="string">"Error: Open File '%s' Failed.\n"</span>, strPath.c_str());</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">fputs</span>(oBuffer.GetString(), pFile);</span><br><span class="line">	fclose(pFile);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> _DEBUG_</span></span><br><span class="line">	<span class="built_in">log</span>(<span class="string">"UserDataPath:%s"</span>, strPath.c_str());</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>&#160; &#160; &#160; &#160;好了，json文件创建、读取和写入部分先说到这，如果有什么不明白的地方可以联系我。</p>
]]></content>
      
        <categories>
            
            <category> Trigger </category>
            
        </categories>
        
        
        <tags>
            
            <tag> cocos2dx </tag>
            
            <tag> Trigger </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Trigger第二篇：关卡布局]]></title>
      <url>/2015/TS2-map-layout.html</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><hr>
<p>&#160; &#160; &#160; &#160;原本打算写如何把json转换为plist文件，但是后来发现有些问题，所以暂时先不写了，等以后有时间补上。这一篇写写最主要的部分：关卡的布局。<a id="more"></a></p>
<h1 id="关卡地图"><a href="#关卡地图" class="headerlink" title="关卡地图"></a>关卡地图</h1><hr>
<p>&#160; &#160; &#160; &#160;第一篇里简单的说明了下地图文件levelmap.json里的数据，每一关都有一个多个六边形的组成的地图（暂且称之为地图吧），奇数行包含7个数字，偶数行包含6个数字，之所以这么安排是为了使整个地图可以居中对齐。<br>&#160; &#160; &#160; &#160;以第一个主题（即大关卡，暂且称之为主题）第1个关卡地图为例，其地图数据如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"color"</span>:0,  <span class="string">"id"</span>:1</span><br><span class="line">...</span><br><span class="line">[0,1,1,1,0,0,0],</span><br><span class="line">[1,2,2,1,0,0],</span><br><span class="line">[1,2,2,2,1,0,0],</span><br><span class="line">[1,2,2,1,0,0],</span><br><span class="line">[0,1,1,1,0,0,0],</span><br><span class="line">[0,0,0,0,0,0],</span><br><span class="line">[0,0,0,0,0,0,0],</span><br><span class="line">[0,0,0,0,0,0],</span><br><span class="line">[0,0,0,0,0,0,0]</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p>
<p>&#160; &#160; &#160; &#160;其中0表示该位置无六边形，1表示白色六边形，2表示主题色六边形，主题色序号即关卡属性中的color字段。先试着把整个地图画出来（忽略每行两个六边形之间的间距）：<br><img src="../images/2015/Trigger/map1.png" alt="初步的地图"><br>&#160; &#160; &#160; &#160;发现问题了没，嗯，没有六边形的位置实际上也是需要空出来的，再试着重新画一次：<br><img src="../images/2015/Trigger/map2.png" alt="保留了空白位置"><br>&#160; &#160; &#160; &#160;这回好像和目标地图有那么点像了，但是还是不太对，试着把每行居中调整一下：<br><img src="../images/2015/Trigger/map3.png" alt="每行居中"><br>&#160; &#160; &#160; &#160;这回和目标地图有八分相似了，然而还是有些问题，两行之间的间距太大，需要再稍微调整一下。嗯，这些是细节问题，可以后续在写代码时去控制。说到这，地图细节这一块就差不多了，好像很简单吧，然而我在写的时候调试了好久，才总算弄出来了= =</p>
<h1 id="数字和箭头"><a href="#数字和箭头" class="headerlink" title="数字和箭头"></a>数字和箭头</h1><hr>
<h2 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h2><hr>
<p>&#160; &#160; &#160; &#160;从第四个主题第1关开始，之后的部分关卡就有了数字，分为以下两种情况：<br>&#160; &#160; &#160; &#160;1、单个位置数值&lt;10：该六边形颜色为主题色，数字为白色，数字值为该位置数值-2。例如：某个位置数值为5，那么这个位置是一个主题色的六边形，包含了一个白色的数字3。<br>&#160; &#160; &#160; &#160;2、单个位置数值&gt;20：该六边形颜色为白色，数字为主题色，数字值为该位置数值最后一位-1。例如：某个位置数值为22，那么这个位置是一个白色的六边形，包含了一个主题色的数字1。<br>&#160; &#160; &#160; &#160;以第四个主题第6关为例，该地图包含6个有数字的六边形，六边形都是白色，数字都是主题色。其地图数据如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"color"</span>:3,  <span class="string">"id"</span>:6</span><br><span class="line">...</span><br><span class="line">[0,22,1,22,0,0,0],</span><br><span class="line">[2,1,1,2,0,0],</span><br><span class="line">[22,1,2,1,22,0,0],</span><br><span class="line">[1,1,1,1,0,0],</span><br><span class="line">[0,22,2,22,0,0,0],</span><br><span class="line">[0,0,0,0,0,0],</span><br><span class="line">[0,0,0,0,0,0,0],</span><br><span class="line">[0,0,0,0,0,0],</span><br><span class="line">[0,0,0,0,0,0,0]</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p>
<p>&#160; &#160; &#160; &#160;第四个主题第6关关卡截图：<br><img src="../images/2015/Trigger/map4-6.png" alt="第四个主题第6关地图"></p>
<h2 id="箭头"><a href="#箭头" class="headerlink" title="箭头"></a>箭头</h2><hr>
<p>&#160; &#160; &#160; &#160;从第三个主题第5关开始，之后的部分关卡就有了箭头，箭头对应的是mapitem数组中的配置，每个箭头数据配置如下形式：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"y_x_arrow"</span></span><br></pre></td></tr></table></figure></p>
<p>&#160; &#160; &#160; &#160;是的，没有看错，这里x和y的位置索引是反过来的。后面的arrow数值表示箭头的序号，第一篇中已经说明了。以第三个主题第5关为例，关卡包含的箭头配置如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"color"</span>:2,  <span class="string">"id"</span>:5</span><br><span class="line">...</span><br><span class="line"><span class="string">"mapitem"</span>:[<span class="string">"0_1_3"</span>,<span class="string">"3_1_2"</span>,<span class="string">"2_2_4"</span>,<span class="string">"2_4_1"</span>]</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p>
<p>&#160; &#160; &#160; &#160;来看看第三个主题第5关的关卡截图：<br><img src="../images/2015/Trigger/map3-5.png" alt="第三个主题第5关地图"><br>&#160; &#160; &#160; &#160;第三个主题第5关的地图数据：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"color"</span>:2,  <span class="string">"id"</span>:5</span><br><span class="line">...</span><br><span class="line">[0,2,1,2,0,0,0],</span><br><span class="line">[2,1,1,2,0,0],</span><br><span class="line">[2,1,2,1,2,0,0],</span><br><span class="line">[1,1,1,1,0,0],</span><br><span class="line">[0,2,2,2,0,0,0],</span><br><span class="line">[0,0,0,0,0,0],</span><br><span class="line">[0,0,0,0,0,0,0],</span><br><span class="line">[0,0,0,0,0,0],</span><br><span class="line">[0,0,0,0,0,0,0]</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p>
<p>&#160; &#160; &#160; &#160;和第一个主题第1关地图类似，只是有些位置颜色发生了变化。先来看看左边的箭头，左边的箭头对应的是mapitem里的第一个字符串，也就是”0_1_3”：1也就是第1行（从0开始），0也就是第0列，也就是说箭头是在第2行第一个数字对应的六边形位置，它的颜色正好是主题色……后面的我想应该都可以看出来了。</p>
<h2 id="可用箭头"><a href="#可用箭头" class="headerlink" title="可用箭头"></a>可用箭头</h2><hr>
<p>&#160; &#160; &#160; &#160;从第三个主题第9关开始，之后的部分关卡就有了可用箭头，可用箭头在下方5个六边形中，配置对应关卡配置中的useritem数组。以第三个主题第10关为例，该关卡中有3个可用箭头：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"color"</span>:2,  <span class="string">"id"</span>:10</span><br><span class="line">...</span><br><span class="line"><span class="string">"useritem"</span>:[3,2,4]</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p>
<p>&#160; &#160; &#160; &#160;数字3、2、4表示箭头序号，分别对应<img src="../images/2015/Trigger/arrow3.png" alt="">、<img src="../images/2015/Trigger/arrow2.png" alt="">和<img src="../images/2015/Trigger/arrow4.png" alt="">三个箭头。再来看看关卡截图：<br><img src="../images/2015/Trigger/map3-10.png" alt="第三个主题第10关"></p>
<h1 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h1><hr>
<p>&#160; &#160; &#160; &#160;关卡布局这一块先说到这，下一篇说说在cocos2d-x中读取json文件的那些事。</p>
]]></content>
      
        <categories>
            
            <category> Trigger </category>
            
        </categories>
        
        
        <tags>
            
            <tag> cocos2dx </tag>
            
            <tag> Trigger </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Trigger第一篇：简介以及资源分析]]></title>
      <url>/2015/TS1-resources-analyze.html</url>
      <content type="html"><![CDATA[<h1 id="开篇之前"><a href="#开篇之前" class="headerlink" title="开篇之前"></a>开篇之前</h1><hr>
<p>&#160; &#160; &#160; &#160;想想学Cocos2d-x还是在大四上学期开始的，从那时到现在，一直想做一个自己的游戏，可能是因为自己创意不够吧，一直没这个机会，另外，和自己的水平也有很大关系。这次做的Trigger，依然是仿照写的（也就是资源是拿来的，仅仅是代码是我写的= =）。不过还好，感觉这次做的也还行，大部分功能都做好了，除了一些帮助没做（估计也没多少人会玩，所以帮助就不打算做了）。另外，也是第一次发布了WP版，捣鼓了两天弄出来了，期间也遇到了各种问题……扯得有点远了。<a id="more"></a></p>
<h1 id="Trigger介绍"><a href="#Trigger介绍" class="headerlink" title="Trigger介绍"></a>Trigger介绍</h1><hr>
<p>&#160; &#160; &#160; &#160;一开始玩这游戏的时候感觉还不错，越到后面越难，难的都不想玩了（虐心的游戏(╯‵□′)╯︵┻━┻），先来段原版的介绍（app链接：<a href="http://www.coolapk.com/game/com.orszdxet.java.TriggerApp/" target="_blank" rel="noopener">http://www.coolapk.com/game/com.orszdxet.java.TriggerApp/</a>）：<br>&#160; &#160; &#160; &#160;橘红色与白色的六边形相互比邻，当你点击其中一块时，它会连同相邻的图形一起变换颜色。而你的目标就是要在有限的点击次数内，使所有的图形都变为白色。<br>&#160; &#160; &#160; &#160;每个关卡都会有提示最低完成步数，当你耗尽之后还会有额外的10次动作机会。以限定的步数完成就会获得三星的评价，利用额外的机会则会相应降低评价，追求满星的玩家就要多动动脑了。<br>&#160; &#160; &#160; &#160;游戏内有十大关卡，每个大关又有二十小关，难度会不断增加，喜欢挑战的玩家绝对不能错过！<br>&#160; &#160; &#160; &#160;★游戏特色★<br>&#160; &#160; &#160; &#160;★★★★★简单有趣的玩法<br>&#160; &#160; &#160; &#160;★★★★★大方美观的图形<br>&#160; &#160; &#160; &#160;★★★★★不断升级的挑战<br>&#160; &#160; &#160; &#160;★★★★★锻炼你的判断力<br>&#160; &#160; &#160; &#160;来几张游戏的截图：<br><img src="../images/2015/Trigger/menu.png" width="360" height="240" alt="菜单界面" align="center"><br><img src="../images/2015/Trigger/select.png" width="360" height="240" alt="选关界面" align="center"><br><img src="../images/2015/Trigger/game.png" width="360" height="240" alt="游戏界面" align="center"></p>
<p>&#160; &#160; &#160; &#160;嗯，介绍就先到这了，如果要了解更多内容，下载个玩玩就是了→_→</p>
<h1 id="资源提取"><a href="#资源提取" class="headerlink" title="资源提取"></a>资源提取</h1><hr>
<p>&#160; &#160; &#160; &#160;下载个原版apk然后WinRAR打开，找到resources文件夹（\assets\egret-game\resource），先把它解压出来。<br><img src="../images/2015/Trigger/unpack.png" alt="解压出来的resource文件夹"><br>&#160; &#160; &#160; &#160;再看看apk里的其他文件夹，可以发现，这里面好多广告和其他游戏宣传内容，那些没有后缀的文件重命名为png后缀就可看出来了。（不植入广告肿么赚钱？(╯‵□′)╯︵┻━┻）<br>&#160; &#160; &#160; &#160;另外搜索了下egret-game，这个是一款HTML5的游戏引擎，Egret是白鹭的意思，据说Egret游戏引擎可一次开发分别部署在android、IOS和WP原生平台或者HTML版本。《围住神经猫》就是这个引擎做出来的，感兴趣的可以去看看。</p>
<h1 id="资源分析"><a href="#资源分析" class="headerlink" title="资源分析"></a>资源分析</h1><hr>
<h2 id="资源描述文件resource-json"><a href="#资源描述文件resource-json" class="headerlink" title="资源描述文件resource.json"></a>资源描述文件resource.json</h2><p>&#160; &#160; &#160; &#160;先来看看最外面的文件resource.json（theme.thm这个是空的所以略过）。resource.json文件主要是所有资源的描述以及分组信息，例如：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	<span class="attr">"name"</span>:<span class="string">"block_json_json"</span>,</span><br><span class="line">	<span class="attr">"subkeys"</span>:<span class="string">"block_0,block_1,block_2,block_3,block_4,block_5,block_6,block_7,block_8,block_9,block_w"</span>,</span><br><span class="line">	<span class="attr">"type"</span>:<span class="string">"sheet"</span>,</span><br><span class="line">	<span class="attr">"url"</span>:<span class="string">"assets/block_json.json"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>&#160; &#160; &#160; &#160;这一段json代码意思就是block_json_json这一组里包含block_0.png到block_w.png共10个文件，这里省去了后缀。url即这一些资源对应的打包数据文件，即assets/block_json.json里包含了这十张图片的打包数据，例如：位置、宽高等。</p>
<h2 id="打包资源数据文件"><a href="#打包资源数据文件" class="headerlink" title="打包资源数据文件"></a>打包资源数据文件</h2><p>&#160; &#160; &#160; &#160;接下来看看assets里都有啥：<br><img src="../images/2015/Trigger/assets.png" alt="assets目录"><br>&#160; &#160; &#160; &#160;可以看出assets里存放了游戏中所有的资源，包括音效、图片以及打包图片对应的json文件等。先打开一个json文件看看是怎么打包图片的，以block_json.json为例，block_json.json代码如下：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"file"</span>:<span class="string">"block.png"</span>,<span class="attr">"frames"</span>:&#123;</span><br><span class="line"><span class="attr">"block_1"</span>:&#123;<span class="attr">"x"</span>:<span class="number">1</span>,<span class="attr">"y"</span>:<span class="number">1</span>,<span class="attr">"w"</span>:<span class="number">60</span>,<span class="attr">"h"</span>:<span class="number">63</span>,<span class="attr">"offX"</span>:<span class="number">0</span>,<span class="attr">"offY"</span>:<span class="number">0</span>,<span class="attr">"sourceW"</span>:<span class="number">60</span>,<span class="attr">"sourceH"</span>:<span class="number">63</span>&#125;,</span><br><span class="line"><span class="attr">"block_2"</span>:&#123;<span class="attr">"x"</span>:<span class="number">63</span>,<span class="attr">"y"</span>:<span class="number">1</span>,<span class="attr">"w"</span>:<span class="number">60</span>,<span class="attr">"h"</span>:<span class="number">63</span>,<span class="attr">"offX"</span>:<span class="number">0</span>,<span class="attr">"offY"</span>:<span class="number">0</span>,<span class="attr">"sourceW"</span>:<span class="number">60</span>,<span class="attr">"sourceH"</span>:<span class="number">63</span>&#125;,</span><br><span class="line"><span class="attr">"block_3"</span>:&#123;<span class="attr">"x"</span>:<span class="number">125</span>,<span class="attr">"y"</span>:<span class="number">1</span>,<span class="attr">"w"</span>:<span class="number">60</span>,<span class="attr">"h"</span>:<span class="number">63</span>,<span class="attr">"offX"</span>:<span class="number">0</span>,<span class="attr">"offY"</span>:<span class="number">0</span>,<span class="attr">"sourceW"</span>:<span class="number">60</span>,<span class="attr">"sourceH"</span>:<span class="number">63</span>&#125;,</span><br><span class="line"><span class="attr">"block_4"</span>:&#123;<span class="attr">"x"</span>:<span class="number">187</span>,<span class="attr">"y"</span>:<span class="number">1</span>,<span class="attr">"w"</span>:<span class="number">60</span>,<span class="attr">"h"</span>:<span class="number">63</span>,<span class="attr">"offX"</span>:<span class="number">0</span>,<span class="attr">"offY"</span>:<span class="number">0</span>,<span class="attr">"sourceW"</span>:<span class="number">60</span>,<span class="attr">"sourceH"</span>:<span class="number">63</span>&#125;,</span><br><span class="line"><span class="attr">"block_5"</span>:&#123;<span class="attr">"x"</span>:<span class="number">1</span>,<span class="attr">"y"</span>:<span class="number">66</span>,<span class="attr">"w"</span>:<span class="number">60</span>,<span class="attr">"h"</span>:<span class="number">63</span>,<span class="attr">"offX"</span>:<span class="number">0</span>,<span class="attr">"offY"</span>:<span class="number">0</span>,<span class="attr">"sourceW"</span>:<span class="number">60</span>,<span class="attr">"sourceH"</span>:<span class="number">63</span>&#125;,</span><br><span class="line"><span class="attr">"block_6"</span>:&#123;<span class="attr">"x"</span>:<span class="number">63</span>,<span class="attr">"y"</span>:<span class="number">66</span>,<span class="attr">"w"</span>:<span class="number">60</span>,<span class="attr">"h"</span>:<span class="number">63</span>,<span class="attr">"offX"</span>:<span class="number">0</span>,<span class="attr">"offY"</span>:<span class="number">0</span>,<span class="attr">"sourceW"</span>:<span class="number">60</span>,<span class="attr">"sourceH"</span>:<span class="number">63</span>&#125;,</span><br><span class="line"><span class="attr">"block_7"</span>:&#123;<span class="attr">"x"</span>:<span class="number">125</span>,<span class="attr">"y"</span>:<span class="number">66</span>,<span class="attr">"w"</span>:<span class="number">60</span>,<span class="attr">"h"</span>:<span class="number">63</span>,<span class="attr">"offX"</span>:<span class="number">0</span>,<span class="attr">"offY"</span>:<span class="number">0</span>,<span class="attr">"sourceW"</span>:<span class="number">60</span>,<span class="attr">"sourceH"</span>:<span class="number">63</span>&#125;,</span><br><span class="line"><span class="attr">"block_8"</span>:&#123;<span class="attr">"x"</span>:<span class="number">187</span>,<span class="attr">"y"</span>:<span class="number">66</span>,<span class="attr">"w"</span>:<span class="number">60</span>,<span class="attr">"h"</span>:<span class="number">63</span>,<span class="attr">"offX"</span>:<span class="number">0</span>,<span class="attr">"offY"</span>:<span class="number">0</span>,<span class="attr">"sourceW"</span>:<span class="number">60</span>,<span class="attr">"sourceH"</span>:<span class="number">63</span>&#125;,</span><br><span class="line"><span class="attr">"block_9"</span>:&#123;<span class="attr">"x"</span>:<span class="number">1</span>,<span class="attr">"y"</span>:<span class="number">131</span>,<span class="attr">"w"</span>:<span class="number">60</span>,<span class="attr">"h"</span>:<span class="number">63</span>,<span class="attr">"offX"</span>:<span class="number">0</span>,<span class="attr">"offY"</span>:<span class="number">0</span>,<span class="attr">"sourceW"</span>:<span class="number">60</span>,<span class="attr">"sourceH"</span>:<span class="number">63</span>&#125;,</span><br><span class="line"><span class="attr">"block_w"</span>:&#123;<span class="attr">"x"</span>:<span class="number">63</span>,<span class="attr">"y"</span>:<span class="number">131</span>,<span class="attr">"w"</span>:<span class="number">60</span>,<span class="attr">"h"</span>:<span class="number">63</span>,<span class="attr">"offX"</span>:<span class="number">0</span>,<span class="attr">"offY"</span>:<span class="number">0</span>,<span class="attr">"sourceW"</span>:<span class="number">60</span>,<span class="attr">"sourceH"</span>:<span class="number">63</span>&#125;,</span><br><span class="line"><span class="attr">"block_0"</span>:&#123;<span class="attr">"x"</span>:<span class="number">125</span>,<span class="attr">"y"</span>:<span class="number">131</span>,<span class="attr">"w"</span>:<span class="number">60</span>,<span class="attr">"h"</span>:<span class="number">63</span>,<span class="attr">"offX"</span>:<span class="number">0</span>,<span class="attr">"offY"</span>:<span class="number">0</span>,<span class="attr">"sourceW"</span>:<span class="number">60</span>,<span class="attr">"sourceH"</span>:<span class="number">63</span>&#125;&#125;&#125;</span><br></pre></td></tr></table></figure></p>
<p>&#160; &#160; &#160; &#160;是的，正如刚刚所说，block_json.json包含了从block_1开始到block_0结束十张图片的打包数据。这里x和y表示图片中心点在打包的图片block.png中的位置，w和h表示图片的有效宽高，offX和offY表示图像区域中心点与整体区域中心点的偏移量，sourceW和sourceH表示源图片的宽高。</p>
<h2 id="关卡数据文件map-json"><a href="#关卡数据文件map-json" class="headerlink" title="关卡数据文件map.json"></a>关卡数据文件map.json</h2><p>&#160; &#160; &#160; &#160;接下来转到config目录，先看看levelmap.json文件，这个文件包含了十个大关200个关卡的数据，选取一个有代表性的关卡数据如下所示：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;"color":8,"id":20,"beat":6,"map":[[0,0,0,23,0,0,0],[0,0,2,2,0,0],[23,2,1,2,1,2,23],[2,2,1,1,2,2],[0,1,1,1,1,1,0],[2,2,1,1,2,2],[23,2,1,2,1,2,23],[0,0,2,2,0,0],[0,0,0,23,0,0,0]],"mapitem":["1_4_1","5_4_1"],"useritem":[2,2,2,3]&#125;,</span><br></pre></td></tr></table></figure></p>
<p>&#160; &#160; &#160; &#160;上一段json代码描述的是第9大关（从0开始）第20关（从1开始）的关卡数据，其中color表示关卡对应颜色序号，也表示大关卡序号；id表示关卡序号；beat表示本关可用点击次数；之后的map数组表示关卡中每行每列对应的六边形状态。可以看出，关卡总共有9行数据，奇数行有7个数字，偶数行有6个数字，每个数值对应每一个六边形的状态：0表示该六边形不存在，1表示白色，2表示六边形颜色与关卡颜色相同，大于2且小于10的数表示该六边形颜色与主题色相同且包含了数字，值为该数值减2；大于10的数表示该六边形颜色为白色且包含了数字，数字为最后一位减1，这里23对应的数字为2。mapitem数组中每个字符串表示对应位置包含了箭头，例如：”1_4_1”表示第5行（从0开始）第2列（从0开始）有箭头，箭头序号为1；useritem数组中每个数字表示对应位置可用的箭头，这里“2,2,2,3”表示有4个箭头可用（可放置在任意一个六边形上），箭头序号分别为2，2，2，3。需要说明的是，箭头有以下四种类型，序号为0时表示无箭头。<br>序号：1　　　　图片：<img src="../images/2015/Trigger/arrow1.png" alt=""><br>序号：2　　　　图片：<img src="../images/2015/Trigger/arrow2.png" alt=""><br>序号：3　　　　图片：<img src="../images/2015/Trigger/arrow3.png" alt=""><br>序号：4　　　　图片：<img src="../images/2015/Trigger/arrow4.png" alt=""><br>&#160; &#160; &#160; &#160;levelmapss.json这个文件由于还不清楚作用（可能是附加关卡），所以先略过。</p>
<h1 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h1><p>第一篇先写到这，如果有什么还不太明白的地方，可以联系我。</p>
]]></content>
      
        <categories>
            
            <category> Trigger </category>
            
        </categories>
        
        
        <tags>
            
            <tag> cocos2dx </tag>
            
            <tag> Trigger </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[新的开始]]></title>
      <url>/2015/New-beginning.html</url>
      <content type="html"><![CDATA[<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>测试测试测试测试测试测试测试测试测试测试测试测试<a id="more"></a></p>
<p>代码测试：</p>
<pre><code class="bash"><span class="comment">#include &lt;iostream&gt;</span>
using namespace std;　　
int main()　　
{　　
    cout &lt;&lt; <span class="string">"hello world!"</span> &lt;&lt; endl;　　
    <span class="built_in">return</span> 0;　
}
</code></pre>
<p>图片测试：<br><img src="../images/2015/New-beginning/Visual Studio.png" alt="Visual Studio"></p>
]]></content>
      
        
        <tags>
            
            <tag> Test </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
